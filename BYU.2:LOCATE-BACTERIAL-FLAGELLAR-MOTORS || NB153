{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91249,"databundleVersionId":11294684,"sourceType":"competition"}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nicholas33/byu-2-locate-bacterial-flagellar-motors-nb153?scriptVersionId=235561936\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# Install required packages\n!pip install scipy scikit-image wandb imageio gcsfs","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Install monai in a separate step \n!pip install monai","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Import libraries\nimport os\nos.environ[\"CUDA_MODULE_LOADING\"] = \"LAZY\"\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom monai.networks.nets import UNet\nfrom monai.losses import DiceLoss\nimport torch.optim as optim\nfrom scipy.ndimage import gaussian_filter, center_of_mass\nfrom scipy.signal import find_peaks\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport glob\nfrom IPython.display import Video, display\nimport wandb\nimport time\nimport shutil\nimport gcsfs  # Dataset is too big for kaggle - After multiple attempts of uploading, I failed miserably. \nimport gc\nfrom torch.cuda.amp import autocast, GradScaler\nfrom concurrent.futures import ThreadPoolExecutor\n\n# Set random seed for reproducibility\ntorch.manual_seed(42)\nnp.random.seed(42)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nwb_token = user_secrets.get_secret(\"WANDB\")\nwandb.login(key=wb_token)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Install wandb\n!pip install wandb\n\n# Import wandb\nimport wandb\n# Initialize wandb run\nwandb.init(\n    project=\"byu-bacterial-flagellar-motors\", config={\n    \"learning_rate\": 1e-3,\n    \"epochs\": 50,\n    \"batch_size\": 4,\n    \"patch_size\": (128, 128, 128),\n    \"gaussian_sigma\": 5,\n    \"architecture\": \"3D U-Net\",\n    \"optimizer\": \"Adam\",\n    \"loss_function\": \"DiceLoss\",\n    \"beta\": 2  # For Fβ-score\n})","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fs = gcsfs.GCSFileSystem(token=\"anon\") # Initialize GCS filesystem\n\n# Define GCS path and local directory\ngcs_precomputed_path = \"gs://nb153/precomputedmasks\"\ngcs_preprocessed_path = \"gs://nb153/preprocessed\"\nlocal_dir = \"/kaggle/working/data\"\nos.makedirs(local_dir, exist_ok=True)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Device configuration\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load labels and split data\nlabels_df = pd.read_csv(\"/kaggle/input/byu-locating-bacterial-flagellar-motors-2025/train_labels.csv\")\ntomo_ids = sorted(labels_df[\"tomo_id\"].unique())\nprint(f\"Total tomograms:{len(tomo_ids)}\")\n\n# Split into train/val/test (80/10/10)\ntrain_val_ids, test_ids = sklearn.model_selection.train_test_split(\n    tomo_ids, test_size=0.1, random_state=42\n)\n\ntrain_ids, val_ids = sklearn.model_selection.train_test_split(\n    train_val_ids, test_size=0.1111, random_state=42  # 0.1111 of 90% = 10% of total\n)\n\n# Subset train_ids and val_ids for testing\ntrain_ids = train_ids[:10]  # 10 tomograms\nval_ids = val_ids[:2]      # 2 tomograms\n\nprint(f\"Train IDs: {len(train_ids)}, Val IDs: {len(val_ids)}, Test IDs: {len(test_ids)}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Download functions\ndef download_file(gcs_path, local_path):\n    fs = gcsfs.GCSFileSystem(block_size=2**20)  # 1 MB chunks\n    fs.get(gcs_path, local_path)\n    print(f\"✅ Download complete: {os.path.basename(local_path)}\")\n    return local_path\n\ndef download_npy_from_gcs(tomo_id, gcs_base_path, split, local_dir):\n    gcs_path = f\"{gcs_base_path}/{split}/tomo_{tomo_id}/tomo_{tomo_id}.npy\"\n    local_path = os.path.join(local_dir, f\"tomo_{tomo_id}.npy\")\n    return download_file(gcs_path, local_path)\n\ndef download_mask_from_gcs(tomo_id, gcs_base_path, split, local_dir):\n    gcs_path = f\"{gcs_base_path}/{split}/tomo_{tomo_id}_mask.npy\"\n    local_path = os.path.join(local_dir, f\"tomo_{tomo_id}_mask.npy\")\n    return download_file(gcs_path, local_path)\n\ndef download_tomogram_files(tomo_id, gcs_preprocessed_path, gcs_precomputed_path, split, local_dir):\n    os.makedirs(local_dir, exist_ok=True)\n    with ThreadPoolExecutor(max_workers=2) as executor:\n        futures = [\n            executor.submit(download_npy_from_gcs, tomo_id, gcs_preprocessed_path, split, local_dir),\n            executor.submit(download_mask_from_gcs, tomo_id, gcs_precomputed_path, split, local_dir)\n        ]\n        tomo_path, mask_path = [f.result() for f in futures]\n    return tomo_path, mask_path","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Pre-filter train_ids to include only tomograms with motors\ndef filter_valid_tomograms(labels_df, train_ids):\n    valid_tomograms = []\n    for tomo_id in train_ids:\n        tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id]\n        has_motors = any((tomo_labels[\"Number of motors\"] > 0) & (tomo_labels[\"Motor axis 0\"] != -1))\n        if has_motors:\n            valid_tomograms.append(tomo_id)\n    print(f\"Valid tomograms with motors: {len(valid_tomograms)}/{len(train_ids)}\")\n    return valid_tomograms","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Function to sample patches from a single tomogram\ndef sample_patches(tomo_id, volume, mask, labels_df, patch_size=(128, 128, 128), patches_per_volume=32):\n    shape = volume.shape\n    patches = []\n    mask_patches = []\n    # Get motor coordinates\n    tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id]\n    motor_coords = []\n    for _, row in tomo_labels.iterrows():\n        if row[\"Number of motors\"] > 0 and row[\"Motor axis 0\"] != -1:\n            z, y, x = int(row[\"Motor axis 0\"]), int(row[\"Motor axis 1\"]), int(row[\"Motor axis 2\"])\n            if 0 <= z < shape[0] and 0 <= y < shape[1] and 0 <= x < shape[2]:\n                motor_coords.append((z, y, x))\n\n    # Debug: Check motor coordinates and mask\n    print(f\"Tomogram {tomo_id}: {len(motor_coords)} valid motor coordinates\")\n    print(f\"Mask min/max: {mask.min():.4f}/{mask.max():.4f}\")\n    \n    if not motor_coords:\n        print(f\"Warning: No valid motor coordinates for {tomo_id}, using random sampling\")\n\n    # Sample 90% patches around motors\n    target_motor_patches = int(patches_per_volume * 0.9)\n    for _ in range(target_motor_patches):\n        zc, yc, xc = motor_coords[np.random.randint(len(motor_coords))]\n        z = np.clip(zc - patch_size[0]//2 + np.random.randint(-32, 32), 0, shape[0] - patch_size[0])\n        y = np.clip(yc - patch_size[1]//2 + np.random.randint(-32, 32), 0, shape[1] - patch_size[1])\n        x = np.clip(xc - patch_size[2]//2 + np.random.randint(-32, 32), 0, shape[2] - patch_size[2])\n        patch = volume[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        mask_patch = mask[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        patches.append(patch)\n        mask_patches.append(mask_patch)\n\n    # Fill remaining patches randomly\n    for _ in range(patches_per_volume - target_motor_patches):\n        z = np.random.randint(0, max(1, shape[0] - patch_size[0]))\n        y = np.random.randint(0, max(1, shape[1] - patch_size[1]))\n        x = np.random.randint(0, max(1, shape[2] - patch_size[2]))\n        patch = volume[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        mask_patch = mask[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        patches.append(patch)\n        mask_patches.append(mask_patch)\n    \n    return np.array(patches), np.array(mask_patches)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Dataset for patches from a single tomogram\nclass PatchDataset(Dataset):\n    def __init__(self, patches, mask_patches):\n        self.patches = patches\n        self.mask_patches = mask_patches\n    \n    def __len__(self):\n        return len(self.patches)\n    \n    def __getitem__(self, idx):\n        patch = self.patches[idx]\n        mask_patch = self.mask_patches[idx]\n        return torch.tensor(patch, dtype=torch.float32), torch.tensor(mask_patch, dtype=torch.float32)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Dataset for full tomograms (validation/test)\nclass TomogramDataset(Dataset):\n    def __init__(self, tomo_id, gcs_preprocessed_path, local_dir, mode=\"test\"):\n        self.tomo_id = tomo_id\n        self.gcs_preprocessed_path = gcs_preprocessed_path\n        self.local_dir = local_dir\n        self.mode = mode\n        self.volume = None\n    \n    def load(self):\n        tomo_path = download_npy_from_gcs(self.tomo_id, self.gcs_preprocessed_path, \"train\" if self.mode == \"val\" else \"test\", self.local_dir)\n        self.volume = np.load(tomo_path)\n    \n    def clear(self):\n        if self.volume is not None:\n            del self.volume\n            self.volume = None\n            tomo_path = os.path.join(self.local_dir, f\"{self.tomo_id}.npy\")\n            if os.path.exists(tomo_path):\n                os.remove(tomo_path)\n            gc.collect()\n    \n    def __len__(self):\n        return 1\n    \n    def __getitem__(self, idx):\n        if self.volume is None:\n            self.load()\n        volume = self.volume[np.newaxis, np.newaxis, ...]\n        return torch.tensor(volume, dtype=torch.float32), self.tomo_id","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Define 3D U-Net model\nmodel = UNet(\n    spatial_dims=3,\n    in_channels=1,\n    out_channels=1,\n    channels=(32, 64, 128, 256, 512),\n    strides=(2, 2, 2, 2),\n    num_res_units=2,\n).to(device)\nprint(\"Model device:\", next(model.parameters()).device)\n\n# Loss and optimizer\ncriterion = DiceLoss(sigmoid=True)  # Sigmoid to handle [0,1] output\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=\"min\", factor=0.1, patience=5)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"start_epoch = 0\nbest_val_loss = float(\"inf\")\ntrain_losses = []\nval_losses = []\n\nif os.path.exists(\"checkpoint.pth\"):\n    checkpoint = torch.load(\"checkpoint.pth\", map_location=device)\n    model.load_state_dict(checkpoint['model_state_dict'])\n    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n    scheduler.load_state_dict(checkpoint['scheduler_state_dict'])\n    best_val_loss = checkpoint['best_val_loss']\n    start_epoch = checkpoint['epoch'] + 1\n    print(f\"Resumed from epoch {start_epoch}\")\nelse:\n    print(\"No checkpoint found, starting from scratch.\")\n\n# Training function - adding mixed precision\ndef train_epoch(model, loader, criterion, optimizer, epoch, start_epoch, use_mixed_precision=True, scaler=None):\n    model.train()\n    epoch_loss = 0.0\n    start = time.time()\n    for i, (inputs, targets) in enumerate(tqdm(loader, desc=\"Training\")):\n        batch_load_time = time.time() - start\n        inputs, targets = inputs.to(device), targets.to(device)\n        optimizer.zero_grad()\n        if use_mixed_precision and scaler is not None:\n            with autocast(device_type='cuda'):\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n            scaler.scale(loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n        else:\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            loss.backward()\n            optimizer.step()\n        epoch_loss += loss.item()\n        if epoch == start_epoch and i < 2:  # Print for first two batches of first epoch\n            print(f\"\\n🕒 Batch {i} load time: {batch_load_time:.2f}s\")\n            print(f\"Inputs shape: {inputs.shape}, min/max: {inputs.min().item():.4f}/{inputs.max().item():.4f}\")\n            print(f\"Targets shape: {targets.shape}, min/max: {targets.min().item():.4f}/{targets.max().item():.4f}\")\n            print(f\"Outputs shape: {outputs.shape}, min/max: {outputs.min().item():.4f}/{outputs.max().item():.4f}\")\n            print(f\"Loss: {loss.item():.4f}\")\n            print(f\"GPU Memory: {torch.cuda.memory_allocated() / 1024**3:.2f} GB\")\n        start = time.time()\n    print(f\"Tomogram Loss: {epoch_loss / len(loader):.4f}\")  # Summary loss per tomogram\n    return epoch_loss / len(loader)\n\ndef validate(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df, criterion):\n    model.eval()\n    epoch_loss = 0.0\n    patches_per_volume = 8\n    \n    for tomo_id in tqdm(val_ids, desc=\"Validation\"):\n        # Download tomogram and mask\n        tomo_path = download_npy_from_gcs(tomo_id, gcs_preprocessed_path, \"train\", local_dir)\n        mask_path = download_mask_from_gcs(tomo_id, gcs_precomputed_path, \"train\", local_dir)\n        volume = np.load(tomo_path)\n        mask = np.load(mask_path)\n        \n        # Sample patches\n        patches, mask_patches = sample_patches(tomo_id, volume, mask, labels_df, patches_per_volume=patches_per_volume)\n        dataset = PatchDataset(patches, mask_patches)\n        loader = DataLoader(dataset, batch_size=1, shuffle=False, num_workers=0, pin_memory=True)\n        \n        # Validate\n        with torch.no_grad():\n            for inputs, targets in loader:\n                inputs = inputs.to(device)\n                targets = targets.to(device)\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n                epoch_loss += loss.item()\n        \n        # Clean up\n        del volume, mask, patches, mask_patches, dataset, loader\n        os.remove(tomo_path)\n        os.remove(mask_path)\n        gc.collect()\n    \n    return epoch_loss / (len(val_ids) * patches_per_volume)\n\n# Training loop\nnum_epochs = 50\npatience = 10\ntrigger_times = 0\npatches_per_volume_train = 64\nuse_mixed_precision = True\nscaler = GradScaler('cuda') if use_mixed_precision else None\nmax_disk_tomograms = 3  # Buffer up to 3 tomograms (~6 GB)\n\n# Filter train_ids\ntrain_ids = filter_valid_tomograms(labels_df, train_ids)\n\n# Track downloaded tomograms\ndownloaded_tomograms = []\n\nfor epoch in range(start_epoch, num_epochs):\n    print(f\"STARTING TRAINING\")\n    print(f\"\\n=== Epoch {epoch+1}/{num_epochs} ===\")\n\n    # Training\n    epoch_train_loss = 0.0\n    tomo_count = 0\n    for tomo_id in tqdm(train_ids, desc=\"Training tomograms\"):\n        # Check disk usage\n        disk_usage = shutil.disk_usage(local_dir)\n        print(f\"Disk usage: {disk_usage.used / 1024**3:.2f}/{disk_usage.total / 1024**3:.2f} GB\")\n        \n        # Clean up old files if disk is full\n        while len(downloaded_tomograms) >= max_disk_tomograms:\n            old_tomo_id = downloaded_tomograms.pop(0)\n            for path in [os.path.join(local_dir, f\"tomo_{old_tomo_id}.npy\"),\n                         os.path.join(local_dir, f\"tomo_{old_tomo_id}_mask.npy\")]:\n                if os.path.exists(path):\n                    os.remove(path)\n                    print(f\"Deleted {path}\")\n        \n        # Download tomogram and mask\n        tomo_path, mask_path = download_tomogram_files(tomo_id, gcs_preprocessed_path, gcs_precomputed_path, \"train\", local_dir)\n        downloaded_tomograms.append(tomo_id)\n        # load files \n        volume = np.load(tomo_path)\n        mask = np.load(mask_path)\n        \n        # Sample patches\n        patches, mask_patches = sample_patches(tomo_id, volume, mask, labels_df, patches_per_volume=patches_per_volume_train)\n        if patches is None:\n            print(f\"Skipping {tomo_id} due to no valid motor coordinates or empty mask\")\n            del volume, mask\n            os.remove(tomo_path)\n            os.remove(mask_path)\n            downloaded_tomograms.remove(tomo_id)\n            gc.collect()\n            continue\n\n        dataset = PatchDataset(patches, mask_patches)\n        loader = DataLoader(dataset, batch_size=8, shuffle=True, num_workers=0, pin_memory=True)\n        \n        # Train\n        epoch_train_loss += train_epoch(model, loader, criterion, optimizer, epoch, start_epoch, use_mixed_precision, scaler)\n        tomo_count += 1\n        \n        # Clean up\n        del volume, mask, patches, mask_patches, dataset, loader\n        os.remove(tomo_path)\n        os.remove(mask_path)\n        gc.collect()\n        torch.cuda.empt_cache() #Clear GPU cache \n    \n    train_loss = epoch_train_loss / tomo_count if tomo_count > 0 else float('inf')\n    train_losses.append(train_loss)\n    \n    # Validation\n    val_loss = validate(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df, criterion)\n    val_losses.append(val_loss)\n    \n    print(f\"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}\")\n    \n    \n    #wandb.log({                    # Log metrics to wandb\n    #    \"epoch\": epoch + 1,\n    #    \"train_loss\": train_loss,\n    #    \"val_loss\": val_loss,\n    #    \"learning_rate\": optimizer.param_groups[0][\"lr\"]\n    #})\n    scheduler.step(val_loss)   # Learning rate scheduling\n\n    # GPU diagnostics every 10 epochs\n    if (epoch + 1) % 10 == 0:\n        torch.cuda.synchronize()\n        print(f\"\\n📊 GPU Memory after Epoch {epoch+1}:\")\n        print(f\"GPU Memory: {torch.cuda.memory_allocated() / 1024**3:.2f} GB\")\n        os.system(\"nvidia-smi\")\n\n    \n    # Checkpointing and Early stopping\n    if val_loss < best_val_loss:\n        best_val_loss = val_loss\n        trigger_times = 0\n        torch.save({               # Save full training state \n            'epoch': epoch,\n            'model_state_dict': model.state_dict(),\n            'optimizer_state_dict': optimizer.state_dict(),\n            'scheduler_state_dict': scheduler.state_dict(),\n            'best_val_loss': best_val_loss\n        }, \"checkpoint.pth\")\n        torch.save(model.state_dict(), \"best_model.pth\") #Save model weights for inference / tuning \n        # Log the best model to wandb - Uncomment the below. \n        #artifact = wandb.Artifact(\"best_model\", type=\"model\")\n        #artifact.add_file(\"best_model.pth\")\n        #wandb.log_artifact(artifact)\n    else:\n        trigger_times += 1\n        if trigger_times >= patience:\n            print(\"Early stopping triggered!\")\n            break\n\n# Plot Training and Validation loss \nplt.figure(figsize=(10, 5))\nplt.plot(train_losses, label=\"Training Loss\")\nplt.plot(val_losses, label=\"Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training and Validation Loss Over Epochs\")\nplt.legend()\nplt.grid(True)\nplt.show()\nplt.close()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 1 Hyperparameter Tuning (Peak Detection Threshold)\n# 2 Predict on the validation set,\n# 3 Extract motor locations using peak detection\n# 4 Tune the threshold to maximize the Fβ-score (β=2).\n# 5 Using competition's metric\n\n# Metric implementation (from provided notebook)\ndef distance_metric(solution, submission, thresh_ratio, min_radius):\n    coordinate_cols = ['Motor axis 0', 'Motor axis 1', 'Motor axis 2']\n    label_tensor = solution[coordinate_cols].values.reshape(len(solution), -1, len(coordinate_cols))\n    predicted_tensor = submission[coordinate_cols].values.reshape(len(submission), -1, len(coordinate_cols))\n    solution['distance'] = np.linalg.norm(label_tensor - predicted_tensor, axis=2).min(axis=1)\n    solution['thresholds'] = solution['Voxel spacing'].apply(lambda x: (min_radius * thresh_ratio) / x)\n    solution['predictions'] = submission['Has motor'].values\n    solution.loc[(solution['distance'] > solution['thresholds']) & (solution['Has motor'] == 1) & (submission['Has motor'] == 1), 'predictions'] = 0\n    return solution['predictions'].values\n\ndef score(solution, submission, min_radius, beta):\n    solution = solution.sort_values('tomo_id').reset_index(drop=True)\n    submission = submission.sort_values('tomo_id').reset_index(drop=True)\n    if not solution['tomo_id'].eq(submission['tomo_id']).all():\n        raise ValueError('Submitted tomo_id values do not match')\n    submission['Has motor'] = 1\n    select = (submission[['Motor axis 0', 'Motor axis 1', 'Motor axis 2']] == -1).any(axis='columns')\n    submission.loc[select, 'Has motor'] = 0\n    predictions = distance_metric(solution, submission, thresh_ratio=1.0, min_radius=min_radius)\n    return sklearn.metrics.fbeta_score(solution['Has motor'].values, predictions, beta=beta)\n\n# Predict on full volume with sliding window\ndef predict_full_volume(model, volume, patch_size=(128, 128, 128), stride=64):\n    model.eval()\n    volume = volume.to(device)\n    z_size, y_size, x_size = volume.shape[2:]\n    pz, py, px = patch_size\n    output = torch.zeros_like(volume)\n    counts = torch.zeros_like(volume)\n    \n    with torch.no_grad():\n        for z in range(0, z_size, stride):\n            for y in range(0, y_size, stride):\n                for x in range(0, x_size, stride):\n                    z_end, y_end, x_end = z+pz, y+py, x+px\n                    patch = volume[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)]\n                    pad_z, pad_y, pad_x = max(0, z_end-z_size), max(0, y_end-y_size), max(0, x_end-x_size)\n                    if pad_z > 0 or pad_y > 0 or pad_x > 0:\n                        patch = torch.nn.functional.pad(patch, (0, pad_x, 0, pad_y, 0, pad_z))\n                    out_patch = torch.sigmoid(model(patch))\n                    output[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)] += out_patch[:, :, :pz-pad_z, :py-pad_y, :px-pad_x]\n                    counts[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)] += 1\n    output = output / (counts + 1e-8)\n    return output.cpu().numpy()\n\n# Extract motor location from predicted mask\ndef extract_motor_location(mask, threshold):\n    mask = mask.squeeze()\n    if mask.max() < threshold:\n        return -1, -1, -1, 0  # No motor\n    # Find the strongest peak\n    z, y, x = np.unravel_index(np.argmax(mask), mask.shape)\n    # Refine with center of mass for sub-voxel accuracy\n    region = mask[max(0, z-5):z+6, max(0, y-5):y+6, max(0, x-5):x+6]\n    if region.size == 0:\n        return z, y, x, 1\n    z_offset, y_offset, x_offset = center_of_mass(region)\n    z, y, x = z + z_offset - 5, y + y_offset - 5, x + x_offset - 5\n    return z, y, x, 1\n\n# Tune peak detection threshold\ndef tune_threshold(model, val_loader, val_ids, labels_df, thresholds=np.linspace(0.1, 0.9, 9)):\n    model.load_state_dict(torch.load(\"best_model.pth\"))\n    model.eval()\n    best_threshold = 0.5\n    best_fbeta = 0.0\n    # Store thresholds and Fβ Scrores \n    thresholds_list = []\n    fbeta_scores = []\n    \n    for threshold in thresholds:\n        predictions = []\n        for tomo_id in tqdm(val_ids, desc=f\"Tuning threshold {threshold:.2f}\"):\n            dataset = TomogramnDataset(tomo_id, gcs_preprocessed_path, local_dir, mode=\"val\")\n            dataset.load()\n            volume, _ = dataset[0]\n            pred_mask = predict_full_volume(model, volume)\n            z, y, x, has_motor = extract_motor_location(pred_mask, threshold)  # Extract motor location\n            \n            # Dont Load full volume - Use self.volumes from dataset instead of load tomogram\n            #volume = val_dataset.volumes[tomo_id]\n            #volume = torch.tensor(volume[np.newaxis, np.newaxis, ...], dtype=torch.float32)\n            #pred_mask = predict_full_volume(model, volume)  # Predict mask          \n            #z, y, x, has_motor = extract_motor_location(pred_mask, threshold)  # Extract motor location\n            \n            # Visualize prediction for the first tomogram \n            if len(predictions) == 0 and tomo_id == val_ids[0]: # Only for the first tomogram \n                # load ground truth mask \n                mask_path = download_mask_from_gcs(tomo_id, gcs_precomputed_path, \"train\", local_dir)\n                gt_mask = np.load(mask_path)\n                # Take a middle slice\n                slice_idx = volume.shape[2] // 2\n                tomo_slice = volume[0, 0, slice_idx, :, :].numpy()\n                pred_slice = pred_mask[0, 0, slice_idx, :, :]\n                gt_slice = gt_mask[slice_idx, :, :]\n                # Get predicted and ground truth motor locations\n                pred_z, pred_y, pred_x, _ = z, y, x, has_motor\n                gt_row = labels_df[labels_df[\"tomo_id\"] == tomo_id].iloc[0]\n                gt_z, gt_y, gt_x = gt_row[\"Motor axis 0\"], gt_row[\"Motor axis 1\"], gt_row[\"Motor axis 2\"]\n\n                plt.figure(figsize=(15, 5))\n                plt.subplot(1, 3, 1)\n                plt.imshow(tomo_slice, cmap=\"gray\")\n                plt.title(f\"Tomogram Slice (z={slice_idx})\")\n                plt.axis(\"off\")     \n                plt.subplot(1, 3, 2)\n                plt.imshow(pred_slice, cmap=\"hot\")\n                if has_motor:\n                    plt.scatter(pred_x, pred_y, c=\"blue\", marker=\"x\", s=100, label=\"Predicted\")\n                if gt_z != -1:\n                    plt.scatter(gt_x, gt_y, c=\"green\", marker=\"o\", s=100, label=\"Ground Truth\")\n                plt.title(\"Predicted Mask with Motor Locations\")\n                plt.legend()\n                plt.axis(\"off\")\n                plt.subplot(1, 3, 3)\n                plt.imshow(gt_slice, cmap=\"hot\")\n                if gt_z != -1:\n                    plt.scatter(gt_x, gt_y, c=\"green\", marker=\"o\", s=100, label=\"Ground Truth\")\n                plt.title(\"Ground Truth Mask\")\n                plt.legend()\n                plt.axis(\"off\")\n                plt.tight_layout()\n                plt.show()\n                break  # Only visualize one tomogram\n            predictions.append({\"tomo_id\": tomo_id, \"Motor axis 0\": z, \"Motor axis 1\": y, \"Motor axis 2\": x, \"Has motor\": has_motor})\n        \n        # Create submission DataFrame\n        submission_df = pd.DataFrame(predictions)\n        # Create solution DataFrame\n        solution_data = []\n        for tomo_id in val_ids:\n            tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id].iloc[0]\n            solution_data.append({\n                \"tomo_id\": tomo_id,\n                \"Motor axis 0\": tomo_labels[\"Motor axis 0\"],\n                \"Motor axis 1\": tomo_labels[\"Motor axis 1\"],\n                \"Motor axis 2\": tomo_labels[\"Motor axis 2\"],\n                \"Voxel spacing\": tomo_labels[\"Voxel spacing\"],\n                \"Has motor\": 1 if tomo_labels[\"Number of motors\"] > 0 else 0\n            })\n        solution_df = pd.DataFrame(solution_data)\n        # Compute Fβ-score\n        fbeta = score(solution_df, submission_df, min_radius=1000, beta=2)\n        print(f\"Threshold {threshold:.2f}, Fβ-score: {fbeta:.4f}\")\n        # Append for plotting \n        thresholds_list.append(threshold)\n        fbeta_scores.append(fbeta)\n        # WANDB Log Fβ-score for this threshold\n        \"\"\"\n        wandb.log({\n            \"threshold\": threshold,\n            \"fbeta_score\": fbeta\n        })\n        \"\"\"\n        if fbeta > best_fbeta:\n            best_fbeta = fbeta\n            best_threshold = threshold\n\n    # Plot Fβ-score vs. threshold\n    plt.figure(figsize=(8, 5))\n    plt.plot(thresholds_list, fbeta_scores, marker=\"o\")\n    plt.xlabel(\"Threshold\")\n    plt.ylabel(\"Fβ-score (β=2)\")\n    plt.title(\"Fβ-score vs. Peak Detection Threshold\")\n    plt.grid(True)\n    plt.show()\n    plt.close()\n    print(f\"Best threshold: {best_threshold:.2f}, Best Fβ-score: {best_fbeta:.4f}\")\n    return best_threshold\n\n\n\n# Log the best threshold and Fβ-score\n#wandb.log({\n#    \"best_threshold\": best_threshold,\n#    \"best_fbeta_score\": best_fbeta\n#})\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Test prediction\ndef predict_test(model, test_ids, gcs_preprocessed_path, local_dir, threshold):\n    model.load_state_dict(torch.load(\"best_model.pth\"))\n    model.eval()\n    predictions = []\n    for tomo_id in tqdm(test_ids, desc=\"Predicting on test set\"):\n        dataset = TomogramDataset(tomo_id, gcs_preprocessed_path, local_dir, mode=\"test\")\n        dataset.load()\n        volume, _ = dataset[0]\n        pred_mask = predict_full_volume(model, volume)\n        z, y, x, has_motor = extract_motor_location(pred_mask, threshold)\n        predictions.append({\"tomo_id\": tomo_id, \"Motor axis 0\": z, \"Motor axis 1\": y, \"Motor axis 2\": x})\n        dataset.clear()\n    return pd.DataFrame(predictions)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Run pipeline\nprint(\"Starting hyperparameter tuning...\")\nbest_threshold = tune_threshold(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df)\nprint(\"Generating test predictions...\")\nsubmission_df = predict_test(model, test_ids, gcs_preprocessed_path, local_dir, best_threshold)\nsubmission_df.to_csv(\"submission.csv\", index=False)\nprint(\"Submission file created: submission.csv\")\n\n# Finish the wandb run\n#wandb.finish()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}