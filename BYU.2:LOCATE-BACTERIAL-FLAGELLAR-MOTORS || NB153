{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":91249,"databundleVersionId":11294684,"sourceType":"competition"}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nicholas33/byu-2-locate-bacterial-flagellar-motors-nb153?scriptVersionId=235693120\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# Install required packages\n!pip install monai scipy scikit-image wandb imageio gcsfs\n\n# Import libraries\nimport os\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom monai.networks.nets import UNet\nfrom monai.losses import DiceLoss\nimport torch.optim as optim\nfrom scipy.ndimage import gaussian_filter, center_of_mass\nfrom scipy.signal import find_peaks\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport glob\nfrom IPython.display import Video, display\nimport wandb\nimport time\nimport shutil\nimport gcsfs  # Dataset is too big for kaggle - After multiple attempts of uploading, I failed miserably. \nimport gc\nimport threading\nimport logging\nimport sys\n\n# Set up logging for file output (backup) and minimal console logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler(\"/kaggle/working/training.log\", mode='w')  # Save logs to file\n    ]\n)\nlogger = logging.getLogger(__name__)\n\n# Set random seed for reproducibility\ntorch.manual_seed(42)\nnp.random.seed(42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:48:01.689395Z","iopub.execute_input":"2025-04-23T15:48:01.689686Z","iopub.status.idle":"2025-04-23T15:48:21.527885Z","shell.execute_reply.started":"2025-04-23T15:48:01.689663Z","shell.execute_reply":"2025-04-23T15:48:21.526941Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: monai in /usr/local/lib/python3.11/dist-packages (1.4.0)\nRequirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.15.2)\nRequirement already satisfied: scikit-image in /usr/local/lib/python3.11/dist-packages (0.25.1)\nRequirement already satisfied: wandb in /usr/local/lib/python3.11/dist-packages (0.19.6)\nRequirement already satisfied: imageio in /usr/local/lib/python3.11/dist-packages (2.37.0)\nRequirement already satisfied: gcsfs in /usr/local/lib/python3.11/dist-packages (2024.10.0)\nRequirement already satisfied: numpy<2.0,>=1.24 in /usr/local/lib/python3.11/dist-packages (from monai) (1.26.4)\nRequirement already satisfied: torch>=1.9 in /usr/local/lib/python3.11/dist-packages (from monai) (2.5.1+cu124)\nRequirement already satisfied: networkx>=3.0 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (3.4.2)\nRequirement already satisfied: pillow>=10.1 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (11.1.0)\nRequirement already satisfied: tifffile>=2022.8.12 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (2025.1.10)\nRequirement already satisfied: packaging>=21 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (24.2)\nRequirement already satisfied: lazy-loader>=0.4 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (0.4)\nRequirement already satisfied: click!=8.0.0,>=7.1 in /usr/local/lib/python3.11/dist-packages (from wandb) (8.1.8)\nRequirement already satisfied: docker-pycreds>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (0.4.0)\nRequirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (3.1.44)\nRequirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from wandb) (4.3.7)\nRequirement already satisfied: protobuf!=4.21.0,!=5.28.0,<6,>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (3.20.3)\nRequirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (7.0.0)\nRequirement already satisfied: pydantic<3,>=2.6 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.11.3)\nRequirement already satisfied: pyyaml in /usr/local/lib/python3.11/dist-packages (from wandb) (6.0.2)\nRequirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.32.3)\nRequirement already satisfied: sentry-sdk>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.21.0)\nRequirement already satisfied: setproctitle in /usr/local/lib/python3.11/dist-packages (from wandb) (1.3.4)\nRequirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from wandb) (75.1.0)\nRequirement already satisfied: typing-extensions<5,>=4.4 in /usr/local/lib/python3.11/dist-packages (from wandb) (4.13.1)\nRequirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from gcsfs) (3.11.16)\nRequirement already satisfied: decorator>4.1.2 in /usr/local/lib/python3.11/dist-packages (from gcsfs) (4.4.2)\nRequirement already satisfied: fsspec==2024.10.0 in /usr/local/lib/python3.11/dist-packages (from gcsfs) (2024.10.0)\nRequirement already satisfied: google-auth>=1.2 in /usr/local/lib/python3.11/dist-packages (from gcsfs) (2.27.0)\nRequirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.11/dist-packages (from gcsfs) (1.2.1)\nRequirement already satisfied: google-cloud-storage in /usr/local/lib/python3.11/dist-packages (from gcsfs) (2.14.0)\nRequirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (2.6.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.3.2)\nRequirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (25.3.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.5.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (6.2.0)\nRequirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (0.3.1)\nRequirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.19.0)\nRequirement already satisfied: six>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from docker-pycreds>=0.4.0->wandb) (1.17.0)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.29,>=1.0.0->wandb) (4.0.12)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.2->gcsfs) (5.5.2)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.2->gcsfs) (0.4.1)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.2->gcsfs) (4.9)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (2.4.1)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6->wandb) (0.7.0)\nRequirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6->wandb) (2.33.1)\nRequirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6->wandb) (0.4.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2025.1.31)\nRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (3.18.0)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (3.1.6)\nRequirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (9.1.0.70)\nRequirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.5.8)\nRequirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (11.2.1.3)\nRequirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (10.3.5.147)\nRequirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (11.6.1.9)\nRequirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.3.1.170)\nRequirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (2.21.5)\nRequirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: triton==3.1.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (3.1.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.9->monai) (1.3.0)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib->gcsfs) (2.0.0)\nRequirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5 in /usr/local/lib/python3.11/dist-packages (from google-cloud-storage->gcsfs) (1.34.1)\nRequirement already satisfied: google-cloud-core<3.0dev,>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-storage->gcsfs) (2.4.1)\nRequirement already satisfied: google-resumable-media>=2.6.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-storage->gcsfs) (2.7.2)\nRequirement already satisfied: google-crc32c<2.0dev,>=1.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-storage->gcsfs) (1.6.0)\nRequirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb) (5.0.2)\nRequirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-storage->gcsfs) (1.67.0)\nRequirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.2->gcsfs) (0.6.1)\nRequirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.2.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.9->monai) (3.0.2)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<2.0,>=1.24->monai) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<2.0,>=1.24->monai) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy<2.0,>=1.24->monai) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy<2.0,>=1.24->monai) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy<2.0,>=1.24->monai) (2024.2.0)\n","output_type":"stream"},{"name":"stderr","text":"2025-04-23 15:48:16.204411: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1745423296.232211     270 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1745423296.240612     270 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# Test logging to ensure file is written\nlogger.info(\"Logging initialized\")\nwith open(\"/kaggle/working/training.log\", \"r\") as f:\n    print(f\"Initial log file contents: {f.read()}\", flush=True)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Initialize wandb\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nwb_token = user_secrets.get_secret(\"WANDB\")\nwandb.login(key=wb_token)\nwandb.init(\n    project=\"byu-bacterial-flagellar-motors\",\n    config={\n        \"learning_rate\": 1e-3,\n        \"epochs\": 50,\n        \"batch_size\": 4,\n        \"patch_size\": (128, 128, 128),\n        \"gaussian_sigma\": 5,\n        \"architecture\": \"3D U-Net\",\n        \"optimizer\": \"Adam\",\n        \"loss_function\": \"DiceLoss\",\n        \"beta\": 2\n    }\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fs = gcsfs.GCSFileSystem(token=\"anon\") # Initialize GCS filesystem\n\n# Define GCS path and local directory\ngcs_precomputed_path = \"gs://nb153/precomputedmasks\"\ngcs_preprocessed_path = \"gs://nb153/preprocessed\"\nlocal_dir = \"/kaggle/working/data\"\nos.makedirs(local_dir, exist_ok=True)\n\n# Device configuration\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:48:35.66323Z","iopub.execute_input":"2025-04-23T15:48:35.663941Z","iopub.status.idle":"2025-04-23T15:48:35.670367Z","shell.execute_reply.started":"2025-04-23T15:48:35.663911Z","shell.execute_reply":"2025-04-23T15:48:35.669654Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# 1. Analyze dataset to identify tomograms with motors\ndef identify_motor_tomograms(labels_df):\n    \"\"\"Identify tomograms with valid motor annotations.\"\"\"\n    motor_tomograms = []\n    for tomo_id in labels_df[\"tomo_id\"].unique():\n        tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id].iloc[0]\n        if tomo_labels[\"Number of motors\"] > 0 and tomo_labels[\"Motor axis 0\"] != -1:\n            motor_tomograms.append(tomo_id)\n    logger.info(f\"Found {len(motor_tomograms)} tomograms with motors\")\n    return motor_tomograms\n\n\n# Load labels and identify motor tomograms\nlabels_df = pd.read_csv(\"/kaggle/input/byu-locating-bacterial-flagellar-motors-2025/train_labels.csv\")\ntomo_ids = sorted(labels_df[\"tomo_id\"].unique())\nmotor_tomo_ids = identify_motor_tomograms(labels_df)  # 2. Store tomogram IDs with motors\nlogger.info(f\"Total tomograms: {len(tomo_ids)}, Motor tomograms: {len(motor_tomo_ids)}\")\n\n# Split into train/val/test (80/10/10) using only motor tomograms for training\ntrain_val_ids, test_ids = train_test_split(tomo_ids, test_size=0.1, random_state=42)\ntrain_ids, val_ids = train_test_split(train_val_ids, test_size=0.1111, random_state=42)\ntrain_ids = [tid for tid in train_ids if tid in motor_tomo_ids]  # 3. Use only motor tomograms for training\nlogger.info(f\"Train IDs: {len(train_ids)}, Val IDs: {len(val_ids)}, Test IDs: {len(test_ids)}\")\n\n# Analyze tomograms and print motor statistics\ndef analyze_tomograms(labels_df):\n    total_tomograms = len(labels_df[\"tomo_id\"].unique())\n    motor_tomograms = len(labels_df[labels_df[\"Number of motors\"] > 0])\n    non_motor_tomograms = total_tomograms - motor_tomograms\n    print(f\"Total tomograms: {total_tomograms}\", flush=True)\n    print(f\"Tomograms with motors: {motor_tomograms}\", flush=True)\n    print(f\"Tomograms without motors: {non_motor_tomograms}\", flush=True)\n    logger.info(f\"Total tomograms: {total_tomograms}\")\n    logger.info(f\"Tomograms with motors: {motor_tomograms}\")\n    logger.info(f\"Tomograms without motors: {non_motor_tomograms}\")\n    return total_tomograms, motor_tomograms, non_motor_tomograms\n\n# Plot tomogram distribution\ndef plot_tomogram_distribution(labels_df):\n    total_tomograms = len(labels_df[\"tomo_id\"].unique())\n    motor_tomograms = len(labels_df[labels_df[\"Number of motors\"] > 0])\n    non_motor_tomograms = total_tomograms - motor_tomograms\n    plt.figure(figsize=(8, 5))\n    plt.bar([\"Total\", \"With Motors\", \"Without Motors\"], [total_tomograms, motor_tomograms, non_motor_tomograms], color=[\"blue\", \"green\", \"red\"])\n    plt.title(\"Tomogram Distribution\")\n    plt.ylabel(\"Count\")\n    for i, count in enumerate([total_tomograms, motor_tomograms, non_motor_tomograms]):\n        plt.text(i, count + 0.5, str(count), ha=\"center\")\n    plt.show()\n    plt.close()\n\n# Download functions with simultaneous downloading\ndef download_npy_and_mask(tomo_id, gcs_preprocessed_path, gcs_precomputed_path, split, local_dir):\n    \"\"\"Download tomogram and mask simultaneously using threads.\"\"\"\n    def download_npy():\n        gcs_file_path = f\"{gcs_preprocessed_path}/{split}/{tomo_id}/{tomo_id}.npy\"\n        local_file_path = os.path.join(local_dir, f\"{tomo_id}.npy\")\n        if not os.path.exists(local_file_path):\n            logger.info(f\"Downloading {gcs_file_path} to {local_file_path}\")\n            fs.get(gcs_file_path, local_file_path)\n            logger.info(f\"✅ Download complete: {tomo_id}\")\n\n    def download_mask():\n        gcs_file_path = f\"{gcs_precomputed_path}/{split}/{tomo_id}_mask.npy\"\n        local_file_path = os.path.join(local_dir, f\"{tomo_id}_mask.npy\")\n        if not os.path.exists(local_file_path):\n            logger.info(f\"Downloading {gcs_file_path} to {local_file_path}\")\n            fs.get(gcs_file_path, local_file_path)\n            logger.info(f\"✅ Download complete: {tomo_id}_mask.npy\")\n\n    # Run downloads in parallel\n    t1 = threading.Thread(target=download_npy)\n    t2 = threading.Thread(target=download_mask)\n    t1.start(); t2.start()\n    t1.join(); t2.join()\n    return os.path.join(local_dir, f\"{tomo_id}.npy\"), os.path.join(local_dir, f\"{tomo_id}_mask.npy\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:48:37.414501Z","iopub.execute_input":"2025-04-23T15:48:37.414806Z","iopub.status.idle":"2025-04-23T15:48:37.685494Z","shell.execute_reply.started":"2025-04-23T15:48:37.414784Z","shell.execute_reply":"2025-04-23T15:48:37.684722Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# Sample patches\ndef sample_patches(tomo_id, volume, mask, labels_df, patch_size=(128, 128, 128), patches_per_volume=32):\n    shape = volume.shape\n    patches = []\n    mask_patches = []\n    tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id]\n    motor_coords = []\n    for _, row in tomo_labels.iterrows():\n        if row[\"Number of motors\"] > 0 and row[\"Motor axis 0\"] != -1:\n            z, y, x = int(row[\"Motor axis 0\"]), int(row[\"Motor axis 1\"]), int(row[\"Motor axis 2\"])\n            if 0 <= z < shape[0] and 0 <= y < shape[1] and 0 <= x < shape[2]:\n                motor_coords.append((z, y, x))\n    \n    for _ in range(patches_per_volume // 2):\n        if motor_coords:\n            zc, yc, xc = motor_coords[np.random.randint(len(motor_coords))]\n            z = np.clip(zc - patch_size[0]//2 + np.random.randint(-32, 32), 0, shape[0] - patch_size[0])\n            y = np.clip(yc - patch_size[1]//2 + np.random.randint(-32, 32), 0, shape[1] - patch_size[1])\n            x = np.clip(xc - patch_size[2]//2 + np.random.randint(-32, 32), 0, shape[2] - patch_size[2])\n        else:\n            z = np.random.randint(0, max(1, shape[0] - patch_size[0]))\n            y = np.random.randint(0, max(1, shape[1] - patch_size[1]))\n            x = np.random.randint(0, max(1, shape[2] - patch_size[2]))\n        patch = volume[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        mask_patch = mask[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        patches.append(patch)\n        mask_patches.append(mask_patch)\n    \n    for _ in range(patches_per_volume // 2):\n        z = np.random.randint(0, max(1, shape[0] - patch_size[0]))\n        y = np.random.randint(0, max(1, shape[1] - patch_size[1]))\n        x = np.random.randint(0, max(1, shape[2] - patch_size[2]))\n        patch = volume[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        mask_patch = mask[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        patches.append(patch)\n        mask_patches.append(mask_patch)\n    \n    return np.array(patches), np.array(mask_patches)\n\n# Patch dataset\nclass PatchDataset(Dataset):\n    def __init__(self, patches, mask_patches):\n        self.patches = patches\n        self.mask_patches = mask_patches\n    \n    def __len__(self):\n        return len(self.patches)\n    \n    def __getitem__(self, idx):\n        patch = self.patches[idx]\n        mask_patch = self.mask_patches[idx]\n        return torch.tensor(patch, dtype=torch.float32), torch.tensor(mask_patch, dtype=torch.float32)\n\n# Tomogram dataset\nclass TomogramDataset(Dataset):\n    def __init__(self, tomo_id, gcs_preprocessed_path, local_dir, mode=\"test\"):\n        self.tomo_id = tomo_id\n        self.gcs_preprocessed_path = gcs_preprocessed_path\n        self.gcs_precomputed_path = gcs_preprocessed_path.replace(\"preprocessed\", \"precomputedmasks\")\n        self.local_dir = local_dir\n        self.mode = mode\n        self.volume = None\n    \n    def load(self):\n        tomo_path, mask_path = download_npy_and_mask(\n            self.tomo_id, \n            self.gcs_preprocessed_path, \n            self.gcs_precomputed_path, \n            \"train\" if self.mode == \"val\" else self.mode, \n            self.local_dir\n        )\n        self.volume = np.load(tomo_path)\n        if os.path.exists(mask_path):\n            self.mask = np.load(mask_path)\n        print(f\"Loaded tomogram {self.tomo_id} (shape: {self.volume.shape})\", flush=True)\n        logger.info(f\"Loaded tomogram {self.tomo_id} (shape: {self.volume.shape})\")\n        if self.mask is not None:\n            print(f\"Loaded mask {self.tomo_id} (min/max: {self.mask.min()}/{self.mask.max()})\", flush=True)\n            logger.info(f\"Loaded mask {self.tomo_id} (min/max: {self.mask.min()}/{self.mask.max()})\")\n    \n    def clear(self):\n        if self.volume is not None:\n            del self.volume\n            self.volume = None\n            tomo_path = os.path.join(local_dir, f\"{self.tomo_id}.npy\")\n            if os.path.exists(tomo_path):\n                os.remove(tomo_path)\n            gc.collect()\n    \n    def __len__(self):\n        return 1\n    \n    def __getitem__(self, idx):\n        if self.volume is None:\n            self.load()\n        return torch.from_numpy(self.volume).float(), torch.from_numpy(self.mask).float() if self.mask is not None else None","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:57:58.524254Z","iopub.execute_input":"2025-04-23T15:57:58.525161Z","iopub.status.idle":"2025-04-23T15:57:58.540953Z","shell.execute_reply.started":"2025-04-23T15:57:58.525131Z","shell.execute_reply":"2025-04-23T15:57:58.540294Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Initialize model\nmodel = UNet(\n    spatial_dims=3,\n    in_channels=1,\n    out_channels=1,\n    channels=(16, 32, 64, 128, 256),\n    strides=(2, 2, 2, 2),\n    num_res_units=2,\n).to(device)\nlogger.info(f\"Model device: {next(model.parameters()).device}\")\n\n# Loss and optimizer\ncriterion = DiceLoss(sigmoid=True)\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=\"min\", factor=0.1, patience=5)\n\n# Load checkpoint if available\nstart_epoch = 0\nbest_val_loss = float(\"inf\")\ntrain_losses = []\nval_losses = []\nif os.path.exists(\"checkpoint.pth\"):\n    checkpoint = torch.load(\"checkpoint.pth\", map_location=device)\n    model.load_state_dict(checkpoint['model_state_dict'])\n    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n    scheduler.load_state_dict(checkpoint['scheduler_state_dict'])\n    best_val_loss = checkpoint['best_val_loss']\n    start_epoch = checkpoint['epoch'] + 1\n    logger.info(f\"Resumed from epoch {start_epoch}\")\nelse:\n    logger.info(\"No checkpoint found, starting from scratch.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:50:41.866424Z","iopub.execute_input":"2025-04-23T15:50:41.866752Z","iopub.status.idle":"2025-04-23T15:50:41.933883Z","shell.execute_reply.started":"2025-04-23T15:50:41.866721Z","shell.execute_reply":"2025-04-23T15:50:41.93305Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"#TRAINING FUNCTION","metadata":{}},{"cell_type":"code","source":"# Training function\n# Training function with print-based logging\ndef train_epoch(model, loader, criterion, optimizer, epoch, start_epoch, tomo_id):\n    model.train()\n    epoch_loss = 0.0\n    start = time.time()\n    for i, (inputs, targets) in enumerate(tqdm(loader, desc=f\"Training tomo {tomo_id}\", file=sys.stdout)):\n        batch_load_time = time.time() - start\n        inputs = inputs.to(device)\n        targets = targets.to(device)\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, targets)\n        loss.backward()\n        optimizer.step()\n        epoch_loss += loss.item()\n        # Print batch progress to console\n        print(f\"Epoch {epoch+1}, Tomo {tomo_id}, Batch {i+1}/{len(loader)}, Loss: {loss.item():.4f}\", flush=True)\n        # Detailed logs for first 2 batches of first epoch (to console and file)\n        if epoch == start_epoch and i < 2:\n            print(f\"Tomo {tomo_id}, Batch {i} load time: {batch_load_time:.2f}s\", flush=True)\n            print(f\"Inputs shape: {inputs.shape}, min/max: {inputs.min().item():.4f}/{inputs.max().item():.4f}\", flush=True)\n            print(f\"Targets shape: {targets.shape}, min/max: {targets.min().item():.4f}/{targets.max().item():.4f}\", flush=True)\n            print(f\"Outputs shape: {outputs.shape}, min/max: {outputs.min().item():.4f}/{outputs.max().item():.4f}\", flush=True)\n            print(f\"Loss: {loss.item():.4f}\", flush=True)\n            print(f\"GPU Memory: {torch.cuda.memory_allocated() / 1024**3:.2f} GB\", flush=True)\n            logger.info(f\"Tomo {tomo_id}, Batch {i} load time: {batch_load_time:.2f}s\")\n            logger.info(f\"Inputs shape: {inputs.shape}, min/max: {inputs.min().item():.4f}/{inputs.max().item():.4f}\")\n            logger.info(f\"Targets shape: {targets.shape}, min/max: {targets.min().item():.4f}/{targets.max().item():.4f}\")\n            logger.info(f\"Outputs shape: {outputs.shape}, min/max: {outputs.min().item():.4f}/{outputs.max().item():.4f}\")\n            logger.info(f\"Loss: {loss.item():.4f}\")\n            logger.info(f\"GPU Memory: {torch.cuda.memory_allocated() / 1024**3:.2f} GB\")\n            torch.cuda.synchronize()\n            logger.info(torch.cuda.memory_summary())\n        sys.stdout.flush()\n        start = time.time() \n    avg_loss = epoch_loss / len(loader)\n    print(f\"Epoch {epoch+1}, Tomo {tomo_id} completed, Average Loss: {avg_loss:.4f}\", flush=True)\n    sys.stdout.flush()\n    return avg_loss\n\n# Validation function (unchanged)\ndef validate(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df, criterion):\n    model.eval()\n    epoch_loss = 0.0\n    patches_per_volume = 8\n    for tomo_id in tqdm(val_ids, desc=\"Validation\"):\n        tomo_path, mask_path = download_npy_and_mask(tomo_id, gcs_preprocessed_path, gcs_precomputed_path, \"train\", local_dir)\n        volume = np.load(tomo_path)\n        mask = np.load(mask_path)\n        patches, mask_patches = sample_patches(tomo_id, volume, mask, labels_df, patches_per_volume=patches_per_volume)\n        dataset = PatchDataset(patches, mask_patches)\n        loader = DataLoader(dataset, batch_size=1, shuffle=False, num_workers=0, pin_memory=True)\n        with torch.no_grad():\n            for inputs, targets in loader:\n                inputs = inputs.to(device)\n                targets = targets.to(device)\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n                epoch_loss += loss.item()\n        del volume, mask, patches, mask_patches, dataset, loader\n        os.remove(tomo_path)\n        os.remove(mask_path)\n        gc.collect()\n    return epoch_loss / (len(val_ids) * patches_per_volume)\n\n# Clean memory after processing tomograms\ndef clean_memory(tomo_ids, local_dir):\n    \"\"\"Delete tomogram and mask files and clear GPU memory.\"\"\"\n    for tomo_id in tomo_ids:\n        tomo_path = os.path.join(local_dir, f\"{tomo_id}.npy\")\n        mask_path = os.path.join(local_dir, f\"{tomo_id}_mask.npy\")\n        for path in [tomo_path, mask_path]:\n            if os.path.exists(path):\n                os.remove(path)\n                logger.info(f\"Deleted {path}\")\n    gc.collect()\n    torch.cuda.empty_cache()\n    logger.info(\"Cleared memory and GPU cache\")\n\n# Training loop with batch processing\nnum_epochs = 50\npatience = 10\ntrigger_times = 0\npatches_per_volume_train = 64\nbatch_size = 5  # Process 3 tomograms at a time\nmetrics_log = []  # Store metrics for concise reporting\nbest_val_loss = float(\"inf\")\ntrain_losses = []\nval_losses = []\n\n# Analyze and plot tomogram distribution\ntotal_tomograms, motor_tomograms, non_motor_tomograms = analyze_tomograms(labels_df)\nplot_tomogram_distribution(labels_df)\n\n\nfor epoch in range(start_epoch, num_epochs):\n    print(f\"STARTING TRAINING - Epoch {epoch+1}/{num_epochs}\", flush=True)\n    logger.info(f\"STARTING TRAINING - Epoch {epoch+1}/{num_epochs}\")\n    sys.stdout.flush()\n    epoch_train_loss = 0.0\n    processed_tomograms = 0\n    total_train_tomograms = len(train_ids)\n\n    # Process tomograms in batches of 3\n    for batch_start in range(0, len(train_ids), batch_size):\n        batch_tomo_ids = train_ids[batch_start:batch_start + batch_size]\n        print(f\"Processing batch of tomograms: {batch_tomo_ids}\", flush=True)\n        logger.info(f\"Processing batch of tomograms: {batch_tomo_ids}\")\n        sys.stdout.flush()\n\n        # Download tomograms and masks\n        batch_data = []\n        for tomo_id in batch_tomo_ids:\n            tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id].iloc[0]\n            num_motors = tomo_labels[\"Number of motors\"]\n            print(f\"Tomogram {tomo_id} has {num_motors} motors\", flush=True)\n            logger.info(f\"Tomogram {tomo_id} has {num_motors} motors\")\n            print(f\"Downloading data for tomogram {tomo_id}\", flush=True)\n            logger.info(f\"Downloading data for tomogram {tomo_id}\")\n            tomo_path, mask_path = download_npy_and_mask(tomo_id, gcs_preprocessed_path, gcs_precomputed_path, \"train\", local_dir)\n            volume = np.load(tomo_path)\n            mask = np.load(mask_path)\n            patches, mask_patches = sample_patches(tomo_id, volume, mask, labels_df, patches_per_volume=patches_per_volume_train)\n            batch_data.append((tomo_id, patches, mask_patches))\n            del volume, mask\n            print(f\"Prepared patches for tomogram {tomo_id}\", flush=True)\n            logger.info(f\"Prepared patches for tomogram {tomo_id}\")\n            sys.stdout.flush()\n\n        # Train on batch\n        for tomo_id, patches, mask_patches in batch_data:\n            dataset = PatchDataset(patches, mask_patches)\n            loader = DataLoader(dataset, batch_size=4, shuffle=True, num_workers=0, pin_memory=True)\n            print(f\"Training on tomogram {tomo_id}\", flush=True)\n            logger.info(f\"Training on tomogram {tomo_id}\")\n            batch_loss = train_epoch(model, loader, criterion, optimizer, epoch, start_epoch, tomo_id)\n            epoch_train_loss += batch_loss\n            processed_tomograms += 1\n            print(f\"Completed training on tomogram {tomo_id}, Loss: {batch_loss:.4f}\", flush=True)\n            print(f\"Processed {processed_tomograms}/{total_train_tomograms} tomograms\", flush=True)\n            logger.info(f\"Completed training on tomogram {tomo_id}, Loss: {batch_loss:.4f}\")\n            logger.info(f\"Processed {processed_tomograms}/{total_train_tomograms} tomograms\")\n            del dataset, loader, patches, mask_patches\n            sys.stdout.flush()\n\n        # Clean up\n        print(f\"Cleaning memory for batch: {batch_tomo_ids}\", flush=True)\n        logger.info(f\"Cleaning memory for batch: {batch_tomo_ids}\")\n        clean_memory(batch_tomo_ids, local_dir)\n    \n\n    train_loss = epoch_train_loss / max(1, processed_tomograms)\n    train_losses.append(train_loss)\n\n    # Validation\n    print(\"Starting validation\", flush=True)\n    logger.info(\"Starting validation\")\n    val_loss = validate(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df, criterion)\n    val_losses.append(val_loss)\n    \n    # Log metrics\n    print(f\"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}\", flush=True)\n    logger.info(f\"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}\")\n    #wandb.log({\n    #    \"epoch\": epoch + 1,\n    #    \"train_loss\": train_loss,\n    #    \"val_loss\": val_loss,\n    #    \"learning_rate\": optimizer.param_groups[0][\"lr\"]\n    #})\n    metrics_log.append({\n        \"epoch\": epoch + 1,\n        \"train_loss\": train_loss,\n        \"val_loss\": val_loss\n    })\n    \n    # Save metrics to file\n    pd.DataFrame(metrics_log).to_csv(\"training_metrics.csv\", index=False)\n    sys.stdout.flush()\n\n    scheduler.step(val_loss)   # Learning rate scheduling\n\n    # GPU diagnostics every 10 epochs\n    if (epoch + 1) % 10 == 0:\n        torch.cuda.synchronize()\n        print(f\"GPU Memory after Epoch {epoch+1}:\\n{torch.cuda.memory_summary()}\", flush=True)\n        logger.info(f\"GPU Memory after Epoch {epoch+1}:\\n{torch.cuda.memory_summary()}\")\n        os.system(\"nvidia-smi\")\n        sys.stdout.flush()\n\n    \n    # Checkpointing and Early stopping\n    if val_loss < best_val_loss:\n        best_val_loss = val_loss\n        trigger_times = 0\n        torch.save({               # Save full training state \n            'epoch': epoch,\n            'model_state_dict': model.state_dict(),\n            'optimizer_state_dict': optimizer.state_dict(),\n            'scheduler_state_dict': scheduler.state_dict(),\n            'best_val_loss': best_val_loss\n        }, \"checkpoint.pth\")\n        torch.save(model.state_dict(), \"best_model.pth\") #Save model weights for inference / tuning \n        print(\"Saved checkpoint and best model\", flush=True)\n        logger.info(\"Saved checkpoint and best model\")\n        # Log the best model to wandb - Uncomment the below. \n        #artifact = wandb.Artifact(\"best_model\", type=\"model\")\n        #artifact.add_file(\"best_model.pth\")\n        #wandb.log_artifact(artifact)\n    else:\n        trigger_times += 1\n        if trigger_times >= patience:\n            print(\"Early stopping triggered!\", flush=True)\n            logger.info(\"Early stopping triggered!\")\n            break\n\n# Plot losses\nplt.figure(figsize=(10, 5))\nplt.plot(train_losses, label=\"Training Loss\")\nplt.plot(val_losses, label=\"Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training and Validation Loss Over Epochs\")\nplt.legend()\nplt.grid(True)\nplt.savefig(\"loss_plot.png\")\nplt.close()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:50:44.205621Z","iopub.execute_input":"2025-04-23T15:50:44.205909Z","iopub.status.idle":"2025-04-23T15:53:43.149754Z","shell.execute_reply.started":"2025-04-23T15:50:44.205889Z","shell.execute_reply":"2025-04-23T15:53:43.148262Z"}},"outputs":[{"name":"stdout","text":"Total tomograms: 648\nTomograms with motors: 451\nTomograms without motors: 197\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"STARTING TRAINING - Epoch 1/50\nProcessing batch of tomograms: ['tomo_3c6038', 'tomo_369cce', 'tomo_cff77a', 'tomo_60d478', 'tomo_1c38fd']\nTomogram tomo_3c6038 has 1 motors\nDownloading data for tomogram tomo_3c6038\nPrepared patches for tomogram tomo_3c6038\nTomogram tomo_369cce has 1 motors\nDownloading data for tomogram tomo_369cce\nPrepared patches for tomogram tomo_369cce\nTomogram tomo_cff77a has 1 motors\nDownloading data for tomogram tomo_cff77a\nPrepared patches for tomogram tomo_cff77a\nTomogram tomo_60d478 has 1 motors\nDownloading data for tomogram tomo_60d478\nPrepared patches for tomogram tomo_60d478\nTomogram tomo_1c38fd has 1 motors\nDownloading data for tomogram tomo_1c38fd\nPrepared patches for tomogram tomo_1c38fd\nTraining on tomogram tomo_3c6038\nTraining tomo tomo_3c6038:   0%|          | 0/16 [00:00<?, ?it/s]Epoch 1, Tomo tomo_3c6038, Batch 1/16, Loss: 0.9990\nTomo tomo_3c6038, Batch 0 load time: 0.13s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.5260/10.5317\nLoss: 0.9990\nGPU Memory: 0.17 GB\nTraining tomo tomo_3c6038:   6%|▋         | 1/16 [00:00<00:13,  1.11it/s]Epoch 1, Tomo tomo_3c6038, Batch 2/16, Loss: 0.9986\nTomo tomo_3c6038, Batch 1 load time: 0.11s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.8459/17.9829\nLoss: 0.9986\nGPU Memory: 0.17 GB\nTraining tomo tomo_3c6038:  12%|█▎        | 2/16 [00:01<00:08,  1.75it/s]Epoch 1, Tomo tomo_3c6038, Batch 3/16, Loss: 0.9985\nTraining tomo tomo_3c6038:  19%|█▉        | 3/16 [00:01<00:05,  2.25it/s]Epoch 1, Tomo tomo_3c6038, Batch 4/16, Loss: 0.9988\nTraining tomo tomo_3c6038:  25%|██▌       | 4/16 [00:01<00:04,  2.66it/s]Epoch 1, Tomo tomo_3c6038, Batch 5/16, Loss: 0.9994\nTraining tomo tomo_3c6038:  31%|███▏      | 5/16 [00:02<00:03,  2.93it/s]Epoch 1, Tomo tomo_3c6038, Batch 6/16, Loss: 0.9983\nTraining tomo tomo_3c6038:  38%|███▊      | 6/16 [00:02<00:03,  3.13it/s]Epoch 1, Tomo tomo_3c6038, Batch 7/16, Loss: 1.0000\nTraining tomo tomo_3c6038:  44%|████▍     | 7/16 [00:02<00:02,  3.23it/s]Epoch 1, Tomo tomo_3c6038, Batch 8/16, Loss: 0.9994\nTraining tomo tomo_3c6038:  50%|█████     | 8/16 [00:02<00:02,  3.32it/s]Epoch 1, Tomo tomo_3c6038, Batch 9/16, Loss: 0.9994\nTraining tomo tomo_3c6038:  56%|█████▋    | 9/16 [00:03<00:02,  3.40it/s]Epoch 1, Tomo tomo_3c6038, Batch 10/16, Loss: 0.9993\nTraining tomo tomo_3c6038:  62%|██████▎   | 10/16 [00:03<00:01,  3.47it/s]Epoch 1, Tomo tomo_3c6038, Batch 11/16, Loss: 0.9986\nTraining tomo tomo_3c6038:  69%|██████▉   | 11/16 [00:03<00:01,  3.53it/s]Epoch 1, Tomo tomo_3c6038, Batch 12/16, Loss: 0.9979\nTraining tomo tomo_3c6038:  75%|███████▌  | 12/16 [00:04<00:01,  3.57it/s]Epoch 1, Tomo tomo_3c6038, Batch 13/16, Loss: 0.9985\nTraining tomo tomo_3c6038:  81%|████████▏ | 13/16 [00:04<00:00,  3.55it/s]Epoch 1, Tomo tomo_3c6038, Batch 14/16, Loss: 0.9992\nTraining tomo tomo_3c6038:  88%|████████▊ | 14/16 [00:04<00:00,  3.59it/s]Epoch 1, Tomo tomo_3c6038, Batch 15/16, Loss: 0.9969\nTraining tomo tomo_3c6038:  94%|█████████▍| 15/16 [00:04<00:00,  3.63it/s]Epoch 1, Tomo tomo_3c6038, Batch 16/16, Loss: 0.9976\nTraining tomo tomo_3c6038: 100%|██████████| 16/16 [00:05<00:00,  3.11it/s]\nEpoch 1, Tomo tomo_3c6038 completed, Average Loss: 0.9987\nCompleted training on tomogram tomo_3c6038, Loss: 0.9987\nProcessed 1/287 tomograms\nTraining on tomogram tomo_369cce\nTraining tomo tomo_369cce:   0%|          | 0/16 [00:00<?, ?it/s]Epoch 1, Tomo tomo_369cce, Batch 1/16, Loss: 0.9989\nTomo tomo_369cce, Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.4427/12.4883\nLoss: 0.9989\nGPU Memory: 0.17 GB\nTraining tomo tomo_369cce:   6%|▋         | 1/16 [00:00<00:04,  3.62it/s]Epoch 1, Tomo tomo_369cce, Batch 2/16, Loss: 0.9987\nTomo tomo_369cce, Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.2119/17.3417\nLoss: 0.9987\nGPU Memory: 0.17 GB\nTraining tomo tomo_369cce:  12%|█▎        | 2/16 [00:00<00:03,  3.62it/s]Epoch 1, Tomo tomo_369cce, Batch 3/16, Loss: 0.9992\nTraining tomo tomo_369cce:  19%|█▉        | 3/16 [00:00<00:03,  3.61it/s]Epoch 1, Tomo tomo_369cce, Batch 4/16, Loss: 0.9987\nTraining tomo tomo_369cce:  25%|██▌       | 4/16 [00:01<00:03,  3.66it/s]Epoch 1, Tomo tomo_369cce, Batch 5/16, Loss: 0.9986\nTraining tomo tomo_369cce:  31%|███▏      | 5/16 [00:01<00:03,  3.66it/s]Epoch 1, Tomo tomo_369cce, Batch 6/16, Loss: 0.9978\nTraining tomo tomo_369cce:  38%|███▊      | 6/16 [00:01<00:02,  3.64it/s]Epoch 1, Tomo tomo_369cce, Batch 7/16, Loss: 0.9984\nTraining tomo tomo_369cce:  44%|████▍     | 7/16 [00:01<00:02,  3.60it/s]Epoch 1, Tomo tomo_369cce, Batch 8/16, Loss: 0.9992\nTraining tomo tomo_369cce:  50%|█████     | 8/16 [00:02<00:02,  3.60it/s]Epoch 1, Tomo tomo_369cce, Batch 9/16, Loss: 0.9976\nTraining tomo tomo_369cce:  56%|█████▋    | 9/16 [00:02<00:01,  3.62it/s]Epoch 1, Tomo tomo_369cce, Batch 10/16, Loss: 0.9976\nTraining tomo tomo_369cce:  62%|██████▎   | 10/16 [00:02<00:01,  3.65it/s]Epoch 1, Tomo tomo_369cce, Batch 11/16, Loss: 0.9984\nTraining tomo tomo_369cce:  69%|██████▉   | 11/16 [00:03<00:01,  3.67it/s]Epoch 1, Tomo tomo_369cce, Batch 12/16, Loss: 0.9992\nTraining tomo tomo_369cce:  75%|███████▌  | 12/16 [00:03<00:01,  3.65it/s]Epoch 1, Tomo tomo_369cce, Batch 13/16, Loss: 0.9984\nTraining tomo tomo_369cce:  81%|████████▏ | 13/16 [00:03<00:00,  3.67it/s]Epoch 1, Tomo tomo_369cce, Batch 14/16, Loss: 1.0000\nTraining tomo tomo_369cce:  88%|████████▊ | 14/16 [00:03<00:00,  3.68it/s]Epoch 1, Tomo tomo_369cce, Batch 15/16, Loss: 0.9967\nTraining tomo tomo_369cce:  94%|█████████▍| 15/16 [00:04<00:00,  3.63it/s]Epoch 1, Tomo tomo_369cce, Batch 16/16, Loss: 0.9975\nTraining tomo tomo_369cce: 100%|██████████| 16/16 [00:04<00:00,  3.64it/s]\nEpoch 1, Tomo tomo_369cce completed, Average Loss: 0.9984\nCompleted training on tomogram tomo_369cce, Loss: 0.9984\nProcessed 2/287 tomograms\nTraining on tomogram tomo_cff77a\nTraining tomo tomo_cff77a:   0%|          | 0/16 [00:00<?, ?it/s]Epoch 1, Tomo tomo_cff77a, Batch 1/16, Loss: 0.9986\nTomo tomo_cff77a, Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.3953/16.4390\nLoss: 0.9986\nGPU Memory: 0.17 GB\nTraining tomo tomo_cff77a:   6%|▋         | 1/16 [00:00<00:04,  3.49it/s]Epoch 1, Tomo tomo_cff77a, Batch 2/16, Loss: 0.9986\nTomo tomo_cff77a, Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.1921/13.1406\nLoss: 0.9986\nGPU Memory: 0.17 GB\nTraining tomo tomo_cff77a:  12%|█▎        | 2/16 [00:00<00:03,  3.56it/s]Epoch 1, Tomo tomo_cff77a, Batch 3/16, Loss: 0.9992\nTraining tomo tomo_cff77a:  19%|█▉        | 3/16 [00:00<00:03,  3.58it/s]Epoch 1, Tomo tomo_cff77a, Batch 4/16, Loss: 0.9977\nTraining tomo tomo_cff77a:  25%|██▌       | 4/16 [00:01<00:03,  3.61it/s]Epoch 1, Tomo tomo_cff77a, Batch 5/16, Loss: 0.9983\nTraining tomo tomo_cff77a:  31%|███▏      | 5/16 [00:01<00:03,  3.61it/s]Epoch 1, Tomo tomo_cff77a, Batch 6/16, Loss: 0.9991\nTraining tomo tomo_cff77a:  38%|███▊      | 6/16 [00:01<00:02,  3.62it/s]Epoch 1, Tomo tomo_cff77a, Batch 7/16, Loss: 0.9991\nTraining tomo tomo_cff77a:  44%|████▍     | 7/16 [00:01<00:02,  3.65it/s]Epoch 1, Tomo tomo_cff77a, Batch 8/16, Loss: 0.9983\nTraining tomo tomo_cff77a:  50%|█████     | 8/16 [00:02<00:02,  3.67it/s]Epoch 1, Tomo tomo_cff77a, Batch 9/16, Loss: 0.9982\nTraining tomo tomo_cff77a:  56%|█████▋    | 9/16 [00:02<00:01,  3.67it/s]Epoch 1, Tomo tomo_cff77a, Batch 10/16, Loss: 0.9982\nTraining tomo tomo_cff77a:  62%|██████▎   | 10/16 [00:02<00:01,  3.66it/s]Epoch 1, Tomo tomo_cff77a, Batch 11/16, Loss: 0.9991\nTraining tomo tomo_cff77a:  69%|██████▉   | 11/16 [00:03<00:01,  3.67it/s]Epoch 1, Tomo tomo_cff77a, Batch 12/16, Loss: 0.9972\nTraining tomo tomo_cff77a:  75%|███████▌  | 12/16 [00:03<00:01,  3.65it/s]Epoch 1, Tomo tomo_cff77a, Batch 13/16, Loss: 0.9981\nTraining tomo tomo_cff77a:  81%|████████▏ | 13/16 [00:03<00:00,  3.65it/s]Epoch 1, Tomo tomo_cff77a, Batch 14/16, Loss: 0.9972\nTraining tomo tomo_cff77a:  88%|████████▊ | 14/16 [00:03<00:00,  3.67it/s]Epoch 1, Tomo tomo_cff77a, Batch 15/16, Loss: 0.9972\nTraining tomo tomo_cff77a:  94%|█████████▍| 15/16 [00:04<00:00,  3.69it/s]Epoch 1, Tomo tomo_cff77a, Batch 16/16, Loss: 0.9981\nTraining tomo tomo_cff77a: 100%|██████████| 16/16 [00:04<00:00,  3.64it/s]\nEpoch 1, Tomo tomo_cff77a completed, Average Loss: 0.9983\nCompleted training on tomogram tomo_cff77a, Loss: 0.9983\nProcessed 3/287 tomograms\nTraining on tomogram tomo_60d478\nTraining tomo tomo_60d478:   0%|          | 0/16 [00:00<?, ?it/s]Epoch 1, Tomo tomo_60d478, Batch 1/16, Loss: 1.0000\nTomo tomo_60d478, Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.1451/18.4368\nLoss: 1.0000\nGPU Memory: 0.17 GB\nTraining tomo tomo_60d478:   6%|▋         | 1/16 [00:00<00:04,  3.60it/s]Epoch 1, Tomo tomo_60d478, Batch 2/16, Loss: 0.9987\nTomo tomo_60d478, Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.0467/23.7520\nLoss: 0.9987\nGPU Memory: 0.17 GB\nTraining tomo tomo_60d478:  12%|█▎        | 2/16 [00:00<00:03,  3.55it/s]Epoch 1, Tomo tomo_60d478, Batch 3/16, Loss: 0.9989\nTraining tomo tomo_60d478:  19%|█▉        | 3/16 [00:00<00:03,  3.58it/s]Epoch 1, Tomo tomo_60d478, Batch 4/16, Loss: 0.9985\nTraining tomo tomo_60d478:  25%|██▌       | 4/16 [00:01<00:03,  3.51it/s]Epoch 1, Tomo tomo_60d478, Batch 5/16, Loss: 0.9975\nTraining tomo tomo_60d478:  31%|███▏      | 5/16 [00:01<00:03,  3.40it/s]Epoch 1, Tomo tomo_60d478, Batch 6/16, Loss: 0.9982\nTraining tomo tomo_60d478:  38%|███▊      | 6/16 [00:01<00:02,  3.45it/s]Epoch 1, Tomo tomo_60d478, Batch 7/16, Loss: 0.9982\nTraining tomo tomo_60d478:  44%|████▍     | 7/16 [00:02<00:02,  3.50it/s]Epoch 1, Tomo tomo_60d478, Batch 8/16, Loss: 0.9982\nTraining tomo tomo_60d478:  50%|█████     | 8/16 [00:02<00:02,  3.48it/s]Epoch 1, Tomo tomo_60d478, Batch 9/16, Loss: 0.9973\nTraining tomo tomo_60d478:  56%|█████▋    | 9/16 [00:02<00:01,  3.51it/s]Epoch 1, Tomo tomo_60d478, Batch 10/16, Loss: 0.9982\nTraining tomo tomo_60d478:  62%|██████▎   | 10/16 [00:02<00:01,  3.58it/s]Epoch 1, Tomo tomo_60d478, Batch 11/16, Loss: 0.9982\nTraining tomo tomo_60d478:  69%|██████▉   | 11/16 [00:03<00:01,  3.57it/s]Epoch 1, Tomo tomo_60d478, Batch 12/16, Loss: 0.9963\nTraining tomo tomo_60d478:  75%|███████▌  | 12/16 [00:03<00:01,  3.60it/s]Epoch 1, Tomo tomo_60d478, Batch 13/16, Loss: 0.9991\nTraining tomo tomo_60d478:  81%|████████▏ | 13/16 [00:03<00:00,  3.62it/s]Epoch 1, Tomo tomo_60d478, Batch 14/16, Loss: 0.9972\nTraining tomo tomo_60d478:  88%|████████▊ | 14/16 [00:03<00:00,  3.60it/s]Epoch 1, Tomo tomo_60d478, Batch 15/16, Loss: 0.9990\nTraining tomo tomo_60d478:  94%|█████████▍| 15/16 [00:04<00:00,  3.57it/s]Epoch 1, Tomo tomo_60d478, Batch 16/16, Loss: 1.0000\nTraining tomo tomo_60d478: 100%|██████████| 16/16 [00:04<00:00,  3.55it/s]\nEpoch 1, Tomo tomo_60d478 completed, Average Loss: 0.9983\nCompleted training on tomogram tomo_60d478, Loss: 0.9983\nProcessed 4/287 tomograms\nTraining on tomogram tomo_1c38fd\nTraining tomo tomo_1c38fd:   0%|          | 0/16 [00:00<?, ?it/s]Epoch 1, Tomo tomo_1c38fd, Batch 1/16, Loss: 0.9991\nTomo tomo_1c38fd, Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.2808/22.2953\nLoss: 0.9991\nGPU Memory: 0.17 GB\nTraining tomo tomo_1c38fd:   6%|▋         | 1/16 [00:00<00:04,  3.63it/s]Epoch 1, Tomo tomo_1c38fd, Batch 2/16, Loss: 0.9981\nTomo tomo_1c38fd, Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -0.9661/15.2895\nLoss: 0.9981\nGPU Memory: 0.17 GB\nTraining tomo tomo_1c38fd:  12%|█▎        | 2/16 [00:00<00:03,  3.60it/s]Epoch 1, Tomo tomo_1c38fd, Batch 3/16, Loss: 0.9971\nTraining tomo tomo_1c38fd:  19%|█▉        | 3/16 [00:00<00:03,  3.63it/s]Epoch 1, Tomo tomo_1c38fd, Batch 4/16, Loss: 0.9971\nTraining tomo tomo_1c38fd:  25%|██▌       | 4/16 [00:01<00:03,  3.65it/s]Epoch 1, Tomo tomo_1c38fd, Batch 5/16, Loss: 0.9990\nTraining tomo tomo_1c38fd:  31%|███▏      | 5/16 [00:01<00:03,  3.63it/s]Epoch 1, Tomo tomo_1c38fd, Batch 6/16, Loss: 0.9972\nTraining tomo tomo_1c38fd:  38%|███▊      | 6/16 [00:01<00:02,  3.65it/s]Epoch 1, Tomo tomo_1c38fd, Batch 7/16, Loss: 0.9981\nTraining tomo tomo_1c38fd:  44%|████▍     | 7/16 [00:01<00:02,  3.61it/s]Epoch 1, Tomo tomo_1c38fd, Batch 8/16, Loss: 0.9990\nTraining tomo tomo_1c38fd:  50%|█████     | 8/16 [00:02<00:02,  3.61it/s]Epoch 1, Tomo tomo_1c38fd, Batch 9/16, Loss: 0.9981\nTraining tomo tomo_1c38fd:  56%|█████▋    | 9/16 [00:02<00:01,  3.58it/s]Epoch 1, Tomo tomo_1c38fd, Batch 10/16, Loss: 0.9990\nTraining tomo tomo_1c38fd:  62%|██████▎   | 10/16 [00:02<00:01,  3.60it/s]Epoch 1, Tomo tomo_1c38fd, Batch 11/16, Loss: 0.9990\nTraining tomo tomo_1c38fd:  69%|██████▉   | 11/16 [00:03<00:01,  3.63it/s]Epoch 1, Tomo tomo_1c38fd, Batch 12/16, Loss: 0.9971\nTraining tomo tomo_1c38fd:  75%|███████▌  | 12/16 [00:03<00:01,  3.66it/s]Epoch 1, Tomo tomo_1c38fd, Batch 13/16, Loss: 0.9981\nTraining tomo tomo_1c38fd:  81%|████████▏ | 13/16 [00:03<00:00,  3.63it/s]Epoch 1, Tomo tomo_1c38fd, Batch 14/16, Loss: 0.9981\nTraining tomo tomo_1c38fd:  88%|████████▊ | 14/16 [00:03<00:00,  3.65it/s]Epoch 1, Tomo tomo_1c38fd, Batch 15/16, Loss: 0.9971\nTraining tomo tomo_1c38fd:  94%|█████████▍| 15/16 [00:04<00:00,  3.63it/s]Epoch 1, Tomo tomo_1c38fd, Batch 16/16, Loss: 0.9980\nTraining tomo tomo_1c38fd: 100%|██████████| 16/16 [00:04<00:00,  3.63it/s]\nEpoch 1, Tomo tomo_1c38fd completed, Average Loss: 0.9981\nCompleted training on tomogram tomo_1c38fd, Loss: 0.9981\nProcessed 5/287 tomograms\nCleaning memory for batch: ['tomo_3c6038', 'tomo_369cce', 'tomo_cff77a', 'tomo_60d478', 'tomo_1c38fd']\nProcessing batch of tomograms: ['tomo_98d455', 'tomo_4e38b8', 'tomo_b7d014', 'tomo_e57baf', 'tomo_4f379f']\nTomogram tomo_98d455 has 1 motors\nDownloading data for tomogram tomo_98d455\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_270/1205367718.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Downloading data for tomogram {tomo_id}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflush\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Downloading data for tomogram {tomo_id}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m             \u001b[0mtomo_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdownload_npy_and_mask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtomo_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgcs_preprocessed_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgcs_precomputed_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"train\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m             \u001b[0mvolume\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtomo_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m             \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmask_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_270/1434929334.py\u001b[0m in \u001b[0;36mdownload_npy_and_mask\u001b[0;34m(tomo_id, gcs_preprocessed_path, gcs_precomputed_path, split, local_dir)\u001b[0m\n\u001b[1;32m     73\u001b[0m     \u001b[0mt2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mthreading\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mThread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdownload_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0mt1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mt2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m     \u001b[0mt1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mt2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocal_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"{tomo_id}.npy\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocal_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"{tomo_id}_mask.npy\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/threading.py\u001b[0m in \u001b[0;36mjoin\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1118\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1119\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wait_for_tstate_lock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1120\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1121\u001b[0m             \u001b[0;31m# the behavior of a negative timeout isn't documented, but\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/threading.py\u001b[0m in \u001b[0;36m_wait_for_tstate_lock\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m   1137\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1138\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1139\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mlock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1140\u001b[0m                 \u001b[0mlock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelease\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1141\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":9},{"cell_type":"code","source":"# 1 Hyperparameter Tuning (Peak Detection Threshold)\n# 2 Predict on the validation set,\n# 3 Extract motor locations using peak detection\n# 4 Tune the threshold to maximize the Fβ-score (β=2).\n# 5 Using competition's metric\n\n# Metric implementation (from provided notebook)\ndef distance_metric(solution, submission, thresh_ratio, min_radius):\n    coordinate_cols = ['Motor axis 0', 'Motor axis 1', 'Motor axis 2']\n    label_tensor = solution[coordinate_cols].values.reshape(len(solution), -1, len(coordinate_cols))\n    predicted_tensor = submission[coordinate_cols].values.reshape(len(submission), -1, len(coordinate_cols))\n    solution['distance'] = np.linalg.norm(label_tensor - predicted_tensor, axis=2).min(axis=1)\n    solution['thresholds'] = solution['Voxel spacing'].apply(lambda x: (min_radius * thresh_ratio) / x)\n    solution['predictions'] = submission['Has motor'].values\n    solution.loc[(solution['distance'] > solution['thresholds']) & (solution['Has motor'] == 1) & (submission['Has motor'] == 1), 'predictions'] = 0\n    return solution['predictions'].values\n\ndef score(solution, submission, min_radius, beta):\n    solution = solution.sort_values('tomo_id').reset_index(drop=True)\n    submission = submission.sort_values('tomo_id').reset_index(drop=True)\n    if not solution['tomo_id'].eq(submission['tomo_id']).all():\n        raise ValueError('Submitted tomo_id values do not match')\n    submission['Has motor'] = 1\n    select = (submission[['Motor axis 0', 'Motor axis 1', 'Motor axis 2']] == -1).any(axis='columns')\n    submission.loc[select, 'Has motor'] = 0\n    predictions = distance_metric(solution, submission, thresh_ratio=1.0, min_radius=min_radius)\n    return sklearn.metrics.fbeta_score(solution['Has motor'].values, predictions, beta=beta)\n\n# Predict on full volume with sliding window\ndef predict_full_volume(model, volume, patch_size=(128, 128, 128), stride=64):\n    model.eval()\n    volume = volume.to(device)\n    z_size, y_size, x_size = volume.shape[2:]\n    pz, py, px = patch_size\n    output = torch.zeros_like(volume)\n    counts = torch.zeros_like(volume)\n    \n    with torch.no_grad():\n        for z in range(0, z_size, stride):\n            for y in range(0, y_size, stride):\n                for x in range(0, x_size, stride):\n                    z_end, y_end, x_end = z+pz, y+py, x+px\n                    patch = volume[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)]\n                    pad_z, pad_y, pad_x = max(0, z_end-z_size), max(0, y_end-y_size), max(0, x_end-x_size)\n                    if pad_z > 0 or pad_y > 0 or pad_x > 0:\n                        patch = torch.nn.functional.pad(patch, (0, pad_x, 0, pad_y, 0, pad_z))\n                    out_patch = torch.sigmoid(model(patch))\n                    output[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)] += out_patch[:, :, :pz-pad_z, :py-pad_y, :px-pad_x]\n                    counts[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)] += 1\n    output = output / (counts + 1e-8)\n    return output.cpu().numpy()\n\n# Extract motor location from predicted mask\ndef extract_motor_location(mask, threshold):\n    mask = mask.squeeze()\n    if mask.max() < threshold:\n        return -1, -1, -1, 0  # No motor\n    # Find the strongest peak\n    z, y, x = np.unravel_index(np.argmax(mask), mask.shape)\n    # Refine with center of mass for sub-voxel accuracy\n    region = mask[max(0, z-5):z+6, max(0, y-5):y+6, max(0, x-5):x+6]\n    if region.size == 0:\n        return z, y, x, 1\n    z_offset, y_offset, x_offset = center_of_mass(region)\n    z, y, x = z + z_offset - 5, y + y_offset - 5, x + x_offset - 5\n    return z, y, x, 1\n\n# Tune peak detection threshold\ndef tune_threshold(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df, thresholds=np.linspace(0.1, 0.9, 9)):\n    best_model_path = \"/kaggle/working/best_model.pth\"\n    if os.path.exists(best_model_path):\n        model.load_state_dict(torch.load(best_model_path, weights_only=True))\n        print(\"Loaded best_model.pth\", flush=True)\n        logger.info(\"Loaded best_model.pth\")\n    else:\n        print(\"Warning: best_model.pth not found, using current model state\", flush=True)\n        logger.warning(\"best_model.pth not found, using current model state\")\n    model.eval()\n    best_threshold = 0.5\n    best_fbeta = 0.0\n    # Store thresholds and Fβ Scrores \n    thresholds_list = []\n    fbeta_scores = []\n    \n    for threshold in thresholds:\n        predictions = []\n        for tomo_id in tqdm(val_ids, desc=f\"Tuning threshold {threshold:.2f}\"):\n            dataset = TomogramDataset(tomo_id, gcs_preprocessed_path, local_dir, mode=\"val\")  # Fixed typo\n            dataset.load()\n            volume, _ = dataset[0]\n            pred_mask = predict_full_volume(model, volume)\n            z, y, x, has_motor = extract_motor_location(pred_mask, threshold)\n            \n            # Visualize prediction for the first tomogram\n            if len(predictions) == 0 and tomo_id == val_ids[0]:\n                mask_path = os.path.join(local_dir, f\"{tomo_id}_mask.npy\")\n                if not os.path.exists(mask_path):\n                    _, mask_path = download_npy_and_mask(tomo_id, gcs_preprocessed_path, gcs_precomputed_path, \"train\", local_dir)\n                gt_mask = np.load(mask_path)\n                slice_idx = volume.shape[2] // 2\n                tomo_slice = volume[0, 0, slice_idx, :, :].numpy()\n                pred_slice = pred_mask[0, 0, slice_idx, :, :]\n                gt_slice = gt_mask[slice_idx, :, :]\n                gt_row = labels_df[labels_df[\"tomo_id\"] == tomo_id].iloc[0]\n                gt_z, gt_y, gt_x = gt_row[\"Motor axis 0\"], gt_row[\"Motor axis 1\"], gt_row[\"Motor axis 2\"]\n\n                plt.figure(figsize=(15, 5))\n                plt.subplot(1, 3, 1)\n                plt.imshow(tomo_slice, cmap=\"gray\")\n                plt.title(f\"Tomogram Slice (z={slice_idx})\")\n                plt.axis(\"off\")\n                plt.subplot(1, 3, 2)\n                plt.imshow(pred_slice, cmap=\"hot\")\n                if has_motor:\n                    plt.scatter(pred_x, pred_y, c=\"blue\", marker=\"x\", s=100, label=\"Predicted\")\n                if gt_z != -1:\n                    plt.scatter(gt_x, gt_y, c=\"green\", marker=\"o\", s=100, label=\"Ground Truth\")\n                plt.title(\"Predicted Mask with Motor Locations\")\n                plt.legend()\n                plt.axis(\"off\")\n                plt.subplot(1, 3, 3)\n                plt.imshow(gt_slice, cmap=\"hot\")\n                if gt_z != -1:\n                    plt.scatter(gt_x, gt_y, c=\"green\", marker=\"o\", s=100, label=\"Ground Truth\")\n                plt.title(\"Ground Truth Mask\")\n                plt.legend()\n                plt.axis(\"off\")\n                plt.tight_layout()\n                plt.show()\n                os.remove(mask_path)  # Clean up\n                break  # Visualize only one tomogram\n            predictions.append({\"tomo_id\": tomo_id, \"Motor axis 0\": z, \"Motor axis 1\": y, \"Motor axis 2\": x, \"Has motor\": has_motor})\n            dataset.clear()\n        \n        # Create submission DataFrame\n        submission_df = pd.DataFrame(predictions)\n        # Create solution DataFrame\n        solution_data = []\n        for tomo_id in val_ids:\n            tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id].iloc[0]\n            solution_data.append({\n                \"tomo_id\": tomo_id,\n                \"Motor axis 0\": tomo_labels[\"Motor axis 0\"],\n                \"Motor axis 1\": tomo_labels[\"Motor axis 1\"],\n                \"Motor axis 2\": tomo_labels[\"Motor axis 2\"],\n                \"Voxel spacing\": tomo_labels[\"Voxel spacing\"],\n                \"Has motor\": 1 if tomo_labels[\"Number of motors\"] > 0 else 0\n            })\n        solution_df = pd.DataFrame(solution_data)\n        fbeta = score(solution_df, submission_df, min_radius=1000, beta=2) # Compute Fβ-score\n        print(f\"Threshold {threshold:.2f}, Fβ-score: {fbeta:.4f}\", flush=True)\n        logger.info(f\"Threshold {threshold:.2f}, Fβ-score: {fbeta:.4f}\")\n        thresholds_list.append(threshold)  # Append for plotting \n        fbeta_scores.append(fbeta)\n        # WANDB Log Fβ-score for this threshold\n        #wandb.log({\"threshold\": threshold,\"fbeta_score\": fbeta})\n        \n        if fbeta > best_fbeta:\n            best_fbeta = fbeta\n            best_threshold = threshold\n\n    plt.figure(figsize=(8, 5))\n    plt.plot(thresholds_list, fbeta_scores, marker=\"o\")\n    plt.xlabel(\"Threshold\")\n    plt.ylabel(\"Fβ-score (β=2)\")\n    plt.title(\"Fβ-score vs. Peak Detection Threshold\")\n    plt.grid(True)\n    plt.show()\n    plt.close()\n    print(f\"Best threshold: {best_threshold:.2f}, Best Fβ-score: {best_fbeta:.4f}\", flush=True)\n    logger.info(f\"Best threshold: {best_threshold:.2f}, Best Fβ-score: {best_fbeta:.4f}\")\n    #wandb.log({\"best_threshold\": best_threshold, \"best_fbeta_score\": best_fbeta})\n    return best_threshold","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:53:53.179248Z","iopub.execute_input":"2025-04-23T15:53:53.179791Z","iopub.status.idle":"2025-04-23T15:53:53.204335Z","shell.execute_reply.started":"2025-04-23T15:53:53.179769Z","shell.execute_reply":"2025-04-23T15:53:53.203277Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# Test prediction\ndef predict_test(model, test_ids, gcs_preprocessed_path, local_dir, threshold):\n    model.load_state_dict(torch.load(\"best_model.pth\"))\n    model.eval()\n    predictions = []\n    for tomo_id in tqdm(test_ids, desc=\"Predicting on test set\"):\n        dataset = TomogramDataset(tomo_id, gcs_preprocessed_path, local_dir, mode=\"test\")\n        dataset.load()\n        volume, _ = dataset[0]\n        pred_mask = predict_full_volume(model, volume)\n        z, y, x, has_motor = extract_motor_location(pred_mask, threshold)\n        predictions.append({\"tomo_id\": tomo_id, \"Motor axis 0\": z, \"Motor axis 1\": y, \"Motor axis 2\": x})\n        dataset.clear()\n    return pd.DataFrame(predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:53:56.60014Z","iopub.execute_input":"2025-04-23T15:53:56.600829Z","iopub.status.idle":"2025-04-23T15:53:56.609594Z","shell.execute_reply.started":"2025-04-23T15:53:56.600793Z","shell.execute_reply":"2025-04-23T15:53:56.60889Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Run pipeline\nprint(\"Starting hyperparameter tuning...\")\nlogger.info(\"Starting hyperparameter tuning...\")\nbest_threshold = tune_threshold(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df)\nprint(\"Generating test predictions...\")\nlogger.info(\"Generating test predictions...\")\nsubmission_df = predict_test(model, test_ids, gcs_preprocessed_path, local_dir, best_threshold)\nsubmission_df.to_csv(\"submission.csv\", index=False)\nprint(\"Submission file created: submission.csv\")\nlogger.info(\"Submission file created: submission.csv\")\n# Finish the wandb run\n#wandb.finish()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:58:07.054805Z","iopub.execute_input":"2025-04-23T15:58:07.055117Z","iopub.status.idle":"2025-04-23T15:59:37.74346Z","shell.execute_reply.started":"2025-04-23T15:58:07.055097Z","shell.execute_reply":"2025-04-23T15:59:37.742022Z"}},"outputs":[{"name":"stdout","text":"Starting hyperparameter tuning...\nWarning: best_model.pth not found, using current model state\n","output_type":"stream"},{"name":"stderr","text":"Tuning threshold 0.10:   0%|          | 0/65 [01:30<?, ?it/s]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_270/807396157.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Starting hyperparameter tuning...\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Starting hyperparameter tuning...\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mbest_threshold\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtune_threshold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_ids\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgcs_preprocessed_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgcs_precomputed_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels_df\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Generating test predictions...\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Generating test predictions...\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_270/2675285236.py\u001b[0m in \u001b[0;36mtune_threshold\u001b[0;34m(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df, thresholds)\u001b[0m\n\u001b[1;32m     87\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtomo_id\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_ids\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdesc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34mf\"Tuning threshold {threshold:.2f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m             \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTomogramDataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtomo_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgcs_preprocessed_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"val\"\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Fixed typo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m             \u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m             \u001b[0mvolume\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m             \u001b[0mpred_mask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_full_volume\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvolume\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_270/3082621155.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     63\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m         tomo_path, mask_path = download_npy_and_mask(\n\u001b[0m\u001b[1;32m     66\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtomo_id\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgcs_preprocessed_path\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_270/1434929334.py\u001b[0m in \u001b[0;36mdownload_npy_and_mask\u001b[0;34m(tomo_id, gcs_preprocessed_path, gcs_precomputed_path, split, local_dir)\u001b[0m\n\u001b[1;32m     73\u001b[0m     \u001b[0mt2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mthreading\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mThread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdownload_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0mt1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mt2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m     \u001b[0mt1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mt2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocal_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"{tomo_id}.npy\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocal_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"{tomo_id}_mask.npy\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/threading.py\u001b[0m in \u001b[0;36mjoin\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1118\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1119\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wait_for_tstate_lock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1120\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1121\u001b[0m             \u001b[0;31m# the behavior of a negative timeout isn't documented, but\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/threading.py\u001b[0m in \u001b[0;36m_wait_for_tstate_lock\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m   1137\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1138\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1139\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mlock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1140\u001b[0m                 \u001b[0mlock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelease\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1141\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":15},{"cell_type":"markdown","source":"","metadata":{}}]}