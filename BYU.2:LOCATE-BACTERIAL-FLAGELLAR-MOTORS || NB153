{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91249,"databundleVersionId":11294684,"sourceType":"competition"}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nicholas33/byu-2-locate-bacterial-flagellar-motors-nb153?scriptVersionId=235486889\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# Install required packages\n!pip install monai scipy scikit-image wandb imageio gcsfs\n\n# Import libraries\nimport os\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom monai.networks.nets import UNet\nfrom monai.losses import DiceLoss\nimport torch.optim as optim\nfrom scipy.ndimage import gaussian_filter, center_of_mass\nfrom scipy.signal import find_peaks\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport glob\nfrom IPython.display import Video, display\nimport wandb\nimport time\nimport shutil\nimport gcsfs  # Dataset is too big for kaggle - After multiple attempts of uploading, I failed miserably. \nimport gc\nfrom torch.cuda.amp import autocast, GradScaler\n\n# Set random seed for reproducibility\ntorch.manual_seed(42)\nnp.random.seed(42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T14:56:25.389519Z","iopub.execute_input":"2025-04-22T14:56:25.390309Z","iopub.status.idle":"2025-04-22T14:56:28.69946Z","shell.execute_reply.started":"2025-04-22T14:56:25.390279Z","shell.execute_reply":"2025-04-22T14:56:28.698746Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: monai in /usr/local/lib/python3.11/dist-packages (1.4.0)\nRequirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.15.2)\nRequirement already satisfied: scikit-image in /usr/local/lib/python3.11/dist-packages (0.25.1)\nRequirement already satisfied: wandb in /usr/local/lib/python3.11/dist-packages (0.19.6)\nRequirement already satisfied: imageio in /usr/local/lib/python3.11/dist-packages (2.37.0)\nRequirement already satisfied: gcsfs in /usr/local/lib/python3.11/dist-packages (2024.10.0)\nRequirement already satisfied: numpy<2.0,>=1.24 in /usr/local/lib/python3.11/dist-packages (from monai) (1.26.4)\nRequirement already satisfied: torch>=1.9 in /usr/local/lib/python3.11/dist-packages (from monai) (2.5.1+cu124)\nRequirement already satisfied: networkx>=3.0 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (3.4.2)\nRequirement already satisfied: pillow>=10.1 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (11.1.0)\nRequirement already satisfied: tifffile>=2022.8.12 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (2025.1.10)\nRequirement already satisfied: packaging>=21 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (24.2)\nRequirement already satisfied: lazy-loader>=0.4 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (0.4)\nRequirement already satisfied: click!=8.0.0,>=7.1 in /usr/local/lib/python3.11/dist-packages (from wandb) (8.1.8)\nRequirement already satisfied: docker-pycreds>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (0.4.0)\nRequirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (3.1.44)\nRequirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from wandb) (4.3.7)\nRequirement already satisfied: protobuf!=4.21.0,!=5.28.0,<6,>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (3.20.3)\nRequirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (7.0.0)\nRequirement already satisfied: pydantic<3,>=2.6 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.11.3)\nRequirement already satisfied: pyyaml in /usr/local/lib/python3.11/dist-packages (from wandb) (6.0.2)\nRequirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.32.3)\nRequirement already satisfied: sentry-sdk>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.21.0)\nRequirement already satisfied: setproctitle in /usr/local/lib/python3.11/dist-packages (from wandb) (1.3.4)\nRequirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from wandb) (75.1.0)\nRequirement already satisfied: typing-extensions<5,>=4.4 in /usr/local/lib/python3.11/dist-packages (from wandb) (4.13.1)\nRequirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from gcsfs) (3.11.16)\nRequirement already satisfied: decorator>4.1.2 in /usr/local/lib/python3.11/dist-packages (from gcsfs) (4.4.2)\nRequirement already satisfied: fsspec==2024.10.0 in /usr/local/lib/python3.11/dist-packages (from gcsfs) (2024.10.0)\nRequirement already satisfied: google-auth>=1.2 in /usr/local/lib/python3.11/dist-packages (from gcsfs) (2.27.0)\nRequirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.11/dist-packages (from gcsfs) (1.2.1)\nRequirement already satisfied: google-cloud-storage in /usr/local/lib/python3.11/dist-packages (from gcsfs) (2.14.0)\nRequirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (2.6.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.3.2)\nRequirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (25.3.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.5.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (6.2.0)\nRequirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (0.3.1)\nRequirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->gcsfs) (1.19.0)\nRequirement already satisfied: six>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from docker-pycreds>=0.4.0->wandb) (1.17.0)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.29,>=1.0.0->wandb) (4.0.12)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.2->gcsfs) (5.5.2)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.2->gcsfs) (0.4.1)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.2->gcsfs) (4.9)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.24->monai) (2.4.1)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6->wandb) (0.7.0)\nRequirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6->wandb) (2.33.1)\nRequirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6->wandb) (0.4.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2025.1.31)\nRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (3.18.0)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (3.1.6)\nRequirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (9.1.0.70)\nRequirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.5.8)\nRequirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (11.2.1.3)\nRequirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (10.3.5.147)\nRequirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (11.6.1.9)\nRequirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.3.1.170)\nRequirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (2.21.5)\nRequirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (12.4.127)\nRequirement already satisfied: triton==3.1.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (3.1.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.9->monai) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.9->monai) (1.3.0)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib->gcsfs) (2.0.0)\nRequirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5 in /usr/local/lib/python3.11/dist-packages (from google-cloud-storage->gcsfs) (1.34.1)\nRequirement already satisfied: google-cloud-core<3.0dev,>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-storage->gcsfs) (2.4.1)\nRequirement already satisfied: google-resumable-media>=2.6.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-storage->gcsfs) (2.7.2)\nRequirement already satisfied: google-crc32c<2.0dev,>=1.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-storage->gcsfs) (1.6.0)\nRequirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb) (5.0.2)\nRequirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-storage->gcsfs) (1.67.0)\nRequirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.2->gcsfs) (0.6.1)\nRequirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib->gcsfs) (3.2.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.9->monai) (3.0.2)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<2.0,>=1.24->monai) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<2.0,>=1.24->monai) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy<2.0,>=1.24->monai) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy<2.0,>=1.24->monai) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy<2.0,>=1.24->monai) (2024.2.0)\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nwb_token = user_secrets.get_secret(\"WANDB\")\nwandb.login(key=wb_token)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Install wandb\n!pip install wandb\n\n# Import wandb\nimport wandb\n# Initialize wandb run\nwandb.init(\n    project=\"byu-bacterial-flagellar-motors\", config={\n    \"learning_rate\": 1e-3,\n    \"epochs\": 50,\n    \"batch_size\": 4,\n    \"patch_size\": (128, 128, 128),\n    \"gaussian_sigma\": 5,\n    \"architecture\": \"3D U-Net\",\n    \"optimizer\": \"Adam\",\n    \"loss_function\": \"DiceLoss\",\n    \"beta\": 2  # For Fβ-score\n})","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fs = gcsfs.GCSFileSystem(token=\"anon\") # Initialize GCS filesystem\n\n# Define GCS path and local directory\ngcs_precomputed_path = \"gs://nb153/precomputedmasks\"\ngcs_preprocessed_path = \"gs://nb153/preprocessed\"\nlocal_dir = \"/kaggle/working/data\"\nos.makedirs(local_dir, exist_ok=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T14:41:38.283208Z","iopub.execute_input":"2025-04-22T14:41:38.283714Z","iopub.status.idle":"2025-04-22T14:41:38.287888Z","shell.execute_reply.started":"2025-04-22T14:41:38.283689Z","shell.execute_reply":"2025-04-22T14:41:38.287125Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# Device configuration\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T14:43:09.958101Z","iopub.execute_input":"2025-04-22T14:43:09.958829Z","iopub.status.idle":"2025-04-22T14:43:09.962095Z","shell.execute_reply.started":"2025-04-22T14:43:09.958804Z","shell.execute_reply":"2025-04-22T14:43:09.961521Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Load labels and split data\nlabels_df = pd.read_csv(\"/kaggle/input/byu-locating-bacterial-flagellar-motors-2025/train_labels.csv\")\ntomo_ids = sorted(labels_df[\"tomo_id\"].unique())\nprint(f\"Total tomograms:{len(tomo_ids)}\")\n\n# Split into train/val/test (80/10/10)\ntrain_val_ids, test_ids = sklearn.model_selection.train_test_split(\n    tomo_ids, test_size=0.1, random_state=42\n)\n\ntrain_ids, val_ids = sklearn.model_selection.train_test_split(\n    train_val_ids, test_size=0.1111, random_state=42  # 0.1111 of 90% = 10% of total\n)\nprint(f\"Train IDs: {len(train_ids)}, Val IDs: {len(val_ids)}, Test IDs: {len(test_ids)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T14:43:11.155258Z","iopub.execute_input":"2025-04-22T14:43:11.15561Z","iopub.status.idle":"2025-04-22T14:43:11.183393Z","shell.execute_reply.started":"2025-04-22T14:43:11.155588Z","shell.execute_reply":"2025-04-22T14:43:11.182862Z"}},"outputs":[{"name":"stdout","text":"Total tomograms:648\nTrain IDs: 518, Val IDs: 65, Test IDs: 65\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Download functions\ndef download_npy_from_gcs(tomo_id, gcs_path, split, local_dir):\n    gcs_file_path = f\"{gcs_path}/{split}/{tomo_id}/{tomo_id}.npy\"\n    local_file_path = os.path.join(local_dir, f\"{tomo_id}.npy\")\n    if not os.path.exists(local_file_path):\n        print(f\"Downloading {gcs_file_path} to {local_file_path}\")\n        fs.get(gcs_file_path, local_file_path)\n        print(f\"✅ Download complete: {tomo_id}\")\n    return local_file_path\n\ndef download_mask_from_gcs(tomo_id, gcs_path, split, local_dir):\n    gcs_file_path = f\"{gcs_path}/{split}/{tomo_id}_mask.npy\"\n    local_file_path = os.path.join(local_dir, f\"{tomo_id}_mask.npy\")\n    if not os.path.exists(local_file_path):\n        print(f\"Downloading {gcs_file_path} to {local_file_path}\")\n        fs.get(gcs_file_path, local_file_path)\n        print(f\"✅ Download complete: {tomo_id}_mask.npy\")\n    return local_file_path\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T14:43:15.979122Z","iopub.execute_input":"2025-04-22T14:43:15.979369Z","iopub.status.idle":"2025-04-22T14:43:15.98499Z","shell.execute_reply.started":"2025-04-22T14:43:15.979351Z","shell.execute_reply":"2025-04-22T14:43:15.984236Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Pre-filter train_ids to include only tomograms with motors\ndef filter_valid_tomograms(labels_df, train_ids):\n    valid_tomograms = []\n    for tomo_id in train_ids:\n        tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id]\n        has_motors = any((tomo_labels[\"Number of motors\"] > 0) & (tomo_labels[\"Motor axis 0\"] != -1))\n        if has_motors:\n            valid_tomograms.append(tomo_id)\n    print(f\"Valid tomograms with motors: {len(valid_tomograms)}/{len(train_ids)}\")\n    return valid_tomograms","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Function to sample patches from a single tomogram\ndef sample_patches(tomo_id, volume, mask, labels_df, patch_size=(160, 160, 160), patches_per_volume=64):\n    shape = volume.shape\n    patches = []\n    mask_patches = []\n    # Get motor coordinates\n    tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id]\n    motor_coords = []\n    for _, row in tomo_labels.iterrows():\n        if row[\"Number of motors\"] > 0 and row[\"Motor axis 0\"] != -1:\n            z, y, x = int(row[\"Motor axis 0\"]), int(row[\"Motor axis 1\"]), int(row[\"Motor axis 2\"])\n            if 0 <= z < shape[0] and 0 <= y < shape[1] and 0 <= x < shape[2]:\n                motor_coords.append((z, y, x))\n\n    # Debug: Check motor coordinates and mask\n    print(f\"Tomogram {tomo_id}: {len(motor_coords)} valid motor coordinates\")\n    print(f\"Mask min/max: {mask.min():.4f}/{mask.max():.4f}\")\n    \n    if not motor_coords:\n        print(f\"Warning: No valid motor coordinates for {tomo_id}, using random sampling\")\n\n    # Sample 90% patches around motors\n    target_motor_patches = int(patches_per_volume * 0.9)\n    for _ in range(target_motor_patches):\n        zc, yc, xc = motor_coords[np.random.randint(len(motor_coords))]\n        z = np.clip(zc - patch_size[0]//2 + np.random.randint(-32, 32), 0, shape[0] - patch_size[0])\n        y = np.clip(yc - patch_size[1]//2 + np.random.randint(-32, 32), 0, shape[1] - patch_size[1])\n        x = np.clip(xc - patch_size[2]//2 + np.random.randint(-32, 32), 0, shape[2] - patch_size[2])\n        patch = volume[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        mask_patch = mask[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        patches.append(patch)\n        mask_patches.append(mask_patch)\n\n    # Fill remaining patches randomly\n    for _ in range(patches_per_volume - target_motor_patches):\n        z = np.random.randint(0, max(1, shape[0] - patch_size[0]))\n        y = np.random.randint(0, max(1, shape[1] - patch_size[1]))\n        x = np.random.randint(0, max(1, shape[2] - patch_size[2]))\n        patch = volume[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        mask_patch = mask[z:z+patch_size[0], y:y+patch_size[1], x:x+patch_size[2]][np.newaxis, ...]\n        patches.append(patch)\n        mask_patches.append(mask_patch)\n    \n    return np.array(patches), np.array(mask_patches)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T15:05:20.233299Z","iopub.execute_input":"2025-04-22T15:05:20.233905Z","iopub.status.idle":"2025-04-22T15:05:20.244014Z","shell.execute_reply.started":"2025-04-22T15:05:20.233883Z","shell.execute_reply":"2025-04-22T15:05:20.243343Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"# Dataset for patches from a single tomogram\nclass PatchDataset(Dataset):\n    def __init__(self, patches, mask_patches):\n        self.patches = patches\n        self.mask_patches = mask_patches\n    \n    def __len__(self):\n        return len(self.patches)\n    \n    def __getitem__(self, idx):\n        patch = self.patches[idx]\n        mask_patch = self.mask_patches[idx]\n        return torch.tensor(patch, dtype=torch.float32), torch.tensor(mask_patch, dtype=torch.float32)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T15:05:38.897893Z","iopub.execute_input":"2025-04-22T15:05:38.898174Z","iopub.status.idle":"2025-04-22T15:05:38.902794Z","shell.execute_reply.started":"2025-04-22T15:05:38.898154Z","shell.execute_reply":"2025-04-22T15:05:38.902006Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# Dataset for full tomograms (validation/test)\nclass TomogramDataset(Dataset):\n    def __init__(self, tomo_id, gcs_preprocessed_path, local_dir, mode=\"test\"):\n        self.tomo_id = tomo_id\n        self.gcs_preprocessed_path = gcs_preprocessed_path\n        self.local_dir = local_dir\n        self.mode = mode\n        self.volume = None\n    \n    def load(self):\n        tomo_path = download_npy_from_gcs(self.tomo_id, self.gcs_preprocessed_path, \"train\" if self.mode == \"val\" else \"test\", self.local_dir)\n        self.volume = np.load(tomo_path)\n    \n    def clear(self):\n        if self.volume is not None:\n            del self.volume\n            self.volume = None\n            tomo_path = os.path.join(self.local_dir, f\"{self.tomo_id}.npy\")\n            if os.path.exists(tomo_path):\n                os.remove(tomo_path)\n            gc.collect()\n    \n    def __len__(self):\n        return 1\n    \n    def __getitem__(self, idx):\n        if self.volume is None:\n            self.load()\n        volume = self.volume[np.newaxis, np.newaxis, ...]\n        return torch.tensor(volume, dtype=torch.float32), self.tomo_id","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T15:05:41.49534Z","iopub.execute_input":"2025-04-22T15:05:41.495919Z","iopub.status.idle":"2025-04-22T15:05:41.501854Z","shell.execute_reply.started":"2025-04-22T15:05:41.495894Z","shell.execute_reply":"2025-04-22T15:05:41.50103Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Define 3D U-Net model\nmodel = UNet(\n    spatial_dims=3,\n    in_channels=1,\n    out_channels=1,\n    channels=(32, 64, 128, 256, 512),\n    strides=(2, 2, 2, 2),\n    num_res_units=2,\n).to(device)\nprint(\"Model device:\", next(model.parameters()).device)\n\n# Loss and optimizer\ncriterion = DiceLoss(sigmoid=True)  # Sigmoid to handle [0,1] output\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=\"min\", factor=0.1, patience=5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T15:05:43.630338Z","iopub.execute_input":"2025-04-22T15:05:43.630887Z","iopub.status.idle":"2025-04-22T15:05:43.692288Z","shell.execute_reply.started":"2025-04-22T15:05:43.630863Z","shell.execute_reply":"2025-04-22T15:05:43.691733Z"}},"outputs":[{"name":"stdout","text":"Model device: cuda:0\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"start_epoch = 0\nbest_val_loss = float(\"inf\")\ntrain_losses = []\nval_losses = []\n\nif os.path.exists(\"checkpoint.pth\"):\n    checkpoint = torch.load(\"checkpoint.pth\", map_location=device)\n    model.load_state_dict(checkpoint['model_state_dict'])\n    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n    scheduler.load_state_dict(checkpoint['scheduler_state_dict'])\n    best_val_loss = checkpoint['best_val_loss']\n    start_epoch = checkpoint['epoch'] + 1\n    print(f\"Resumed from epoch {start_epoch}\")\nelse:\n    print(\"No checkpoint found, starting from scratch.\")\n\n# Training function - adding mixed precision\ndef train_epoch(model, loader, criterion, optimizer, epoch, start_epoch, scaler):\n    model.train()\n    epoch_loss = 0.0\n    start = time.time()\n    for i, (inputs, targets) in enumerate(tqdm(loader, desc=\"Training\")):\n        batch_load_time = time.time() - start\n        inputs, targets = inputs.to(device), targets.to(device)\n        optimizer.zero_grad()\n        with autocast():\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n        scaler.scale(loss).backward()\n        scaler.step(optimizer)\n        scaler.update()\n        epoch_loss += loss.item()\n        if epoch == start_epoch and i < 2:  # Print for first two batches of first epoch\n            print(f\"\\n🕒 Batch {i} load time: {batch_load_time:.2f}s\")\n            print(f\"Inputs shape: {inputs.shape}, min/max: {inputs.min().item():.4f}/{inputs.max().item():.4f}\")\n            print(f\"Targets shape: {targets.shape}, min/max: {targets.min().item():.4f}/{targets.max().item():.4f}\")\n            print(f\"Outputs shape: {outputs.shape}, min/max: {outputs.min().item():.4f}/{outputs.max().item():.4f}\")\n            print(f\"Loss: {loss.item():.4f}\")\n            print(f\"GPU Memory: {torch.cuda.memory_allocated() / 1024**3:.2f} GB\")\n        start = time.time()\n    print(f\"Tomogram Loss: {epoch_loss / len(loader):.4f}\")  # Summary loss per tomogram\n    return epoch_loss / len(loader)\n\ndef validate(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df, criterion):\n    model.eval()\n    epoch_loss = 0.0\n    patches_per_volume = 8\n    \n    for tomo_id in tqdm(val_ids, desc=\"Validation\"):\n        # Download tomogram and mask\n        tomo_path = download_npy_from_gcs(tomo_id, gcs_preprocessed_path, \"train\", local_dir)\n        mask_path = download_mask_from_gcs(tomo_id, gcs_precomputed_path, \"train\", local_dir)\n        volume = np.load(tomo_path)\n        mask = np.load(mask_path)\n        \n        # Sample patches\n        patches, mask_patches = sample_patches(tomo_id, volume, mask, labels_df, patches_per_volume=patches_per_volume)\n        dataset = PatchDataset(patches, mask_patches)\n        loader = DataLoader(dataset, batch_size=1, shuffle=False, num_workers=0, pin_memory=True)\n        \n        # Validate\n        with torch.no_grad():\n            for inputs, targets in loader:\n                inputs = inputs.to(device)\n                targets = targets.to(device)\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n                epoch_loss += loss.item()\n        \n        # Clean up\n        del volume, mask, patches, mask_patches, dataset, loader\n        os.remove(tomo_path)\n        os.remove(mask_path)\n        gc.collect()\n    \n    return epoch_loss / (len(val_ids) * patches_per_volume)\n\n# Training loop\nnum_epochs = 50\npatience = 10\ntrigger_times = 0\npatches_per_volume_train = 64\nscaler = GradScaler()\n\n# Filter train_ids\ntrain_ids = filter_valid_tomograms(labels_df, train_ids)\n\nfor epoch in range(start_epoch, num_epochs):\n    print(f\"STARTING TRAINING\")\n    print(f\"\\n=== Epoch {epoch+1}/{num_epochs} ===\")\n\n    # Training\n    epoch_train_loss = 0.0\n    for tomo_id in tqdm(train_ids, desc=\"Training tomograms\"):\n        # Download tomogram and mask\n        tomo_path = download_npy_from_gcs(tomo_id, gcs_preprocessed_path, \"train\", local_dir)\n        mask_path = download_mask_from_gcs(tomo_id, gcs_precomputed_path, \"train\", local_dir)\n        volume = np.load(tomo_path)\n        mask = np.load(mask_path)\n        \n        # Sample patches\n        patches, mask_patches = sample_patches(tomo_id, volume, mask, labels_df, patches_per_volume=patches_per_volume_train)\n        if patches is None:\n            print(f\"Skipping {tomo_id} due to no valid motor coordinates or empty mask\")\n            del volume, mask\n            os.remove(tomo_path)\n            os.remove(mask_path)\n            gc.collect()\n            continue\n\n        dataset = PatchDataset(patches, mask_patches)\n        loader = DataLoader(dataset, batch_size=8, shuffle=True, num_workers=0, pin_memory=True)\n        \n        # Train\n        epoch_train_loss += train_epoch(model, loader, criterion, optimizer, epoch, start_epoch)\n        tomo_count += 1\n        \n        # Clean up\n        del volume, mask, patches, mask_patches, dataset, loader\n        os.remove(tomo_path)\n        os.remove(mask_path)\n        gc.collect()\n        torch.cuda.empt_cache() #Clear GPU cache \n    \n    train_loss = epoch_train_loss / tomo_count if tomo_count > 0 else float('inf')\n    train_losses.append(train_loss)\n    \n    # Validation\n    val_loss = validate(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df, criterion)\n    val_losses.append(val_loss)\n    \n    print(f\"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}\")\n    \n    \n    #wandb.log({                    # Log metrics to wandb\n    #    \"epoch\": epoch + 1,\n    #    \"train_loss\": train_loss,\n    #    \"val_loss\": val_loss,\n    #    \"learning_rate\": optimizer.param_groups[0][\"lr\"]\n    #})\n    scheduler.step(val_loss)   # Learning rate scheduling\n\n    # GPU diagnostics every 10 epochs\n    if (epoch + 1) % 10 == 0:\n        torch.cuda.synchronize()\n        print(f\"\\n📊 GPU Memory after Epoch {epoch+1}:\")\n        print(f\"GPU Memory: {torch.cuda.memory_allocated() / 1024**3:.2f} GB\")\n        os.system(\"nvidia-smi\")\n\n    \n    # Checkpointing and Early stopping\n    if val_loss < best_val_loss:\n        best_val_loss = val_loss\n        trigger_times = 0\n        torch.save({               # Save full training state \n            'epoch': epoch,\n            'model_state_dict': model.state_dict(),\n            'optimizer_state_dict': optimizer.state_dict(),\n            'scheduler_state_dict': scheduler.state_dict(),\n            'best_val_loss': best_val_loss\n        }, \"checkpoint.pth\")\n        torch.save(model.state_dict(), \"best_model.pth\") #Save model weights for inference / tuning \n        # Log the best model to wandb - Uncomment the below. \n        #artifact = wandb.Artifact(\"best_model\", type=\"model\")\n        #artifact.add_file(\"best_model.pth\")\n        #wandb.log_artifact(artifact)\n    else:\n        trigger_times += 1\n        if trigger_times >= patience:\n            print(\"Early stopping triggered!\")\n            break\n\n# Plot Training and Validation loss \nplt.figure(figsize=(10, 5))\nplt.plot(train_losses, label=\"Training Loss\")\nplt.plot(val_losses, label=\"Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training and Validation Loss Over Epochs\")\nplt.legend()\nplt.grid(True)\nplt.show()\nplt.close()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T15:06:34.494404Z","iopub.execute_input":"2025-04-22T15:06:34.495161Z","execution_failed":"2025-04-22T16:35:16.764Z"}},"outputs":[{"name":"stdout","text":"No checkpoint found, starting from scratch.\nSTARTING TRAINING\n\n=== Epoch 1/50 ===\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   0%|          | 0/518 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_646049/tomo_646049.npy to /kaggle/working/data/tomo_646049.npy\n✅ Download complete: tomo_646049\nDownloading gs://nb153/precomputedmasks/train/tomo_646049_mask.npy to /kaggle/working/data/tomo_646049_mask.npy\n✅ Download complete: tomo_646049_mask.npy\nTomogram tomo_646049: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_646049, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.16it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.09s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.9767/7.3066\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.37it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.9703/6.3735\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   0%|          | 1/518 [00:15<2:15:02, 15.67s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_648adf/tomo_648adf.npy to /kaggle/working/data/tomo_648adf.npy\n✅ Download complete: tomo_648adf\nDownloading gs://nb153/precomputedmasks/train/tomo_648adf_mask.npy to /kaggle/working/data/tomo_648adf_mask.npy\n✅ Download complete: tomo_648adf_mask.npy\nTomogram tomo_648adf: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_648adf, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.4280/7.9685\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.8723/6.9216\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   0%|          | 2/518 [00:35<2:34:05, 17.92s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_3c6038/tomo_3c6038.npy to /kaggle/working/data/tomo_3c6038.npy\n✅ Download complete: tomo_3c6038\nDownloading gs://nb153/precomputedmasks/train/tomo_3c6038_mask.npy to /kaggle/working/data/tomo_3c6038_mask.npy\n✅ Download complete: tomo_3c6038_mask.npy\nTomogram tomo_3c6038: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.2771/6.1778\nLoss: 0.9991\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.9996/5.9566\nLoss: 0.9990\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9983\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   1%|          | 3/518 [00:48<2:17:23, 16.01s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c38e83/tomo_c38e83.npy to /kaggle/working/data/tomo_c38e83.npy\n✅ Download complete: tomo_c38e83\nDownloading gs://nb153/precomputedmasks/train/tomo_c38e83_mask.npy to /kaggle/working/data/tomo_c38e83_mask.npy\n✅ Download complete: tomo_c38e83_mask.npy\nTomogram tomo_c38e83: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_c38e83, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.24it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.3989/12.5679\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.7548/11.1132\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   1%|          | 4/518 [01:14<2:48:06, 19.62s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_369cce/tomo_369cce.npy to /kaggle/working/data/tomo_369cce.npy\n✅ Download complete: tomo_369cce\nDownloading gs://nb153/precomputedmasks/train/tomo_369cce_mask.npy to /kaggle/working/data/tomo_369cce_mask.npy\n✅ Download complete: tomo_369cce_mask.npy\nTomogram tomo_369cce: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.1144/12.0914\nLoss: 0.9987\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.8043/16.4657\nLoss: 0.9986\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9984\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   1%|          | 5/518 [01:27<2:29:22, 17.47s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cff77a/tomo_cff77a.npy to /kaggle/working/data/tomo_cff77a.npy\n✅ Download complete: tomo_cff77a\nDownloading gs://nb153/precomputedmasks/train/tomo_cff77a_mask.npy to /kaggle/working/data/tomo_cff77a_mask.npy\n✅ Download complete: tomo_cff77a_mask.npy\nTomogram tomo_cff77a: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.5716/9.8210\nLoss: 0.9988\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.9137\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.2356/10.9602\nLoss: 0.9975\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.69it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.73it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9978\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   1%|          | 6/518 [01:41<2:18:48, 16.27s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_60d478/tomo_60d478.npy to /kaggle/working/data/tomo_60d478.npy\n✅ Download complete: tomo_60d478\nDownloading gs://nb153/precomputedmasks/train/tomo_60d478_mask.npy to /kaggle/working/data/tomo_60d478_mask.npy\n✅ Download complete: tomo_60d478_mask.npy\nTomogram tomo_60d478: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9058/12.9970\nLoss: 0.9987\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9493/12.3272\nLoss: 0.9982\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.54it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9983\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   1%|▏         | 7/518 [01:54<2:09:46, 15.24s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_1c38fd/tomo_1c38fd.npy to /kaggle/working/data/tomo_1c38fd.npy\n✅ Download complete: tomo_1c38fd\nDownloading gs://nb153/precomputedmasks/train/tomo_1c38fd_mask.npy to /kaggle/working/data/tomo_1c38fd_mask.npy\n✅ Download complete: tomo_1c38fd_mask.npy\nTomogram tomo_1c38fd: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.5509/21.3368\nLoss: 0.9986\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.5083/19.8450\nLoss: 0.9974\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9974\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   2%|▏         | 8/518 [02:08<2:05:53, 14.81s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_98d455/tomo_98d455.npy to /kaggle/working/data/tomo_98d455.npy\n✅ Download complete: tomo_98d455\nDownloading gs://nb153/precomputedmasks/train/tomo_98d455_mask.npy to /kaggle/working/data/tomo_98d455_mask.npy\n✅ Download complete: tomo_98d455_mask.npy\nTomogram tomo_98d455: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.8768/23.3580\nLoss: 0.9988\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.7403/19.2057\nLoss: 0.9982\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.40it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.44it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.32it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.40it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.47it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.46it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9976\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   2%|▏         | 9/518 [02:22<2:02:01, 14.38s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5f34b3/tomo_5f34b3.npy to /kaggle/working/data/tomo_5f34b3.npy\n✅ Download complete: tomo_5f34b3\nDownloading gs://nb153/precomputedmasks/train/tomo_5f34b3_mask.npy to /kaggle/working/data/tomo_5f34b3_mask.npy\n✅ Download complete: tomo_5f34b3_mask.npy\nTomogram tomo_5f34b3: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_5f34b3, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9395/27.5509\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.7042/19.9005\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   2%|▏         | 10/518 [02:47<2:30:16, 17.75s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e96200/tomo_e96200.npy to /kaggle/working/data/tomo_e96200.npy\n✅ Download complete: tomo_e96200\nDownloading gs://nb153/precomputedmasks/train/tomo_e96200_mask.npy to /kaggle/working/data/tomo_e96200_mask.npy\n✅ Download complete: tomo_e96200_mask.npy\nTomogram tomo_e96200: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_e96200, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.0188/26.4915\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.2997/17.7660\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.70it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   2%|▏         | 11/518 [03:00<2:17:33, 16.28s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ca8be0/tomo_ca8be0.npy to /kaggle/working/data/tomo_ca8be0.npy\n✅ Download complete: tomo_ca8be0\nDownloading gs://nb153/precomputedmasks/train/tomo_ca8be0_mask.npy to /kaggle/working/data/tomo_ca8be0_mask.npy\n✅ Download complete: tomo_ca8be0_mask.npy\nTomogram tomo_ca8be0: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_ca8be0, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.2030/16.2618\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.1602/15.3803\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   2%|▏         | 12/518 [03:21<2:30:45, 17.88s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_4e38b8/tomo_4e38b8.npy to /kaggle/working/data/tomo_4e38b8.npy\n✅ Download complete: tomo_4e38b8\nDownloading gs://nb153/precomputedmasks/train/tomo_4e38b8_mask.npy to /kaggle/working/data/tomo_4e38b8_mask.npy\n✅ Download complete: tomo_4e38b8_mask.npy\nTomogram tomo_4e38b8: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9582/14.7933\nLoss: 0.9992\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.3469/17.9127\nLoss: 0.9984\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9985\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   3%|▎         | 13/518 [03:35<2:19:12, 16.54s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b7d014/tomo_b7d014.npy to /kaggle/working/data/tomo_b7d014.npy\n✅ Download complete: tomo_b7d014\nDownloading gs://nb153/precomputedmasks/train/tomo_b7d014_mask.npy to /kaggle/working/data/tomo_b7d014_mask.npy\n✅ Download complete: tomo_b7d014_mask.npy\nTomogram tomo_b7d014: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.5646/24.9141\nLoss: 0.9977\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.5107/18.5750\nLoss: 0.9978\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9976\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   3%|▎         | 14/518 [03:56<2:31:14, 18.01s/it]","output_type":"stream"},{"name":"stdout","text":"Tomogram tomo_e57baf: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.2184/13.0022\nLoss: 0.9982\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.71it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.7895/14.1664\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.68it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9973\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   3%|▎         | 15/518 [04:10<2:19:10, 16.60s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_50cbd9/tomo_50cbd9.npy to /kaggle/working/data/tomo_50cbd9.npy\n✅ Download complete: tomo_50cbd9\nDownloading gs://nb153/precomputedmasks/train/tomo_50cbd9_mask.npy to /kaggle/working/data/tomo_50cbd9_mask.npy\n✅ Download complete: tomo_50cbd9_mask.npy\nTomogram tomo_50cbd9: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_50cbd9, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.6472/23.8342\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.5828/34.8520\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   3%|▎         | 16/518 [04:48<3:13:19, 23.11s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_512f98/tomo_512f98.npy to /kaggle/working/data/tomo_512f98.npy\n✅ Download complete: tomo_512f98\nDownloading gs://nb153/precomputedmasks/train/tomo_512f98_mask.npy to /kaggle/working/data/tomo_512f98_mask.npy\n✅ Download complete: tomo_512f98_mask.npy\nTomogram tomo_512f98: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_512f98, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.2734/18.3003\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.4124/29.0006\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.50it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   3%|▎         | 17/518 [05:23<3:42:05, 26.60s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2cace2/tomo_2cace2.npy to /kaggle/working/data/tomo_2cace2.npy\n✅ Download complete: tomo_2cace2\nDownloading gs://nb153/precomputedmasks/train/tomo_2cace2_mask.npy to /kaggle/working/data/tomo_2cace2_mask.npy\n✅ Download complete: tomo_2cace2_mask.npy\nTomogram tomo_2cace2: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_2cace2, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.35it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.3682/25.1003\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.34it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9330/18.9195\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.45it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   3%|▎         | 18/518 [05:37<3:11:15, 22.95s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5984bf/tomo_5984bf.npy to /kaggle/working/data/tomo_5984bf.npy\n✅ Download complete: tomo_5984bf\nDownloading gs://nb153/precomputedmasks/train/tomo_5984bf_mask.npy to /kaggle/working/data/tomo_5984bf_mask.npy\n✅ Download complete: tomo_5984bf_mask.npy\nTomogram tomo_5984bf: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_5984bf, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.29it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.8699/26.5741\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.41it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.4025/19.3632\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.50it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   4%|▎         | 19/518 [06:13<3:44:20, 26.98s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_4f379f/tomo_4f379f.npy to /kaggle/working/data/tomo_4f379f.npy\n✅ Download complete: tomo_4f379f\nDownloading gs://nb153/precomputedmasks/train/tomo_4f379f_mask.npy to /kaggle/working/data/tomo_4f379f_mask.npy\n✅ Download complete: tomo_4f379f_mask.npy\nTomogram tomo_4f379f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.3482/19.8347\nLoss: 0.9972\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.2843/19.7761\nLoss: 0.9972\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9971\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   4%|▍         | 20/518 [06:27<3:10:42, 22.98s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ecbc12/tomo_ecbc12.npy to /kaggle/working/data/tomo_ecbc12.npy\n✅ Download complete: tomo_ecbc12\nDownloading gs://nb153/precomputedmasks/train/tomo_ecbc12_mask.npy to /kaggle/working/data/tomo_ecbc12_mask.npy\n✅ Download complete: tomo_ecbc12_mask.npy\nTomogram tomo_ecbc12: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_ecbc12, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.26it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.1775/20.4198\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.2450/18.5521\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.51it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   4%|▍         | 21/518 [07:04<3:44:01, 27.05s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6e237a/tomo_6e237a.npy to /kaggle/working/data/tomo_6e237a.npy\n✅ Download complete: tomo_6e237a\nDownloading gs://nb153/precomputedmasks/train/tomo_6e237a_mask.npy to /kaggle/working/data/tomo_6e237a_mask.npy\n✅ Download complete: tomo_6e237a_mask.npy\nTomogram tomo_6e237a: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.3424/18.6946\nLoss: 0.9974\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.68it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.3589/23.8306\nLoss: 0.9996\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9975\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   4%|▍         | 22/518 [07:17<3:10:03, 22.99s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_3b8291/tomo_3b8291.npy to /kaggle/working/data/tomo_3b8291.npy\n✅ Download complete: tomo_3b8291\nDownloading gs://nb153/precomputedmasks/train/tomo_3b8291_mask.npy to /kaggle/working/data/tomo_3b8291_mask.npy\n✅ Download complete: tomo_3b8291_mask.npy\nTomogram tomo_3b8291: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_3b8291, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.4365/23.7782\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.2912/31.1166\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   4%|▍         | 23/518 [07:46<3:25:21, 24.89s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_fadbe2/tomo_fadbe2.npy to /kaggle/working/data/tomo_fadbe2.npy\n✅ Download complete: tomo_fadbe2\nDownloading gs://nb153/precomputedmasks/train/tomo_fadbe2_mask.npy to /kaggle/working/data/tomo_fadbe2_mask.npy\n✅ Download complete: tomo_fadbe2_mask.npy\nTomogram tomo_fadbe2: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.7788/36.9840\nLoss: 0.9981\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.4366/34.9382\nLoss: 0.9979\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.70it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9978\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   5%|▍         | 24/518 [08:00<2:57:09, 21.52s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6cf2df/tomo_6cf2df.npy to /kaggle/working/data/tomo_6cf2df.npy\n✅ Download complete: tomo_6cf2df\nDownloading gs://nb153/precomputedmasks/train/tomo_6cf2df_mask.npy to /kaggle/working/data/tomo_6cf2df_mask.npy\n✅ Download complete: tomo_6cf2df_mask.npy\nTomogram tomo_6cf2df: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.8617/29.0592\nLoss: 0.9974\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.8905/22.8150\nLoss: 0.9982\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9973\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   5%|▍         | 25/518 [08:21<2:55:37, 21.37s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b11ddc/tomo_b11ddc.npy to /kaggle/working/data/tomo_b11ddc.npy\n✅ Download complete: tomo_b11ddc\nDownloading gs://nb153/precomputedmasks/train/tomo_b11ddc_mask.npy to /kaggle/working/data/tomo_b11ddc_mask.npy\n✅ Download complete: tomo_b11ddc_mask.npy\nTomogram tomo_b11ddc: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_b11ddc, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.38it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.6289/20.3246\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.41it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.7350/17.3935\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.44it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.45it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   5%|▌         | 26/518 [08:35<2:37:13, 19.17s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_eb4fd4/tomo_eb4fd4.npy to /kaggle/working/data/tomo_eb4fd4.npy\n✅ Download complete: tomo_eb4fd4\nDownloading gs://nb153/precomputedmasks/train/tomo_eb4fd4_mask.npy to /kaggle/working/data/tomo_eb4fd4_mask.npy\n✅ Download complete: tomo_eb4fd4_mask.npy\nTomogram tomo_eb4fd4: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.4401/21.7389\nLoss: 0.9971\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9437/22.7090\nLoss: 0.9980\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9970\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   5%|▌         | 27/518 [08:49<2:23:26, 17.53s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_3b7a22/tomo_3b7a22.npy to /kaggle/working/data/tomo_3b7a22.npy\n✅ Download complete: tomo_3b7a22\nDownloading gs://nb153/precomputedmasks/train/tomo_3b7a22_mask.npy to /kaggle/working/data/tomo_3b7a22_mask.npy\n✅ Download complete: tomo_3b7a22_mask.npy\nTomogram tomo_3b7a22: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_3b7a22, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.4361/20.1749\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.1842/20.5604\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   5%|▌         | 28/518 [09:26<3:11:24, 23.44s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ff7c20/tomo_ff7c20.npy to /kaggle/working/data/tomo_ff7c20.npy\n✅ Download complete: tomo_ff7c20\nDownloading gs://nb153/precomputedmasks/train/tomo_ff7c20_mask.npy to /kaggle/working/data/tomo_ff7c20_mask.npy\n✅ Download complete: tomo_ff7c20_mask.npy\nTomogram tomo_ff7c20: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_ff7c20, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.6638/28.1853\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.3004/20.2021\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.69it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   6%|▌         | 29/518 [10:00<3:35:45, 26.47s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_89d156/tomo_89d156.npy to /kaggle/working/data/tomo_89d156.npy\n✅ Download complete: tomo_89d156\nDownloading gs://nb153/precomputedmasks/train/tomo_89d156_mask.npy to /kaggle/working/data/tomo_89d156_mask.npy\n✅ Download complete: tomo_89d156_mask.npy\nTomogram tomo_89d156: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9457/15.3063\nLoss: 0.9981\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.0405/14.2575\nLoss: 0.9960\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9970\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   6%|▌         | 30/518 [10:14<3:04:52, 22.73s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_dcb9b4/tomo_dcb9b4.npy to /kaggle/working/data/tomo_dcb9b4.npy\n✅ Download complete: tomo_dcb9b4\nDownloading gs://nb153/precomputedmasks/train/tomo_dcb9b4_mask.npy to /kaggle/working/data/tomo_dcb9b4_mask.npy\n✅ Download complete: tomo_dcb9b4_mask.npy\nTomogram tomo_dcb9b4: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.40it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.9882\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.6949/15.6176\nLoss: 0.9960\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.9882\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9169/24.8618\nLoss: 0.9969\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9968\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   6%|▌         | 31/518 [10:28<2:43:49, 20.18s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_4077d8/tomo_4077d8.npy to /kaggle/working/data/tomo_4077d8.npy\n✅ Download complete: tomo_4077d8\nDownloading gs://nb153/precomputedmasks/train/tomo_4077d8_mask.npy to /kaggle/working/data/tomo_4077d8_mask.npy\n✅ Download complete: tomo_4077d8_mask.npy\nTomogram tomo_4077d8: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.0624/23.6555\nLoss: 0.9981\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -1.9754/22.2316\nLoss: 0.9968\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9972\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   6%|▌         | 32/518 [10:42<2:29:06, 18.41s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_568537/tomo_568537.npy to /kaggle/working/data/tomo_568537.npy\n✅ Download complete: tomo_568537\nDownloading gs://nb153/precomputedmasks/train/tomo_568537_mask.npy to /kaggle/working/data/tomo_568537_mask.npy\n✅ Download complete: tomo_568537_mask.npy\nTomogram tomo_568537: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.7526/23.3731\nLoss: 0.9983\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.70it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.7779/16.9650\nLoss: 0.9968\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9970\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   6%|▋         | 33/518 [10:56<2:18:14, 17.10s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_507b7a/tomo_507b7a.npy to /kaggle/working/data/tomo_507b7a.npy\n✅ Download complete: tomo_507b7a\nDownloading gs://nb153/precomputedmasks/train/tomo_507b7a_mask.npy to /kaggle/working/data/tomo_507b7a_mask.npy\n✅ Download complete: tomo_507b7a_mask.npy\nTomogram tomo_507b7a: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.2155/15.6702\nLoss: 0.9968\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.1726/19.4023\nLoss: 0.9957\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9968\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   7%|▋         | 34/518 [11:17<2:28:02, 18.35s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_db656f/tomo_db656f.npy to /kaggle/working/data/tomo_db656f.npy\n✅ Download complete: tomo_db656f\nDownloading gs://nb153/precomputedmasks/train/tomo_db656f_mask.npy to /kaggle/working/data/tomo_db656f_mask.npy\n✅ Download complete: tomo_db656f_mask.npy\nTomogram tomo_db656f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.8014/21.3329\nLoss: 0.9977\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.4649/21.4051\nLoss: 0.9966\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9965\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   7%|▋         | 35/518 [11:32<2:17:58, 17.14s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5f1f0c/tomo_5f1f0c.npy to /kaggle/working/data/tomo_5f1f0c.npy\n✅ Download complete: tomo_5f1f0c\nDownloading gs://nb153/precomputedmasks/train/tomo_5f1f0c_mask.npy to /kaggle/working/data/tomo_5f1f0c_mask.npy\n✅ Download complete: tomo_5f1f0c_mask.npy\nTomogram tomo_5f1f0c: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_5f1f0c, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.4604/20.2607\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.8928/22.6216\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   7%|▋         | 36/518 [11:46<2:11:25, 16.36s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_971966/tomo_971966.npy to /kaggle/working/data/tomo_971966.npy\n✅ Download complete: tomo_971966\nDownloading gs://nb153/precomputedmasks/train/tomo_971966_mask.npy to /kaggle/working/data/tomo_971966_mask.npy\n✅ Download complete: tomo_971966_mask.npy\nTomogram tomo_971966: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_971966, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.1533/26.3954\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.7703/26.4943\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.46it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.52it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   7%|▋         | 37/518 [12:07<2:22:20, 17.76s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2daaee/tomo_2daaee.npy to /kaggle/working/data/tomo_2daaee.npy\n✅ Download complete: tomo_2daaee\nDownloading gs://nb153/precomputedmasks/train/tomo_2daaee_mask.npy to /kaggle/working/data/tomo_2daaee_mask.npy\n✅ Download complete: tomo_2daaee_mask.npy\nTomogram tomo_2daaee: 4 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.2624/24.9728\nLoss: 0.9949\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.5185/29.2262\nLoss: 0.9896\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9920\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   7%|▋         | 38/518 [12:28<2:29:52, 18.73s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_d2b1bc/tomo_d2b1bc.npy to /kaggle/working/data/tomo_d2b1bc.npy\n✅ Download complete: tomo_d2b1bc\nDownloading gs://nb153/precomputedmasks/train/tomo_d2b1bc_mask.npy to /kaggle/working/data/tomo_d2b1bc_mask.npy\n✅ Download complete: tomo_d2b1bc_mask.npy\nTomogram tomo_d2b1bc: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.7150/31.5712\nLoss: 0.9947\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.6012/33.2643\nLoss: 0.9974\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.68it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.70it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.70it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9960\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   8%|▊         | 39/518 [12:42<2:18:04, 17.30s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_05df8a/tomo_05df8a.npy to /kaggle/working/data/tomo_05df8a.npy\n✅ Download complete: tomo_05df8a\nDownloading gs://nb153/precomputedmasks/train/tomo_05df8a_mask.npy to /kaggle/working/data/tomo_05df8a_mask.npy\n✅ Download complete: tomo_05df8a_mask.npy\nTomogram tomo_05df8a: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.4244/36.5738\nLoss: 0.9954\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.4201/39.6663\nLoss: 0.9957\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9958\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   8%|▊         | 40/518 [12:56<2:08:49, 16.17s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2aeb29/tomo_2aeb29.npy to /kaggle/working/data/tomo_2aeb29.npy\n✅ Download complete: tomo_2aeb29\nDownloading gs://nb153/precomputedmasks/train/tomo_2aeb29_mask.npy to /kaggle/working/data/tomo_2aeb29_mask.npy\n✅ Download complete: tomo_2aeb29_mask.npy\nTomogram tomo_2aeb29: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_2aeb29, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.1065/41.7458\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.1137/47.8588\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.47it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   8%|▊         | 41/518 [13:34<3:02:10, 22.91s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6c4df3/tomo_6c4df3.npy to /kaggle/working/data/tomo_6c4df3.npy\n✅ Download complete: tomo_6c4df3\nDownloading gs://nb153/precomputedmasks/train/tomo_6c4df3_mask.npy to /kaggle/working/data/tomo_6c4df3_mask.npy\n✅ Download complete: tomo_6c4df3_mask.npy\nTomogram tomo_6c4df3: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_6c4df3, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.1384/63.4751\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.5069/50.9132\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   8%|▊         | 42/518 [13:56<2:57:55, 22.43s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6df2d6/tomo_6df2d6.npy to /kaggle/working/data/tomo_6df2d6.npy\n✅ Download complete: tomo_6df2d6\nDownloading gs://nb153/precomputedmasks/train/tomo_6df2d6_mask.npy to /kaggle/working/data/tomo_6df2d6_mask.npy\n✅ Download complete: tomo_6df2d6_mask.npy\nTomogram tomo_6df2d6: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.4465/50.9575\nLoss: 0.9990\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -2.3917/54.2523\nLoss: 0.9991\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9991\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   8%|▊         | 43/518 [14:10<2:37:32, 19.90s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e1a034/tomo_e1a034.npy to /kaggle/working/data/tomo_e1a034.npy\n✅ Download complete: tomo_e1a034\nDownloading gs://nb153/precomputedmasks/train/tomo_e1a034_mask.npy to /kaggle/working/data/tomo_e1a034_mask.npy\n✅ Download complete: tomo_e1a034_mask.npy\nTomogram tomo_e1a034: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_e1a034, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.2875/49.7207\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.9959/57.4862\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   8%|▊         | 44/518 [14:24<2:23:08, 18.12s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5b359d/tomo_5b359d.npy to /kaggle/working/data/tomo_5b359d.npy\n✅ Download complete: tomo_5b359d\nDownloading gs://nb153/precomputedmasks/train/tomo_5b359d_mask.npy to /kaggle/working/data/tomo_5b359d_mask.npy\n✅ Download complete: tomo_5b359d_mask.npy\nTomogram tomo_5b359d: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_5b359d, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.7109/52.3809\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.27it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.10s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.3053/60.6361\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.43it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.47it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   9%|▊         | 45/518 [14:59<3:02:32, 23.16s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0c3a99/tomo_0c3a99.npy to /kaggle/working/data/tomo_0c3a99.npy\n✅ Download complete: tomo_0c3a99\nDownloading gs://nb153/precomputedmasks/train/tomo_0c3a99_mask.npy to /kaggle/working/data/tomo_0c3a99_mask.npy\n✅ Download complete: tomo_0c3a99_mask.npy\nTomogram tomo_0c3a99: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.16it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.09s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.7305/33.6986\nLoss: 0.9966\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.31it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.3965/33.9367\nLoss: 0.9962\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.36it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.48it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9962\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   9%|▉         | 46/518 [15:13<2:40:56, 20.46s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_acadd7/tomo_acadd7.npy to /kaggle/working/data/tomo_acadd7.npy\n✅ Download complete: tomo_acadd7\nDownloading gs://nb153/precomputedmasks/train/tomo_acadd7_mask.npy to /kaggle/working/data/tomo_acadd7_mask.npy\n✅ Download complete: tomo_acadd7_mask.npy\nTomogram tomo_acadd7: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.4202/45.4287\nLoss: 0.9955\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.8379/49.1956\nLoss: 0.9956\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9955\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   9%|▉         | 47/518 [15:27<2:24:51, 18.45s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a0cb00/tomo_a0cb00.npy to /kaggle/working/data/tomo_a0cb00.npy\n✅ Download complete: tomo_a0cb00\nDownloading gs://nb153/precomputedmasks/train/tomo_a0cb00_mask.npy to /kaggle/working/data/tomo_a0cb00_mask.npy\n✅ Download complete: tomo_a0cb00_mask.npy\nTomogram tomo_a0cb00: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.3693/54.2327\nLoss: 0.9955\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.2906/40.7032\nLoss: 0.9954\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.46it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.45it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9953\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   9%|▉         | 48/518 [15:40<2:13:48, 17.08s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_93c0b4/tomo_93c0b4.npy to /kaggle/working/data/tomo_93c0b4.npy\n✅ Download complete: tomo_93c0b4\nDownloading gs://nb153/precomputedmasks/train/tomo_93c0b4_mask.npy to /kaggle/working/data/tomo_93c0b4_mask.npy\n✅ Download complete: tomo_93c0b4_mask.npy\nTomogram tomo_93c0b4: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.9294\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.4080/39.6560\nLoss: 0.9992\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.7115/39.3187\nLoss: 0.9996\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9978\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:   9%|▉         | 49/518 [15:54<2:05:53, 16.11s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2dd6bd/tomo_2dd6bd.npy to /kaggle/working/data/tomo_2dd6bd.npy\n✅ Download complete: tomo_2dd6bd\nDownloading gs://nb153/precomputedmasks/train/tomo_2dd6bd_mask.npy to /kaggle/working/data/tomo_2dd6bd_mask.npy\n✅ Download complete: tomo_2dd6bd_mask.npy\nTomogram tomo_2dd6bd: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_2dd6bd, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.8496/49.1004\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.7315/43.9590\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.52it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  10%|▉         | 50/518 [16:08<1:59:14, 15.29s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cb5ec6/tomo_cb5ec6.npy to /kaggle/working/data/tomo_cb5ec6.npy\n✅ Download complete: tomo_cb5ec6\nDownloading gs://nb153/precomputedmasks/train/tomo_cb5ec6_mask.npy to /kaggle/working/data/tomo_cb5ec6_mask.npy\n✅ Download complete: tomo_cb5ec6_mask.npy\nTomogram tomo_cb5ec6: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_cb5ec6, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.19it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.6841/32.4534\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.21it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.09s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.7992/36.3170\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.37it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.43it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.52it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  10%|▉         | 51/518 [16:41<2:41:26, 20.74s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0f9df0/tomo_0f9df0.npy to /kaggle/working/data/tomo_0f9df0.npy\n✅ Download complete: tomo_0f9df0\nDownloading gs://nb153/precomputedmasks/train/tomo_0f9df0_mask.npy to /kaggle/working/data/tomo_0f9df0_mask.npy\n✅ Download complete: tomo_0f9df0_mask.npy\nTomogram tomo_0f9df0: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.8098/37.0544\nLoss: 0.9939\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.8991/31.7729\nLoss: 0.9985\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9965\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  10%|█         | 52/518 [16:55<2:25:50, 18.78s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_84997e/tomo_84997e.npy to /kaggle/working/data/tomo_84997e.npy\n✅ Download complete: tomo_84997e\nDownloading gs://nb153/precomputedmasks/train/tomo_84997e_mask.npy to /kaggle/working/data/tomo_84997e_mask.npy\n✅ Download complete: tomo_84997e_mask.npy\nTomogram tomo_84997e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.5416/33.8165\nLoss: 0.9967\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.5256/34.3497\nLoss: 0.9942\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.49it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.52it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9956\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  10%|█         | 53/518 [17:09<2:13:39, 17.25s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_aeaf51/tomo_aeaf51.npy to /kaggle/working/data/tomo_aeaf51.npy\n✅ Download complete: tomo_aeaf51\nDownloading gs://nb153/precomputedmasks/train/tomo_aeaf51_mask.npy to /kaggle/working/data/tomo_aeaf51_mask.npy\n✅ Download complete: tomo_aeaf51_mask.npy\nTomogram tomo_aeaf51: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_aeaf51, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.9647/32.9685\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.0009/35.2596\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  10%|█         | 54/518 [17:55<3:20:13, 25.89s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a8073d/tomo_a8073d.npy to /kaggle/working/data/tomo_a8073d.npy\n✅ Download complete: tomo_a8073d\nDownloading gs://nb153/precomputedmasks/train/tomo_a8073d_mask.npy to /kaggle/working/data/tomo_a8073d_mask.npy\n✅ Download complete: tomo_a8073d_mask.npy\nTomogram tomo_a8073d: 3 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.8705/35.0975\nLoss: 0.9951\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.1773/35.8015\nLoss: 0.9944\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9958\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  11%|█         | 55/518 [18:16<3:08:59, 24.49s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_82d780/tomo_82d780.npy to /kaggle/working/data/tomo_82d780.npy\n✅ Download complete: tomo_82d780\nDownloading gs://nb153/precomputedmasks/train/tomo_82d780_mask.npy to /kaggle/working/data/tomo_82d780_mask.npy\n✅ Download complete: tomo_82d780_mask.npy\nTomogram tomo_82d780: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.2652/34.6416\nLoss: 0.9936\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.1965/34.9071\nLoss: 0.9967\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9949\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  11%|█         | 56/518 [18:30<2:44:21, 21.34s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cf5bfc/tomo_cf5bfc.npy to /kaggle/working/data/tomo_cf5bfc.npy\n✅ Download complete: tomo_cf5bfc\nDownloading gs://nb153/precomputedmasks/train/tomo_cf5bfc_mask.npy to /kaggle/working/data/tomo_cf5bfc_mask.npy\n✅ Download complete: tomo_cf5bfc_mask.npy\nTomogram tomo_cf5bfc: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_cf5bfc, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.38it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.9520/56.2491\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.6675/35.0962\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.39it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.49it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  11%|█         | 57/518 [19:05<3:14:27, 25.31s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_466489/tomo_466489.npy to /kaggle/working/data/tomo_466489.npy\n✅ Download complete: tomo_466489\nDownloading gs://nb153/precomputedmasks/train/tomo_466489_mask.npy to /kaggle/working/data/tomo_466489_mask.npy\n✅ Download complete: tomo_466489_mask.npy\nTomogram tomo_466489: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_466489, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.9778/59.7818\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.7767/61.8487\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.42it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  11%|█         | 58/518 [19:19<2:47:53, 21.90s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5308e8/tomo_5308e8.npy to /kaggle/working/data/tomo_5308e8.npy\n✅ Download complete: tomo_5308e8\nDownloading gs://nb153/precomputedmasks/train/tomo_5308e8_mask.npy to /kaggle/working/data/tomo_5308e8_mask.npy\n✅ Download complete: tomo_5308e8_mask.npy\nTomogram tomo_5308e8: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_5308e8, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.9805/70.2326\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.7421/74.1715\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.47it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  11%|█▏        | 59/518 [19:55<3:21:17, 26.31s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_fc5ae4/tomo_fc5ae4.npy to /kaggle/working/data/tomo_fc5ae4.npy\n✅ Download complete: tomo_fc5ae4\nDownloading gs://nb153/precomputedmasks/train/tomo_fc5ae4_mask.npy to /kaggle/working/data/tomo_fc5ae4_mask.npy\n✅ Download complete: tomo_fc5ae4_mask.npy\nTomogram tomo_fc5ae4: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.3682/69.7395\nLoss: 0.9971\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.7093/70.2154\nLoss: 0.9963\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9946\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  12%|█▏        | 60/518 [20:10<2:53:49, 22.77s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6f83d4/tomo_6f83d4.npy to /kaggle/working/data/tomo_6f83d4.npy\n✅ Download complete: tomo_6f83d4\nDownloading gs://nb153/precomputedmasks/train/tomo_6f83d4_mask.npy to /kaggle/working/data/tomo_6f83d4_mask.npy\n✅ Download complete: tomo_6f83d4_mask.npy\nTomogram tomo_6f83d4: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.8385/41.4808\nLoss: 0.9930\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -3.7622/58.5051\nLoss: 0.9980\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9949\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  12%|█▏        | 61/518 [20:23<2:32:25, 20.01s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6a6a3b/tomo_6a6a3b.npy to /kaggle/working/data/tomo_6a6a3b.npy\n✅ Download complete: tomo_6a6a3b\nDownloading gs://nb153/precomputedmasks/train/tomo_6a6a3b_mask.npy to /kaggle/working/data/tomo_6a6a3b_mask.npy\n✅ Download complete: tomo_6a6a3b_mask.npy\nTomogram tomo_6a6a3b: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_6a6a3b, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.3462/40.3910\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.5917/41.5962\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  12%|█▏        | 62/518 [20:56<3:01:45, 23.91s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_210371/tomo_210371.npy to /kaggle/working/data/tomo_210371.npy\n✅ Download complete: tomo_210371\nDownloading gs://nb153/precomputedmasks/train/tomo_210371_mask.npy to /kaggle/working/data/tomo_210371_mask.npy\n✅ Download complete: tomo_210371_mask.npy\nTomogram tomo_210371: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.2517/55.5698\nLoss: 0.9991\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.4039/51.7406\nLoss: 0.9988\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.47it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.46it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9974\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  12%|█▏        | 63/518 [21:10<2:38:15, 20.87s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_85fa87/tomo_85fa87.npy to /kaggle/working/data/tomo_85fa87.npy\n✅ Download complete: tomo_85fa87\nDownloading gs://nb153/precomputedmasks/train/tomo_85fa87_mask.npy to /kaggle/working/data/tomo_85fa87_mask.npy\n✅ Download complete: tomo_85fa87_mask.npy\nTomogram tomo_85fa87: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.40it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.1233/35.9578\nLoss: 0.9984\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.9434/42.0604\nLoss: 0.9972\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9959\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  12%|█▏        | 64/518 [21:24<2:21:12, 18.66s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c4a4bb/tomo_c4a4bb.npy to /kaggle/working/data/tomo_c4a4bb.npy\n✅ Download complete: tomo_c4a4bb\nDownloading gs://nb153/precomputedmasks/train/tomo_c4a4bb_mask.npy to /kaggle/working/data/tomo_c4a4bb_mask.npy\n✅ Download complete: tomo_c4a4bb_mask.npy\nTomogram tomo_c4a4bb: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.7670/42.2985\nLoss: 0.9965\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.0981/44.5116\nLoss: 0.9970\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.52it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9948\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  13%|█▎        | 65/518 [21:38<2:09:59, 17.22s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6e196d/tomo_6e196d.npy to /kaggle/working/data/tomo_6e196d.npy\n✅ Download complete: tomo_6e196d\nDownloading gs://nb153/precomputedmasks/train/tomo_6e196d_mask.npy to /kaggle/working/data/tomo_6e196d_mask.npy\n✅ Download complete: tomo_6e196d_mask.npy\nTomogram tomo_6e196d: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_6e196d, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.35it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.4023/54.1346\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.0667/71.1338\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  13%|█▎        | 66/518 [22:15<2:54:55, 23.22s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a37a5c/tomo_a37a5c.npy to /kaggle/working/data/tomo_a37a5c.npy\n✅ Download complete: tomo_a37a5c\nDownloading gs://nb153/precomputedmasks/train/tomo_a37a5c_mask.npy to /kaggle/working/data/tomo_a37a5c_mask.npy\n✅ Download complete: tomo_a37a5c_mask.npy\nTomogram tomo_a37a5c: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.6045/61.0705\nLoss: 0.9942\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.2083/67.7497\nLoss: 0.9958\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9946\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  13%|█▎        | 67/518 [22:28<2:32:42, 20.32s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ff505c/tomo_ff505c.npy to /kaggle/working/data/tomo_ff505c.npy\n✅ Download complete: tomo_ff505c\nDownloading gs://nb153/precomputedmasks/train/tomo_ff505c_mask.npy to /kaggle/working/data/tomo_ff505c_mask.npy\n✅ Download complete: tomo_ff505c_mask.npy\nTomogram tomo_ff505c: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.5599/64.5361\nLoss: 0.9968\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.7624/64.2632\nLoss: 0.9942\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9939\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  13%|█▎        | 68/518 [22:42<2:17:44, 18.37s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_774aae/tomo_774aae.npy to /kaggle/working/data/tomo_774aae.npy\n✅ Download complete: tomo_774aae\nDownloading gs://nb153/precomputedmasks/train/tomo_774aae_mask.npy to /kaggle/working/data/tomo_774aae_mask.npy\n✅ Download complete: tomo_774aae_mask.npy\nTomogram tomo_774aae: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_774aae, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.6977/46.8447\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.6663/67.1166\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  13%|█▎        | 69/518 [23:17<2:54:39, 23.34s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_57592d/tomo_57592d.npy to /kaggle/working/data/tomo_57592d.npy\n✅ Download complete: tomo_57592d\nDownloading gs://nb153/precomputedmasks/train/tomo_57592d_mask.npy to /kaggle/working/data/tomo_57592d_mask.npy\n✅ Download complete: tomo_57592d_mask.npy\nTomogram tomo_57592d: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.2521/86.0613\nLoss: 0.9938\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.7795/74.7207\nLoss: 0.9978\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9932\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  14%|█▎        | 70/518 [23:31<2:32:22, 20.41s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_136c8d/tomo_136c8d.npy to /kaggle/working/data/tomo_136c8d.npy\n✅ Download complete: tomo_136c8d\nDownloading gs://nb153/precomputedmasks/train/tomo_136c8d_mask.npy to /kaggle/working/data/tomo_136c8d_mask.npy\n✅ Download complete: tomo_136c8d_mask.npy\nTomogram tomo_136c8d: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_136c8d, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.3707/127.9888\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.1504/165.0275\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  14%|█▎        | 71/518 [23:52<2:33:22, 20.59s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_9fc2b6/tomo_9fc2b6.npy to /kaggle/working/data/tomo_9fc2b6.npy\n✅ Download complete: tomo_9fc2b6\nDownloading gs://nb153/precomputedmasks/train/tomo_9fc2b6_mask.npy to /kaggle/working/data/tomo_9fc2b6_mask.npy\n✅ Download complete: tomo_9fc2b6_mask.npy\nTomogram tomo_9fc2b6: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.4440/129.8235\nLoss: 0.9910\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.70it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.9240/112.0996\nLoss: 0.9955\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9926\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  14%|█▍        | 72/518 [24:06<2:18:55, 18.69s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2645a0/tomo_2645a0.npy to /kaggle/working/data/tomo_2645a0.npy\n✅ Download complete: tomo_2645a0\nDownloading gs://nb153/precomputedmasks/train/tomo_2645a0_mask.npy to /kaggle/working/data/tomo_2645a0_mask.npy\n✅ Download complete: tomo_2645a0_mask.npy\nTomogram tomo_2645a0: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_2645a0, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.3236/142.9199\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.1456/102.3788\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.50it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  14%|█▍        | 73/518 [24:20<2:08:21, 17.31s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c84b8e/tomo_c84b8e.npy to /kaggle/working/data/tomo_c84b8e.npy\n✅ Download complete: tomo_c84b8e\nDownloading gs://nb153/precomputedmasks/train/tomo_c84b8e_mask.npy to /kaggle/working/data/tomo_c84b8e_mask.npy\n✅ Download complete: tomo_c84b8e_mask.npy\nTomogram tomo_c84b8e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -5.1344/97.6902\nLoss: 0.9997\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -4.8074/116.2316\nLoss: 0.9993\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9995\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  14%|█▍        | 74/518 [24:35<2:02:45, 16.59s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_67ff4e/tomo_67ff4e.npy to /kaggle/working/data/tomo_67ff4e.npy\n✅ Download complete: tomo_67ff4e\nDownloading gs://nb153/precomputedmasks/train/tomo_67ff4e_mask.npy to /kaggle/working/data/tomo_67ff4e_mask.npy\n✅ Download complete: tomo_67ff4e_mask.npy\nTomogram tomo_67ff4e: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_67ff4e, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.31it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.9471/72.5281\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.1398/82.4051\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.40it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.52it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.51it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  14%|█▍        | 75/518 [25:23<3:12:20, 26.05s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_746d88/tomo_746d88.npy to /kaggle/working/data/tomo_746d88.npy\n✅ Download complete: tomo_746d88\nDownloading gs://nb153/precomputedmasks/train/tomo_746d88_mask.npy to /kaggle/working/data/tomo_746d88_mask.npy\n✅ Download complete: tomo_746d88_mask.npy\nTomogram tomo_746d88: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_746d88, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.0737/115.1453\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.2778/97.5849\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.36it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.37it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.38it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.38it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.49it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.45it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  15%|█▍        | 76/518 [25:55<3:24:34, 27.77s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_f1bf2f/tomo_f1bf2f.npy to /kaggle/working/data/tomo_f1bf2f.npy\n✅ Download complete: tomo_f1bf2f\nDownloading gs://nb153/precomputedmasks/train/tomo_f1bf2f_mask.npy to /kaggle/working/data/tomo_f1bf2f_mask.npy\n✅ Download complete: tomo_f1bf2f_mask.npy\nTomogram tomo_f1bf2f: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_f1bf2f, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.6625/76.1694\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.1100/121.3842\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  15%|█▍        | 77/518 [26:29<3:39:16, 29.83s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b50c0f/tomo_b50c0f.npy to /kaggle/working/data/tomo_b50c0f.npy\n✅ Download complete: tomo_b50c0f\nDownloading gs://nb153/precomputedmasks/train/tomo_b50c0f_mask.npy to /kaggle/working/data/tomo_b50c0f_mask.npy\n✅ Download complete: tomo_b50c0f_mask.npy\nTomogram tomo_b50c0f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.8035/120.9585\nLoss: 0.9966\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.2305/121.0720\nLoss: 0.9962\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9949\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  15%|█▌        | 78/518 [26:43<3:02:26, 24.88s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ba37ec/tomo_ba37ec.npy to /kaggle/working/data/tomo_ba37ec.npy\n✅ Download complete: tomo_ba37ec\nDownloading gs://nb153/precomputedmasks/train/tomo_ba37ec_mask.npy to /kaggle/working/data/tomo_ba37ec_mask.npy\n✅ Download complete: tomo_ba37ec_mask.npy\nTomogram tomo_ba37ec: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.4544/91.0687\nLoss: 0.9902\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.2509/85.7760\nLoss: 0.9950\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9928\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  15%|█▌        | 79/518 [26:57<2:37:44, 21.56s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ede779/tomo_ede779.npy to /kaggle/working/data/tomo_ede779.npy\n✅ Download complete: tomo_ede779\nDownloading gs://nb153/precomputedmasks/train/tomo_ede779_mask.npy to /kaggle/working/data/tomo_ede779_mask.npy\n✅ Download complete: tomo_ede779_mask.npy\nTomogram tomo_ede779: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.3219/76.6644\nLoss: 0.9931\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.0723/80.1622\nLoss: 0.9922\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.50it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.48it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9923\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  15%|█▌        | 80/518 [27:10<2:20:04, 19.19s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_385eb6/tomo_385eb6.npy to /kaggle/working/data/tomo_385eb6.npy\n✅ Download complete: tomo_385eb6\nDownloading gs://nb153/precomputedmasks/train/tomo_385eb6_mask.npy to /kaggle/working/data/tomo_385eb6_mask.npy\n✅ Download complete: tomo_385eb6_mask.npy\nTomogram tomo_385eb6: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_385eb6, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.6160/87.6553\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.2466/79.3167\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  16%|█▌        | 81/518 [27:24<2:07:22, 17.49s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_8e90f9/tomo_8e90f9.npy to /kaggle/working/data/tomo_8e90f9.npy\n✅ Download complete: tomo_8e90f9\nDownloading gs://nb153/precomputedmasks/train/tomo_8e90f9_mask.npy to /kaggle/working/data/tomo_8e90f9_mask.npy\n✅ Download complete: tomo_8e90f9_mask.npy\nTomogram tomo_8e90f9: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.7824/97.3639\nLoss: 0.9939\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.2562/110.0918\nLoss: 0.9968\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9929\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  16%|█▌        | 82/518 [27:38<1:58:57, 16.37s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_651ecd/tomo_651ecd.npy to /kaggle/working/data/tomo_651ecd.npy\n✅ Download complete: tomo_651ecd\nDownloading gs://nb153/precomputedmasks/train/tomo_651ecd_mask.npy to /kaggle/working/data/tomo_651ecd_mask.npy\n✅ Download complete: tomo_651ecd_mask.npy\nTomogram tomo_651ecd: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.7049/110.3471\nLoss: 0.9960\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.4260/106.5982\nLoss: 0.9952\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9945\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  16%|█▌        | 83/518 [27:51<1:52:51, 15.57s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_9722d1/tomo_9722d1.npy to /kaggle/working/data/tomo_9722d1.npy\n✅ Download complete: tomo_9722d1\nDownloading gs://nb153/precomputedmasks/train/tomo_9722d1_mask.npy to /kaggle/working/data/tomo_9722d1_mask.npy\n✅ Download complete: tomo_9722d1_mask.npy\nTomogram tomo_9722d1: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.3158/86.8537\nLoss: 0.9890\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -6.0178/82.4546\nLoss: 0.9852\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.70it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9858\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  16%|█▌        | 84/518 [28:21<2:22:38, 19.72s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_7b1ee3/tomo_7b1ee3.npy to /kaggle/working/data/tomo_7b1ee3.npy\n✅ Download complete: tomo_7b1ee3\nDownloading gs://nb153/precomputedmasks/train/tomo_7b1ee3_mask.npy to /kaggle/working/data/tomo_7b1ee3_mask.npy\n✅ Download complete: tomo_7b1ee3_mask.npy\nTomogram tomo_7b1ee3: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.5522/102.6148\nLoss: 0.9960\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.1081/104.2467\nLoss: 0.9967\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9919\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  16%|█▋        | 85/518 [28:34<2:09:04, 17.89s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_033ebe/tomo_033ebe.npy to /kaggle/working/data/tomo_033ebe.npy\n✅ Download complete: tomo_033ebe\nDownloading gs://nb153/precomputedmasks/train/tomo_033ebe_mask.npy to /kaggle/working/data/tomo_033ebe_mask.npy\n✅ Download complete: tomo_033ebe_mask.npy\nTomogram tomo_033ebe: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.4242/164.9392\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.2969/130.4973\nLoss: 0.9925\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.49it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.54it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9923\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  17%|█▋        | 86/518 [28:48<1:59:20, 16.58s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c7a40f/tomo_c7a40f.npy to /kaggle/working/data/tomo_c7a40f.npy\n✅ Download complete: tomo_c7a40f\nDownloading gs://nb153/precomputedmasks/train/tomo_c7a40f_mask.npy to /kaggle/working/data/tomo_c7a40f_mask.npy\n✅ Download complete: tomo_c7a40f_mask.npy\nTomogram tomo_c7a40f: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_c7a40f, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.0115/163.6749\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.8911/149.8433\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.57it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  17%|█▋        | 87/518 [29:27<2:48:24, 23.44s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c13fbf/tomo_c13fbf.npy to /kaggle/working/data/tomo_c13fbf.npy\n✅ Download complete: tomo_c13fbf\nDownloading gs://nb153/precomputedmasks/train/tomo_c13fbf_mask.npy to /kaggle/working/data/tomo_c13fbf_mask.npy\n✅ Download complete: tomo_c13fbf_mask.npy\nTomogram tomo_c13fbf: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_c13fbf, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -10.4198/112.7839\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -10.8005/172.3318\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  17%|█▋        | 88/518 [29:47<2:41:08, 22.49s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_dfc627/tomo_dfc627.npy to /kaggle/working/data/tomo_dfc627.npy\n✅ Download complete: tomo_dfc627\nDownloading gs://nb153/precomputedmasks/train/tomo_dfc627_mask.npy to /kaggle/working/data/tomo_dfc627_mask.npy\n✅ Download complete: tomo_dfc627_mask.npy\nTomogram tomo_dfc627: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.7528/98.8186\nLoss: 0.9940\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.7443/100.9206\nLoss: 0.9911\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9910\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  17%|█▋        | 89/518 [30:01<2:21:58, 19.86s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_01a877/tomo_01a877.npy to /kaggle/working/data/tomo_01a877.npy\n✅ Download complete: tomo_01a877\nDownloading gs://nb153/precomputedmasks/train/tomo_01a877_mask.npy to /kaggle/working/data/tomo_01a877_mask.npy\n✅ Download complete: tomo_01a877_mask.npy\nTomogram tomo_01a877: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.4157/137.5309\nLoss: 0.9944\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.9475/136.6428\nLoss: 0.9949\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.50it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.49it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.50it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9939\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  17%|█▋        | 90/518 [30:15<2:08:09, 17.97s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_aaa1fd/tomo_aaa1fd.npy to /kaggle/working/data/tomo_aaa1fd.npy\n✅ Download complete: tomo_aaa1fd\nDownloading gs://nb153/precomputedmasks/train/tomo_aaa1fd_mask.npy to /kaggle/working/data/tomo_aaa1fd_mask.npy\n✅ Download complete: tomo_aaa1fd_mask.npy\nTomogram tomo_aaa1fd: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_aaa1fd, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.6248/101.9610\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.4053/129.2800\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.48it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.47it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  18%|█▊        | 91/518 [30:28<1:58:46, 16.69s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_24fda8/tomo_24fda8.npy to /kaggle/working/data/tomo_24fda8.npy\n✅ Download complete: tomo_24fda8\nDownloading gs://nb153/precomputedmasks/train/tomo_24fda8_mask.npy to /kaggle/working/data/tomo_24fda8_mask.npy\n✅ Download complete: tomo_24fda8_mask.npy\nTomogram tomo_24fda8: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_24fda8, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.25it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.8775/239.2666\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.33it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.9509/224.6938\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.50it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  18%|█▊        | 92/518 [30:42<1:52:37, 15.86s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_7dcfb8/tomo_7dcfb8.npy to /kaggle/working/data/tomo_7dcfb8.npy\n✅ Download complete: tomo_7dcfb8\nDownloading gs://nb153/precomputedmasks/train/tomo_7dcfb8_mask.npy to /kaggle/working/data/tomo_7dcfb8_mask.npy\n✅ Download complete: tomo_7dcfb8_mask.npy\nTomogram tomo_7dcfb8: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_7dcfb8, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.3540/183.0413\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.2922/191.5621\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  18%|█▊        | 93/518 [30:56<1:47:22, 15.16s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cad74b/tomo_cad74b.npy to /kaggle/working/data/tomo_cad74b.npy\n✅ Download complete: tomo_cad74b\nDownloading gs://nb153/precomputedmasks/train/tomo_cad74b_mask.npy to /kaggle/working/data/tomo_cad74b_mask.npy\n✅ Download complete: tomo_cad74b_mask.npy\nTomogram tomo_cad74b: 3 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.1873/172.9053\nLoss: 0.9996\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -7.4238/176.5135\nLoss: 0.9997\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.57it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9984\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  18%|█▊        | 94/518 [31:17<1:58:40, 16.79s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0eb41e/tomo_0eb41e.npy to /kaggle/working/data/tomo_0eb41e.npy\n✅ Download complete: tomo_0eb41e\nDownloading gs://nb153/precomputedmasks/train/tomo_0eb41e_mask.npy to /kaggle/working/data/tomo_0eb41e_mask.npy\n✅ Download complete: tomo_0eb41e_mask.npy\nTomogram tomo_0eb41e: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_0eb41e, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.40it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.1732/256.4198\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.1326/251.3835\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  18%|█▊        | 95/518 [31:30<1:51:50, 15.86s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_db4517/tomo_db4517.npy to /kaggle/working/data/tomo_db4517.npy\n✅ Download complete: tomo_db4517\nDownloading gs://nb153/precomputedmasks/train/tomo_db4517_mask.npy to /kaggle/working/data/tomo_db4517_mask.npy\n✅ Download complete: tomo_db4517_mask.npy\nTomogram tomo_db4517: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.8734/188.4617\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.7680/168.3584\nLoss: 0.9955\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.48it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.51it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9954\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  19%|█▊        | 96/518 [31:44<1:46:48, 15.19s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5b8db4/tomo_5b8db4.npy to /kaggle/working/data/tomo_5b8db4.npy\n✅ Download complete: tomo_5b8db4\nDownloading gs://nb153/precomputedmasks/train/tomo_5b8db4_mask.npy to /kaggle/working/data/tomo_5b8db4_mask.npy\n✅ Download complete: tomo_5b8db4_mask.npy\nTomogram tomo_5b8db4: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_5b8db4, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.30it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.9391/216.7613\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.5641/224.3179\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  19%|█▊        | 97/518 [32:18<2:26:59, 20.95s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_9f424e/tomo_9f424e.npy to /kaggle/working/data/tomo_9f424e.npy\n✅ Download complete: tomo_9f424e\nDownloading gs://nb153/precomputedmasks/train/tomo_9f424e_mask.npy to /kaggle/working/data/tomo_9f424e_mask.npy\n✅ Download complete: tomo_9f424e_mask.npy\nTomogram tomo_9f424e: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_9f424e, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.1069/99.7915\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.68it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.9012/99.6904\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  19%|█▉        | 98/518 [32:51<2:50:50, 24.41s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_881d84/tomo_881d84.npy to /kaggle/working/data/tomo_881d84.npy\n✅ Download complete: tomo_881d84\nDownloading gs://nb153/precomputedmasks/train/tomo_881d84_mask.npy to /kaggle/working/data/tomo_881d84_mask.npy\n✅ Download complete: tomo_881d84_mask.npy\nTomogram tomo_881d84: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.7812/105.8126\nLoss: 0.9894\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.0791/144.1151\nLoss: 0.9966\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.49it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.47it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9922\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  19%|█▉        | 99/518 [33:04<2:27:59, 21.19s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_be9b98/tomo_be9b98.npy to /kaggle/working/data/tomo_be9b98.npy\n✅ Download complete: tomo_be9b98\nDownloading gs://nb153/precomputedmasks/train/tomo_be9b98_mask.npy to /kaggle/working/data/tomo_be9b98_mask.npy\n✅ Download complete: tomo_be9b98_mask.npy\nTomogram tomo_be9b98: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_be9b98, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.1835/163.9842\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.69it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.6259/194.2901\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  19%|█▉        | 100/518 [33:37<2:51:42, 24.65s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e2ccab/tomo_e2ccab.npy to /kaggle/working/data/tomo_e2ccab.npy\n✅ Download complete: tomo_e2ccab\nDownloading gs://nb153/precomputedmasks/train/tomo_e2ccab_mask.npy to /kaggle/working/data/tomo_e2ccab_mask.npy\n✅ Download complete: tomo_e2ccab_mask.npy\nTomogram tomo_e2ccab: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.8659/174.9438\nLoss: 0.9969\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.7630/140.4430\nLoss: 0.9973\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.52it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.51it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9939\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  19%|█▉        | 101/518 [33:50<2:27:37, 21.24s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b4a1f0/tomo_b4a1f0.npy to /kaggle/working/data/tomo_b4a1f0.npy\n✅ Download complete: tomo_b4a1f0\nDownloading gs://nb153/precomputedmasks/train/tomo_b4a1f0_mask.npy to /kaggle/working/data/tomo_b4a1f0_mask.npy\n✅ Download complete: tomo_b4a1f0_mask.npy\nTomogram tomo_b4a1f0: 4 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.0333/95.8930\nLoss: 0.9828\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -10.2696/120.0585\nLoss: 0.9941\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9774\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  20%|█▉        | 102/518 [34:11<2:25:49, 21.03s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e61cdf/tomo_e61cdf.npy to /kaggle/working/data/tomo_e61cdf.npy\n✅ Download complete: tomo_e61cdf\nDownloading gs://nb153/precomputedmasks/train/tomo_e61cdf_mask.npy to /kaggle/working/data/tomo_e61cdf_mask.npy\n✅ Download complete: tomo_e61cdf_mask.npy\nTomogram tomo_e61cdf: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -10.8563/153.5021\nLoss: 0.9929\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.4159/84.2687\nLoss: 0.9879\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.69it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9902\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  20%|█▉        | 103/518 [34:24<2:09:47, 18.76s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b7d94c/tomo_b7d94c.npy to /kaggle/working/data/tomo_b7d94c.npy\n✅ Download complete: tomo_b7d94c\nDownloading gs://nb153/precomputedmasks/train/tomo_b7d94c_mask.npy to /kaggle/working/data/tomo_b7d94c_mask.npy\n✅ Download complete: tomo_b7d94c_mask.npy\nTomogram tomo_b7d94c: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.0196/176.8073\nLoss: 0.9911\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.1164/155.2336\nLoss: 0.9932\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9922\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  20%|██        | 104/518 [34:38<1:58:53, 17.23s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_d56709/tomo_d56709.npy to /kaggle/working/data/tomo_d56709.npy\n✅ Download complete: tomo_d56709\nDownloading gs://nb153/precomputedmasks/train/tomo_d56709_mask.npy to /kaggle/working/data/tomo_d56709_mask.npy\n✅ Download complete: tomo_d56709_mask.npy\nTomogram tomo_d56709: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.8217/114.8997\nLoss: 0.9885\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.8094/113.6159\nLoss: 0.9954\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.50it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9846\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  20%|██        | 105/518 [34:58<2:04:20, 18.06s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_d84544/tomo_d84544.npy to /kaggle/working/data/tomo_d84544.npy\n✅ Download complete: tomo_d84544\nDownloading gs://nb153/precomputedmasks/train/tomo_d84544_mask.npy to /kaggle/working/data/tomo_d84544_mask.npy\n✅ Download complete: tomo_d84544_mask.npy\nTomogram tomo_d84544: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.8375/179.9937\nLoss: 0.9939\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.6041/153.8195\nLoss: 0.9879\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9905\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  20%|██        | 106/518 [35:12<1:54:44, 16.71s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ab30af/tomo_ab30af.npy to /kaggle/working/data/tomo_ab30af.npy\n✅ Download complete: tomo_ab30af\nDownloading gs://nb153/precomputedmasks/train/tomo_ab30af_mask.npy to /kaggle/working/data/tomo_ab30af_mask.npy\n✅ Download complete: tomo_ab30af_mask.npy\nTomogram tomo_ab30af: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_ab30af, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.35it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.5125/318.7537\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.0457/318.4611\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  21%|██        | 107/518 [35:48<2:34:45, 22.59s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2a6091/tomo_2a6091.npy to /kaggle/working/data/tomo_2a6091.npy\n✅ Download complete: tomo_2a6091\nDownloading gs://nb153/precomputedmasks/train/tomo_2a6091_mask.npy to /kaggle/working/data/tomo_2a6091_mask.npy\n✅ Download complete: tomo_2a6091_mask.npy\nTomogram tomo_2a6091: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.1949/208.3158\nLoss: 0.9948\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.4311/325.7898\nLoss: 0.9960\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.48it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.45it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.50it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9900\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  21%|██        | 108/518 [36:01<2:15:46, 19.87s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_25780f/tomo_25780f.npy to /kaggle/working/data/tomo_25780f.npy\n✅ Download complete: tomo_25780f\nDownloading gs://nb153/precomputedmasks/train/tomo_25780f_mask.npy to /kaggle/working/data/tomo_25780f_mask.npy\n✅ Download complete: tomo_25780f_mask.npy\nTomogram tomo_25780f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.41it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.0623/166.4623\nLoss: 0.9973\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.9548/201.0439\nLoss: 0.9977\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.46it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.51it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9926\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  21%|██        | 109/518 [36:15<2:03:01, 18.05s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ef1a1a/tomo_ef1a1a.npy to /kaggle/working/data/tomo_ef1a1a.npy\n✅ Download complete: tomo_ef1a1a\nDownloading gs://nb153/precomputedmasks/train/tomo_ef1a1a_mask.npy to /kaggle/working/data/tomo_ef1a1a_mask.npy\n✅ Download complete: tomo_ef1a1a_mask.npy\nTomogram tomo_ef1a1a: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_ef1a1a, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.6168/358.4974\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.6138/255.0961\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.69it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  21%|██        | 110/518 [36:29<1:54:02, 16.77s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_dd36c9/tomo_dd36c9.npy to /kaggle/working/data/tomo_dd36c9.npy\n✅ Download complete: tomo_dd36c9\nDownloading gs://nb153/precomputedmasks/train/tomo_dd36c9_mask.npy to /kaggle/working/data/tomo_dd36c9_mask.npy\n✅ Download complete: tomo_dd36c9_mask.npy\nTomogram tomo_dd36c9: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_dd36c9, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -30.2402/413.8758\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -33.7489/322.5233\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  21%|██▏       | 111/518 [36:50<2:01:54, 17.97s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_05b39c/tomo_05b39c.npy to /kaggle/working/data/tomo_05b39c.npy\n✅ Download complete: tomo_05b39c\nDownloading gs://nb153/precomputedmasks/train/tomo_05b39c_mask.npy to /kaggle/working/data/tomo_05b39c_mask.npy\n✅ Download complete: tomo_05b39c_mask.npy\nTomogram tomo_05b39c: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_05b39c, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.33it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -37.9412/232.1164\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -36.4678/237.8363\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  22%|██▏       | 112/518 [37:26<2:38:38, 23.44s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2483bb/tomo_2483bb.npy to /kaggle/working/data/tomo_2483bb.npy\n✅ Download complete: tomo_2483bb\nDownloading gs://nb153/precomputedmasks/train/tomo_2483bb_mask.npy to /kaggle/working/data/tomo_2483bb_mask.npy\n✅ Download complete: tomo_2483bb_mask.npy\nTomogram tomo_2483bb: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -38.9395/307.8149\nLoss: 0.9982\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -23.0545/427.6490\nLoss: 0.9959\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.51it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.49it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.45it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.39it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.43it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.47it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9896\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  22%|██▏       | 113/518 [37:40<2:18:50, 20.57s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_305c97/tomo_305c97.npy to /kaggle/working/data/tomo_305c97.npy\n✅ Download complete: tomo_305c97\nDownloading gs://nb153/precomputedmasks/train/tomo_305c97_mask.npy to /kaggle/working/data/tomo_305c97_mask.npy\n✅ Download complete: tomo_305c97_mask.npy\nTomogram tomo_305c97: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.2514/190.0719\nLoss: 0.9932\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.7032/152.8661\nLoss: 0.9894\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9904\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  22%|██▏       | 114/518 [37:54<2:04:50, 18.54s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_bc143f/tomo_bc143f.npy to /kaggle/working/data/tomo_bc143f.npy\n✅ Download complete: tomo_bc143f\nDownloading gs://nb153/precomputedmasks/train/tomo_bc143f_mask.npy to /kaggle/working/data/tomo_bc143f_mask.npy\n✅ Download complete: tomo_bc143f_mask.npy\nTomogram tomo_bc143f: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_bc143f, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.3552/150.9722\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.4149/169.1833\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  22%|██▏       | 115/518 [38:14<2:08:50, 19.18s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_fc3c39/tomo_fc3c39.npy to /kaggle/working/data/tomo_fc3c39.npy\n✅ Download complete: tomo_fc3c39\nDownloading gs://nb153/precomputedmasks/train/tomo_fc3c39_mask.npy to /kaggle/working/data/tomo_fc3c39_mask.npy\n✅ Download complete: tomo_fc3c39_mask.npy\nTomogram tomo_fc3c39: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -9.3011/268.2155\nLoss: 0.9872\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -8.8910/176.6258\nLoss: 0.9823\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.52it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9857\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  22%|██▏       | 116/518 [38:28<1:57:10, 17.49s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_d96d6e/tomo_d96d6e.npy to /kaggle/working/data/tomo_d96d6e.npy\n✅ Download complete: tomo_d96d6e\nDownloading gs://nb153/precomputedmasks/train/tomo_d96d6e_mask.npy to /kaggle/working/data/tomo_d96d6e_mask.npy\n✅ Download complete: tomo_d96d6e_mask.npy\nTomogram tomo_d96d6e: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_d96d6e, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.41it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.2255/235.4701\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.1885/218.5329\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.54it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  23%|██▎       | 117/518 [39:04<2:34:17, 23.09s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b03f81/tomo_b03f81.npy to /kaggle/working/data/tomo_b03f81.npy\n✅ Download complete: tomo_b03f81\nDownloading gs://nb153/precomputedmasks/train/tomo_b03f81_mask.npy to /kaggle/working/data/tomo_b03f81_mask.npy\n✅ Download complete: tomo_b03f81_mask.npy\nTomogram tomo_b03f81: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.38it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -30.3453/267.3056\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.40it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.8624/215.3648\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.40it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.41it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9999\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  23%|██▎       | 118/518 [39:18<2:15:12, 20.28s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2fb12d/tomo_2fb12d.npy to /kaggle/working/data/tomo_2fb12d.npy\n✅ Download complete: tomo_2fb12d\nDownloading gs://nb153/precomputedmasks/train/tomo_2fb12d_mask.npy to /kaggle/working/data/tomo_2fb12d_mask.npy\n✅ Download complete: tomo_2fb12d_mask.npy\nTomogram tomo_2fb12d: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_2fb12d, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.4170/292.2578\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -27.1506/213.0575\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  23%|██▎       | 119/518 [39:32<2:02:07, 18.36s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_9c0253/tomo_9c0253.npy to /kaggle/working/data/tomo_9c0253.npy\n✅ Download complete: tomo_9c0253\nDownloading gs://nb153/precomputedmasks/train/tomo_9c0253_mask.npy to /kaggle/working/data/tomo_9c0253_mask.npy\n✅ Download complete: tomo_9c0253_mask.npy\nTomogram tomo_9c0253: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.34it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.0604/237.0479\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.3916/232.0060\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  23%|██▎       | 120/518 [39:46<1:53:17, 17.08s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a2bf30/tomo_a2bf30.npy to /kaggle/working/data/tomo_a2bf30.npy\n✅ Download complete: tomo_a2bf30\nDownloading gs://nb153/precomputedmasks/train/tomo_a2bf30_mask.npy to /kaggle/working/data/tomo_a2bf30_mask.npy\n✅ Download complete: tomo_a2bf30_mask.npy\nTomogram tomo_a2bf30: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.69it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -24.5155/287.0309\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.4706/299.4302\nLoss: 0.9990\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9976\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  23%|██▎       | 121/518 [39:59<1:46:05, 16.03s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_754447/tomo_754447.npy to /kaggle/working/data/tomo_754447.npy\n✅ Download complete: tomo_754447\nDownloading gs://nb153/precomputedmasks/train/tomo_754447_mask.npy to /kaggle/working/data/tomo_754447_mask.npy\n✅ Download complete: tomo_754447_mask.npy\nTomogram tomo_754447: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -24.0052/173.7057\nLoss: 0.9892\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -27.2890/247.6523\nLoss: 0.9904\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9909\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  24%|██▎       | 122/518 [40:20<1:55:19, 17.47s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_78b03d/tomo_78b03d.npy to /kaggle/working/data/tomo_78b03d.npy\n✅ Download complete: tomo_78b03d\nDownloading gs://nb153/precomputedmasks/train/tomo_78b03d_mask.npy to /kaggle/working/data/tomo_78b03d_mask.npy\n✅ Download complete: tomo_78b03d_mask.npy\nTomogram tomo_78b03d: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_78b03d, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -29.6037/225.4003\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -30.2038/185.8103\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  24%|██▎       | 123/518 [40:34<1:47:08, 16.27s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_49f4ee/tomo_49f4ee.npy to /kaggle/working/data/tomo_49f4ee.npy\n✅ Download complete: tomo_49f4ee\nDownloading gs://nb153/precomputedmasks/train/tomo_49f4ee_mask.npy to /kaggle/working/data/tomo_49f4ee_mask.npy\n✅ Download complete: tomo_49f4ee_mask.npy\nTomogram tomo_49f4ee: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -23.0414/295.5116\nLoss: 0.9982\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -32.6992/301.0784\nLoss: 0.9990\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9970\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  24%|██▍       | 124/518 [40:47<1:41:39, 15.48s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5d798e/tomo_5d798e.npy to /kaggle/working/data/tomo_5d798e.npy\n✅ Download complete: tomo_5d798e\nDownloading gs://nb153/precomputedmasks/train/tomo_5d798e_mask.npy to /kaggle/working/data/tomo_5d798e_mask.npy\n✅ Download complete: tomo_5d798e_mask.npy\nTomogram tomo_5d798e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.38it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -33.3230/183.2160\nLoss: 0.9953\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -31.0067/146.0961\nLoss: 0.9967\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9967\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  24%|██▍       | 125/518 [41:01<1:38:17, 15.01s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_f871ad/tomo_f871ad.npy to /kaggle/working/data/tomo_f871ad.npy\n✅ Download complete: tomo_f871ad\nDownloading gs://nb153/precomputedmasks/train/tomo_f871ad_mask.npy to /kaggle/working/data/tomo_f871ad_mask.npy\n✅ Download complete: tomo_f871ad_mask.npy\nTomogram tomo_f871ad: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -32.3748/186.0625\nLoss: 0.9981\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -32.9787/168.8976\nLoss: 0.9984\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.69it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.73it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.70it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9970\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  24%|██▍       | 126/518 [41:16<1:36:44, 14.81s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_516cdd/tomo_516cdd.npy to /kaggle/working/data/tomo_516cdd.npy\n✅ Download complete: tomo_516cdd\nDownloading gs://nb153/precomputedmasks/train/tomo_516cdd_mask.npy to /kaggle/working/data/tomo_516cdd_mask.npy\n✅ Download complete: tomo_516cdd_mask.npy\nTomogram tomo_516cdd: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -33.4924/220.2675\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -37.6461/170.0583\nLoss: 0.9949\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9942\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  25%|██▍       | 127/518 [41:29<1:34:05, 14.44s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6acb9e/tomo_6acb9e.npy to /kaggle/working/data/tomo_6acb9e.npy\n✅ Download complete: tomo_6acb9e\nDownloading gs://nb153/precomputedmasks/train/tomo_6acb9e_mask.npy to /kaggle/working/data/tomo_6acb9e_mask.npy\n✅ Download complete: tomo_6acb9e_mask.npy\nTomogram tomo_6acb9e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.27it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -32.9065/136.6283\nLoss: 0.9971\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -34.0401/149.5501\nLoss: 0.9971\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.44it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.49it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9955\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  25%|██▍       | 128/518 [41:43<1:33:00, 14.31s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_172f08/tomo_172f08.npy to /kaggle/working/data/tomo_172f08.npy\n✅ Download complete: tomo_172f08\nDownloading gs://nb153/precomputedmasks/train/tomo_172f08_mask.npy to /kaggle/working/data/tomo_172f08_mask.npy\n✅ Download complete: tomo_172f08_mask.npy\nTomogram tomo_172f08: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_172f08, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -64.0867/270.5371\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -43.2615/312.0229\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  25%|██▍       | 129/518 [42:20<2:17:18, 21.18s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0a8f05/tomo_0a8f05.npy to /kaggle/working/data/tomo_0a8f05.npy\n✅ Download complete: tomo_0a8f05\nDownloading gs://nb153/precomputedmasks/train/tomo_0a8f05_mask.npy to /kaggle/working/data/tomo_0a8f05_mask.npy\n✅ Download complete: tomo_0a8f05_mask.npy\nTomogram tomo_0a8f05: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -37.2206/189.1747\nLoss: 0.9972\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -35.5832/210.6568\nLoss: 0.9985\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.51it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9968\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  25%|██▌       | 130/518 [42:34<2:02:14, 18.90s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_69d7c9/tomo_69d7c9.npy to /kaggle/working/data/tomo_69d7c9.npy\n✅ Download complete: tomo_69d7c9\nDownloading gs://nb153/precomputedmasks/train/tomo_69d7c9_mask.npy to /kaggle/working/data/tomo_69d7c9_mask.npy\n✅ Download complete: tomo_69d7c9_mask.npy\nTomogram tomo_69d7c9: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_69d7c9, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -62.5804/254.2792\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -55.4580/224.2102\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.47it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.47it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  25%|██▌       | 131/518 [42:48<1:51:36, 17.30s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_256717/tomo_256717.npy to /kaggle/working/data/tomo_256717.npy\n✅ Download complete: tomo_256717\nDownloading gs://nb153/precomputedmasks/train/tomo_256717_mask.npy to /kaggle/working/data/tomo_256717_mask.npy\n✅ Download complete: tomo_256717_mask.npy\nTomogram tomo_256717: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -45.8455/68.4604\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -44.9272/72.1271\nLoss: 0.9962\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.69it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9966\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  25%|██▌       | 132/518 [43:01<1:43:46, 16.13s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6521dc/tomo_6521dc.npy to /kaggle/working/data/tomo_6521dc.npy\n✅ Download complete: tomo_6521dc\nDownloading gs://nb153/precomputedmasks/train/tomo_6521dc_mask.npy to /kaggle/working/data/tomo_6521dc_mask.npy\n✅ Download complete: tomo_6521dc_mask.npy\nTomogram tomo_6521dc: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_6521dc, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.38it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -31.8941/80.4581\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -27.3524/158.3500\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.41it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.41it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.43it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.51it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  26%|██▌       | 133/518 [43:15<1:38:50, 15.40s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_3a8480/tomo_3a8480.npy to /kaggle/working/data/tomo_3a8480.npy\n✅ Download complete: tomo_3a8480\nDownloading gs://nb153/precomputedmasks/train/tomo_3a8480_mask.npy to /kaggle/working/data/tomo_3a8480_mask.npy\n✅ Download complete: tomo_3a8480_mask.npy\nTomogram tomo_3a8480: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -23.8626/128.2169\nLoss: 0.9908\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -24.5886/134.1858\nLoss: 0.9940\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9925\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  26%|██▌       | 134/518 [43:35<1:48:48, 17.00s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_79756f/tomo_79756f.npy to /kaggle/working/data/tomo_79756f.npy\n✅ Download complete: tomo_79756f\nDownloading gs://nb153/precomputedmasks/train/tomo_79756f_mask.npy to /kaggle/working/data/tomo_79756f_mask.npy\n✅ Download complete: tomo_79756f_mask.npy\nTomogram tomo_79756f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.5509/133.6936\nLoss: 0.9922\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.68it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.7748/158.7844\nLoss: 0.9926\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9940\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  26%|██▌       | 135/518 [43:49<1:42:36, 16.08s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_7dc063/tomo_7dc063.npy to /kaggle/working/data/tomo_7dc063.npy\n✅ Download complete: tomo_7dc063\nDownloading gs://nb153/precomputedmasks/train/tomo_7dc063_mask.npy to /kaggle/working/data/tomo_7dc063_mask.npy\n✅ Download complete: tomo_7dc063_mask.npy\nTomogram tomo_7dc063: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_7dc063, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.19it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -31.7762/243.8820\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.26it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -33.6273/110.2066\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.33it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.20it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.38it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.45it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.53it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.40it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  26%|██▋       | 136/518 [44:23<2:15:33, 21.29s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_8f5995/tomo_8f5995.npy to /kaggle/working/data/tomo_8f5995.npy\n✅ Download complete: tomo_8f5995\nDownloading gs://nb153/precomputedmasks/train/tomo_8f5995_mask.npy to /kaggle/working/data/tomo_8f5995_mask.npy\n✅ Download complete: tomo_8f5995_mask.npy\nTomogram tomo_8f5995: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -37.2819/165.0078\nLoss: 0.9906\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.6481/197.0191\nLoss: 0.9885\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.40it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.39it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.51it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9900\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  26%|██▋       | 137/518 [44:37<2:01:15, 19.10s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_226cd8/tomo_226cd8.npy to /kaggle/working/data/tomo_226cd8.npy\n✅ Download complete: tomo_226cd8\nDownloading gs://nb153/precomputedmasks/train/tomo_226cd8_mask.npy to /kaggle/working/data/tomo_226cd8_mask.npy\n✅ Download complete: tomo_226cd8_mask.npy\nTomogram tomo_226cd8: 10 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -26.8232/155.1026\nLoss: 0.9970\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -32.1069/216.9906\nLoss: 0.9967\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.47it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.54it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9970\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  27%|██▋       | 138/518 [44:58<2:04:39, 19.68s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_510f4e/tomo_510f4e.npy to /kaggle/working/data/tomo_510f4e.npy\n✅ Download complete: tomo_510f4e\nDownloading gs://nb153/precomputedmasks/train/tomo_510f4e_mask.npy to /kaggle/working/data/tomo_510f4e_mask.npy\n✅ Download complete: tomo_510f4e_mask.npy\nTomogram tomo_510f4e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.0439/225.0425\nLoss: 0.9930\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.3067/462.2802\nLoss: 0.9937\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9917\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  27%|██▋       | 139/518 [45:11<1:52:52, 17.87s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0c2749/tomo_0c2749.npy to /kaggle/working/data/tomo_0c2749.npy\n✅ Download complete: tomo_0c2749\nDownloading gs://nb153/precomputedmasks/train/tomo_0c2749_mask.npy to /kaggle/working/data/tomo_0c2749_mask.npy\n✅ Download complete: tomo_0c2749_mask.npy\nTomogram tomo_0c2749: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_0c2749, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.7055/291.8261\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.7492/234.0571\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  27%|██▋       | 140/518 [45:25<1:45:26, 16.74s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_13973d/tomo_13973d.npy to /kaggle/working/data/tomo_13973d.npy\n✅ Download complete: tomo_13973d\nDownloading gs://nb153/precomputedmasks/train/tomo_13973d_mask.npy to /kaggle/working/data/tomo_13973d_mask.npy\n✅ Download complete: tomo_13973d_mask.npy\nTomogram tomo_13973d: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.2768/377.2367\nLoss: 0.9961\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.2813/358.3861\nLoss: 0.9931\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9923\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  27%|██▋       | 141/518 [45:46<1:52:41, 17.94s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_146de2/tomo_146de2.npy to /kaggle/working/data/tomo_146de2.npy\n✅ Download complete: tomo_146de2\nDownloading gs://nb153/precomputedmasks/train/tomo_146de2_mask.npy to /kaggle/working/data/tomo_146de2_mask.npy\n✅ Download complete: tomo_146de2_mask.npy\nTomogram tomo_146de2: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_146de2, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -27.4450/502.8256\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.6593/161.3386\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  27%|██▋       | 142/518 [46:07<1:58:19, 18.88s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_7a9b64/tomo_7a9b64.npy to /kaggle/working/data/tomo_7a9b64.npy\n✅ Download complete: tomo_7a9b64\nDownloading gs://nb153/precomputedmasks/train/tomo_7a9b64_mask.npy to /kaggle/working/data/tomo_7a9b64_mask.npy\n✅ Download complete: tomo_7a9b64_mask.npy\nTomogram tomo_7a9b64: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.2890/358.1112\nLoss: 0.9945\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.0865/210.3171\nLoss: 0.9903\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9925\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  28%|██▊       | 143/518 [46:21<1:49:02, 17.45s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_fd41c4/tomo_fd41c4.npy to /kaggle/working/data/tomo_fd41c4.npy\n✅ Download complete: tomo_fd41c4\nDownloading gs://nb153/precomputedmasks/train/tomo_fd41c4_mask.npy to /kaggle/working/data/tomo_fd41c4_mask.npy\n✅ Download complete: tomo_fd41c4_mask.npy\nTomogram tomo_fd41c4: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_fd41c4, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -25.8165/301.1035\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -24.9737/299.9004\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  28%|██▊       | 144/518 [46:35<1:41:20, 16.26s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a537dd/tomo_a537dd.npy to /kaggle/working/data/tomo_a537dd.npy\n✅ Download complete: tomo_a537dd\nDownloading gs://nb153/precomputedmasks/train/tomo_a537dd_mask.npy to /kaggle/working/data/tomo_a537dd_mask.npy\n✅ Download complete: tomo_a537dd_mask.npy\nTomogram tomo_a537dd: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -40.2950/280.3779\nLoss: 0.9948\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -37.0783/285.9839\nLoss: 0.9971\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9950\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  28%|██▊       | 145/518 [46:49<1:36:24, 15.51s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ea3f3a/tomo_ea3f3a.npy to /kaggle/working/data/tomo_ea3f3a.npy\n✅ Download complete: tomo_ea3f3a\nDownloading gs://nb153/precomputedmasks/train/tomo_ea3f3a_mask.npy to /kaggle/working/data/tomo_ea3f3a_mask.npy\n✅ Download complete: tomo_ea3f3a_mask.npy\nTomogram tomo_ea3f3a: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -29.4854/147.2791\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -28.3877/145.6888\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.44it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.45it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.52it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9953\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  28%|██▊       | 146/518 [47:02<1:32:24, 14.91s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_d662b0/tomo_d662b0.npy to /kaggle/working/data/tomo_d662b0.npy\n✅ Download complete: tomo_d662b0\nDownloading gs://nb153/precomputedmasks/train/tomo_d662b0_mask.npy to /kaggle/working/data/tomo_d662b0_mask.npy\n✅ Download complete: tomo_d662b0_mask.npy\nTomogram tomo_d662b0: 6 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -33.0623/157.3443\nLoss: 0.9875\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -29.1017/209.8782\nLoss: 0.9738\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9839\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  28%|██▊       | 147/518 [47:25<1:46:05, 17.16s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_4c2e4e/tomo_4c2e4e.npy to /kaggle/working/data/tomo_4c2e4e.npy\n✅ Download complete: tomo_4c2e4e\nDownloading gs://nb153/precomputedmasks/train/tomo_4c2e4e_mask.npy to /kaggle/working/data/tomo_4c2e4e_mask.npy\n✅ Download complete: tomo_4c2e4e_mask.npy\nTomogram tomo_4c2e4e: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_4c2e4e, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -26.1252/137.4613\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.8603/200.9742\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  29%|██▊       | 148/518 [47:38<1:39:39, 16.16s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_372a5c/tomo_372a5c.npy to /kaggle/working/data/tomo_372a5c.npy\n✅ Download complete: tomo_372a5c\nDownloading gs://nb153/precomputedmasks/train/tomo_372a5c_mask.npy to /kaggle/working/data/tomo_372a5c_mask.npy\n✅ Download complete: tomo_372a5c_mask.npy\nTomogram tomo_372a5c: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.76it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.5251/269.1521\nLoss: 0.9952\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.74it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.7474/164.7875\nLoss: 0.9927\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9927\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  29%|██▉       | 149/518 [47:52<1:34:40, 15.40s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_9f222a/tomo_9f222a.npy to /kaggle/working/data/tomo_9f222a.npy\n✅ Download complete: tomo_9f222a\nDownloading gs://nb153/precomputedmasks/train/tomo_9f222a_mask.npy to /kaggle/working/data/tomo_9f222a_mask.npy\n✅ Download complete: tomo_9f222a_mask.npy\nTomogram tomo_9f222a: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.28it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.4153/156.9108\nLoss: 0.9841\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.34it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -23.9133/155.8039\nLoss: 0.9897\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.35it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.40it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.51it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9875\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  29%|██▉       | 150/518 [48:06<1:31:21, 14.89s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_423d52/tomo_423d52.npy to /kaggle/working/data/tomo_423d52.npy\n✅ Download complete: tomo_423d52\nDownloading gs://nb153/precomputedmasks/train/tomo_423d52_mask.npy to /kaggle/working/data/tomo_423d52_mask.npy\n✅ Download complete: tomo_423d52_mask.npy\nTomogram tomo_423d52: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.73it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.3661/240.1555\nLoss: 0.9962\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.7059/278.9636\nLoss: 0.9981\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9924\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  29%|██▉       | 151/518 [48:20<1:29:35, 14.65s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cae587/tomo_cae587.npy to /kaggle/working/data/tomo_cae587.npy\n✅ Download complete: tomo_cae587\nDownloading gs://nb153/precomputedmasks/train/tomo_cae587_mask.npy to /kaggle/working/data/tomo_cae587_mask.npy\n✅ Download complete: tomo_cae587_mask.npy\nTomogram tomo_cae587: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_cae587, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.1188/465.9766\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -35.0541/254.0312\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.39it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.42it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  29%|██▉       | 152/518 [48:33<1:27:24, 14.33s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c3619a/tomo_c3619a.npy to /kaggle/working/data/tomo_c3619a.npy\n✅ Download complete: tomo_c3619a\nDownloading gs://nb153/precomputedmasks/train/tomo_c3619a_mask.npy to /kaggle/working/data/tomo_c3619a_mask.npy\n✅ Download complete: tomo_c3619a_mask.npy\nTomogram tomo_c3619a: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_c3619a, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -39.7040/252.0298\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -33.3210/345.4497\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.37it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.37it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.46it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  30%|██▉       | 153/518 [48:47<1:25:19, 14.03s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2bb588/tomo_2bb588.npy to /kaggle/working/data/tomo_2bb588.npy\n✅ Download complete: tomo_2bb588\nDownloading gs://nb153/precomputedmasks/train/tomo_2bb588_mask.npy to /kaggle/working/data/tomo_2bb588_mask.npy\n✅ Download complete: tomo_2bb588_mask.npy\nTomogram tomo_2bb588: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -30.7247/274.9303\nLoss: 0.9969\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -45.3712/351.5236\nLoss: 0.9956\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.37it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.43it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9935\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  30%|██▉       | 154/518 [49:00<1:24:26, 13.92s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b9088c/tomo_b9088c.npy to /kaggle/working/data/tomo_b9088c.npy\n✅ Download complete: tomo_b9088c\nDownloading gs://nb153/precomputedmasks/train/tomo_b9088c_mask.npy to /kaggle/working/data/tomo_b9088c_mask.npy\n✅ Download complete: tomo_b9088c_mask.npy\nTomogram tomo_b9088c: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_b9088c, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -55.0741/206.8286\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -59.0577/294.7322\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.52it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  30%|██▉       | 155/518 [49:14<1:23:59, 13.88s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_381add/tomo_381add.npy to /kaggle/working/data/tomo_381add.npy\n✅ Download complete: tomo_381add\nDownloading gs://nb153/precomputedmasks/train/tomo_381add_mask.npy to /kaggle/working/data/tomo_381add_mask.npy\n✅ Download complete: tomo_381add_mask.npy\nTomogram tomo_381add: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -53.1115/408.9831\nLoss: 0.9965\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -39.7375/202.3557\nLoss: 0.9784\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.73it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.78it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.74it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.74it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9815\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  30%|███       | 156/518 [49:35<1:36:27, 15.99s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_957567/tomo_957567.npy to /kaggle/working/data/tomo_957567.npy\n✅ Download complete: tomo_957567\nDownloading gs://nb153/precomputedmasks/train/tomo_957567_mask.npy to /kaggle/working/data/tomo_957567_mask.npy\n✅ Download complete: tomo_957567_mask.npy\nTomogram tomo_957567: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_957567, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.1829/265.6054\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.70it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.4008/305.9655\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.69it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.74it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  30%|███       | 157/518 [49:48<1:31:18, 15.17s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_3e6ead/tomo_3e6ead.npy to /kaggle/working/data/tomo_3e6ead.npy\n✅ Download complete: tomo_3e6ead\nDownloading gs://nb153/precomputedmasks/train/tomo_3e6ead_mask.npy to /kaggle/working/data/tomo_3e6ead_mask.npy\n✅ Download complete: tomo_3e6ead_mask.npy\nTomogram tomo_3e6ead: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_3e6ead, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.5275/422.3404\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.1534/208.5430\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  31%|███       | 158/518 [50:02<1:28:07, 14.69s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_225d8f/tomo_225d8f.npy to /kaggle/working/data/tomo_225d8f.npy\n✅ Download complete: tomo_225d8f\nDownloading gs://nb153/precomputedmasks/train/tomo_225d8f_mask.npy to /kaggle/working/data/tomo_225d8f_mask.npy\n✅ Download complete: tomo_225d8f_mask.npy\nTomogram tomo_225d8f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.2884/446.0541\nLoss: 0.9979\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.1512/192.9255\nLoss: 0.9959\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9945\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  31%|███       | 159/518 [50:15<1:25:50, 14.35s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_569981/tomo_569981.npy to /kaggle/working/data/tomo_569981.npy\n✅ Download complete: tomo_569981\nDownloading gs://nb153/precomputedmasks/train/tomo_569981_mask.npy to /kaggle/working/data/tomo_569981_mask.npy\n✅ Download complete: tomo_569981_mask.npy\nTomogram tomo_569981: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_569981, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.3079/187.9056\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.8415/307.1582\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.51it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.49it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.52it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  31%|███       | 160/518 [50:53<2:07:04, 21.30s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_f6a38a/tomo_f6a38a.npy to /kaggle/working/data/tomo_f6a38a.npy\n✅ Download complete: tomo_f6a38a\nDownloading gs://nb153/precomputedmasks/train/tomo_f6a38a_mask.npy to /kaggle/working/data/tomo_f6a38a_mask.npy\n✅ Download complete: tomo_f6a38a_mask.npy\nTomogram tomo_f6a38a: 4 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.6055/208.0329\nLoss: 0.9859\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.3539/180.8967\nLoss: 0.9812\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9843\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  31%|███       | 161/518 [51:21<2:18:01, 23.20s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_97876d/tomo_97876d.npy to /kaggle/working/data/tomo_97876d.npy\n✅ Download complete: tomo_97876d\nDownloading gs://nb153/precomputedmasks/train/tomo_97876d_mask.npy to /kaggle/working/data/tomo_97876d_mask.npy\n✅ Download complete: tomo_97876d_mask.npy\nTomogram tomo_97876d: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_97876d, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.5809/165.5725\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.2463/285.5329\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  31%|███▏      | 162/518 [51:55<2:37:32, 26.55s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_00e047/tomo_00e047.npy to /kaggle/working/data/tomo_00e047.npy\n✅ Download complete: tomo_00e047\nDownloading gs://nb153/precomputedmasks/train/tomo_00e047_mask.npy to /kaggle/working/data/tomo_00e047_mask.npy\n✅ Download complete: tomo_00e047_mask.npy\nTomogram tomo_00e047: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.7866/122.7462\nLoss: 0.9904\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.6191/120.4170\nLoss: 0.9886\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.57it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9924\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  31%|███▏      | 163/518 [52:09<2:14:22, 22.71s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_81445c/tomo_81445c.npy to /kaggle/working/data/tomo_81445c.npy\n✅ Download complete: tomo_81445c\nDownloading gs://nb153/precomputedmasks/train/tomo_81445c_mask.npy to /kaggle/working/data/tomo_81445c_mask.npy\n✅ Download complete: tomo_81445c_mask.npy\nTomogram tomo_81445c: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.0707/144.5239\nLoss: 0.9880\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.2522/188.9993\nLoss: 0.9913\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9906\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  32%|███▏      | 164/518 [52:22<1:57:34, 19.93s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_d6c63f/tomo_d6c63f.npy to /kaggle/working/data/tomo_d6c63f.npy\n✅ Download complete: tomo_d6c63f\nDownloading gs://nb153/precomputedmasks/train/tomo_d6c63f_mask.npy to /kaggle/working/data/tomo_d6c63f_mask.npy\n✅ Download complete: tomo_d6c63f_mask.npy\nTomogram tomo_d6c63f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.4583/226.7151\nLoss: 0.9944\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.3194/285.2773\nLoss: 0.9941\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9908\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  32%|███▏      | 165/518 [52:36<1:45:56, 18.01s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_1efc28/tomo_1efc28.npy to /kaggle/working/data/tomo_1efc28.npy\n✅ Download complete: tomo_1efc28\nDownloading gs://nb153/precomputedmasks/train/tomo_1efc28_mask.npy to /kaggle/working/data/tomo_1efc28_mask.npy\n✅ Download complete: tomo_1efc28_mask.npy\nTomogram tomo_1efc28: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.2418/153.6705\nLoss: 0.9869\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8276/157.6554\nLoss: 0.9861\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9893\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  32%|███▏      | 166/518 [52:49<1:37:36, 16.64s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_651ec2/tomo_651ec2.npy to /kaggle/working/data/tomo_651ec2.npy\n✅ Download complete: tomo_651ec2\nDownloading gs://nb153/precomputedmasks/train/tomo_651ec2_mask.npy to /kaggle/working/data/tomo_651ec2_mask.npy\n✅ Download complete: tomo_651ec2_mask.npy\nTomogram tomo_651ec2: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_651ec2, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.0604/151.2659\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.6798/154.3144\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  32%|███▏      | 167/518 [53:19<2:00:51, 20.66s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_997437/tomo_997437.npy to /kaggle/working/data/tomo_997437.npy\n✅ Download complete: tomo_997437\nDownloading gs://nb153/precomputedmasks/train/tomo_997437_mask.npy to /kaggle/working/data/tomo_997437_mask.npy\n✅ Download complete: tomo_997437_mask.npy\nTomogram tomo_997437: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.37it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.9567/202.1742\nLoss: 0.9916\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8847/164.5136\nLoss: 0.9866\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.38it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.37it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.32it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.35it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.39it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.41it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9861\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  32%|███▏      | 168/518 [53:33<1:49:13, 18.73s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_769126/tomo_769126.npy to /kaggle/working/data/tomo_769126.npy\n✅ Download complete: tomo_769126\nDownloading gs://nb153/precomputedmasks/train/tomo_769126_mask.npy to /kaggle/working/data/tomo_769126_mask.npy\n✅ Download complete: tomo_769126_mask.npy\nTomogram tomo_769126: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.6013/259.7085\nLoss: 0.9830\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.8492/194.6960\nLoss: 0.9796\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.44it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.48it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9849\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  33%|███▎      | 169/518 [53:47<1:40:36, 17.30s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5d4c65/tomo_5d4c65.npy to /kaggle/working/data/tomo_5d4c65.npy\n✅ Download complete: tomo_5d4c65\nDownloading gs://nb153/precomputedmasks/train/tomo_5d4c65_mask.npy to /kaggle/working/data/tomo_5d4c65_mask.npy\n✅ Download complete: tomo_5d4c65_mask.npy\nTomogram tomo_5d4c65: 4 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.6353/197.4831\nLoss: 0.9938\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.7421/187.4650\nLoss: 0.9896\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9915\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  33%|███▎      | 170/518 [54:09<1:47:32, 18.54s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a549d6/tomo_a549d6.npy to /kaggle/working/data/tomo_a549d6.npy\n✅ Download complete: tomo_a549d6\nDownloading gs://nb153/precomputedmasks/train/tomo_a549d6_mask.npy to /kaggle/working/data/tomo_a549d6_mask.npy\n✅ Download complete: tomo_a549d6_mask.npy\nTomogram tomo_a549d6: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.6626/233.7987\nLoss: 0.9940\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.5436/233.3982\nLoss: 0.9979\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.68it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9920\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  33%|███▎      | 171/518 [54:23<1:39:00, 17.12s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_fe85f6/tomo_fe85f6.npy to /kaggle/working/data/tomo_fe85f6.npy\n✅ Download complete: tomo_fe85f6\nDownloading gs://nb153/precomputedmasks/train/tomo_fe85f6_mask.npy to /kaggle/working/data/tomo_fe85f6_mask.npy\n✅ Download complete: tomo_fe85f6_mask.npy\nTomogram tomo_fe85f6: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_fe85f6, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.37it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.2673/256.6843\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.0634/195.0056\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  33%|███▎      | 172/518 [54:59<2:12:51, 23.04s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e50f04/tomo_e50f04.npy to /kaggle/working/data/tomo_e50f04.npy\n✅ Download complete: tomo_e50f04\nDownloading gs://nb153/precomputedmasks/train/tomo_e50f04_mask.npy to /kaggle/working/data/tomo_e50f04_mask.npy\n✅ Download complete: tomo_e50f04_mask.npy\nTomogram tomo_e50f04: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_e50f04, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.6837/169.0499\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.4211/188.8215\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.45it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  33%|███▎      | 173/518 [55:15<1:59:23, 20.76s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_67565e/tomo_67565e.npy to /kaggle/working/data/tomo_67565e.npy\n✅ Download complete: tomo_67565e\nDownloading gs://nb153/precomputedmasks/train/tomo_67565e_mask.npy to /kaggle/working/data/tomo_67565e_mask.npy\n✅ Download complete: tomo_67565e_mask.npy\nTomogram tomo_67565e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.6489/185.9643\nLoss: 0.9826\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.4930/195.3838\nLoss: 0.9930\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9877\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  34%|███▎      | 174/518 [55:28<1:46:35, 18.59s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_63e635/tomo_63e635.npy to /kaggle/working/data/tomo_63e635.npy\n✅ Download complete: tomo_63e635\nDownloading gs://nb153/precomputedmasks/train/tomo_63e635_mask.npy to /kaggle/working/data/tomo_63e635_mask.npy\n✅ Download complete: tomo_63e635_mask.npy\nTomogram tomo_63e635: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_63e635, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.35it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -30.1633/211.2353\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.34it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -28.9544/194.4349\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.50it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.45it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.45it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  34%|███▍      | 175/518 [56:01<2:11:03, 22.93s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_f8b46e/tomo_f8b46e.npy to /kaggle/working/data/tomo_f8b46e.npy\n✅ Download complete: tomo_f8b46e\nDownloading gs://nb153/precomputedmasks/train/tomo_f8b46e_mask.npy to /kaggle/working/data/tomo_f8b46e_mask.npy\n✅ Download complete: tomo_f8b46e_mask.npy\nTomogram tomo_f8b46e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -25.0295/189.6035\nLoss: 0.9967\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -28.1823/229.3777\nLoss: 0.9867\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.51it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.50it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9905\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  34%|███▍      | 176/518 [56:15<1:54:47, 20.14s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_935ae0/tomo_935ae0.npy to /kaggle/working/data/tomo_935ae0.npy\n✅ Download complete: tomo_935ae0\nDownloading gs://nb153/precomputedmasks/train/tomo_935ae0_mask.npy to /kaggle/working/data/tomo_935ae0_mask.npy\n✅ Download complete: tomo_935ae0_mask.npy\nTomogram tomo_935ae0: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.8461/165.6977\nLoss: 0.9954\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.5556/158.9593\nLoss: 0.9873\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9879\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  34%|███▍      | 177/518 [56:29<1:43:27, 18.20s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_f3e449/tomo_f3e449.npy to /kaggle/working/data/tomo_f3e449.npy\n✅ Download complete: tomo_f3e449\nDownloading gs://nb153/precomputedmasks/train/tomo_f3e449_mask.npy to /kaggle/working/data/tomo_f3e449_mask.npy\n✅ Download complete: tomo_f3e449_mask.npy\nTomogram tomo_f3e449: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.5288/209.0093\nLoss: 0.9797\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -42.1954/210.8415\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.51it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.51it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9812\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  34%|███▍      | 178/518 [56:42<1:35:18, 16.82s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_5b087f/tomo_5b087f.npy to /kaggle/working/data/tomo_5b087f.npy\n✅ Download complete: tomo_5b087f\nDownloading gs://nb153/precomputedmasks/train/tomo_5b087f_mask.npy to /kaggle/working/data/tomo_5b087f_mask.npy\n✅ Download complete: tomo_5b087f_mask.npy\nTomogram tomo_5b087f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.72it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.5962/210.9536\nLoss: 0.9726\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.72it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.3626/230.9964\nLoss: 0.9709\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9757\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  35%|███▍      | 179/518 [56:56<1:29:19, 15.81s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cacb75/tomo_cacb75.npy to /kaggle/working/data/tomo_cacb75.npy\n✅ Download complete: tomo_cacb75\nDownloading gs://nb153/precomputedmasks/train/tomo_cacb75_mask.npy to /kaggle/working/data/tomo_cacb75_mask.npy\n✅ Download complete: tomo_cacb75_mask.npy\nTomogram tomo_cacb75: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.0953/264.5366\nLoss: 0.9707\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.9270/234.5587\nLoss: 0.9729\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9705\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  35%|███▍      | 180/518 [57:10<1:25:28, 15.17s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c9d07c/tomo_c9d07c.npy to /kaggle/working/data/tomo_c9d07c.npy\n✅ Download complete: tomo_c9d07c\nDownloading gs://nb153/precomputedmasks/train/tomo_c9d07c_mask.npy to /kaggle/working/data/tomo_c9d07c_mask.npy\n✅ Download complete: tomo_c9d07c_mask.npy\nTomogram tomo_c9d07c: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_c9d07c, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.6846/180.3627\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.2834/6.7989\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  35%|███▍      | 181/518 [57:30<1:33:57, 16.73s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e9fa5f/tomo_e9fa5f.npy to /kaggle/working/data/tomo_e9fa5f.npy\n✅ Download complete: tomo_e9fa5f\nDownloading gs://nb153/precomputedmasks/train/tomo_e9fa5f_mask.npy to /kaggle/working/data/tomo_e9fa5f_mask.npy\n✅ Download complete: tomo_e9fa5f_mask.npy\nTomogram tomo_e9fa5f: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_e9fa5f, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8679/18.6088\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.5604/19.5650\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  35%|███▌      | 182/518 [58:06<2:06:33, 22.60s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a8bf76/tomo_a8bf76.npy to /kaggle/working/data/tomo_a8bf76.npy\n✅ Download complete: tomo_a8bf76\nDownloading gs://nb153/precomputedmasks/train/tomo_a8bf76_mask.npy to /kaggle/working/data/tomo_a8bf76_mask.npy\n✅ Download complete: tomo_a8bf76_mask.npy\nTomogram tomo_a8bf76: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.7527/150.6749\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.9044/30.5392\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.41it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.38it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.35it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.42it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.48it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9999\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  35%|███▌      | 183/518 [58:20<1:51:22, 19.95s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_643b20/tomo_643b20.npy to /kaggle/working/data/tomo_643b20.npy\n✅ Download complete: tomo_643b20\nDownloading gs://nb153/precomputedmasks/train/tomo_643b20_mask.npy to /kaggle/working/data/tomo_643b20_mask.npy\n✅ Download complete: tomo_643b20_mask.npy\nTomogram tomo_643b20: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.0658/63.7762\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.4324/55.9234\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9996\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  36%|███▌      | 184/518 [58:34<1:40:28, 18.05s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0c3d78/tomo_0c3d78.npy to /kaggle/working/data/tomo_0c3d78.npy\n✅ Download complete: tomo_0c3d78\nDownloading gs://nb153/precomputedmasks/train/tomo_0c3d78_mask.npy to /kaggle/working/data/tomo_0c3d78_mask.npy\n✅ Download complete: tomo_0c3d78_mask.npy\nTomogram tomo_0c3d78: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_0c3d78, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.6288/20.9507\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.3200/20.9668\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  36%|███▌      | 185/518 [59:06<2:04:06, 22.36s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_50f0bf/tomo_50f0bf.npy to /kaggle/working/data/tomo_50f0bf.npy\n✅ Download complete: tomo_50f0bf\nDownloading gs://nb153/precomputedmasks/train/tomo_50f0bf_mask.npy to /kaggle/working/data/tomo_50f0bf_mask.npy\n✅ Download complete: tomo_50f0bf_mask.npy\nTomogram tomo_50f0bf: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_50f0bf, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.9494/21.7803\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.2937/23.9725\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.52it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  36%|███▌      | 186/518 [59:26<2:00:19, 21.75s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b9eb9a/tomo_b9eb9a.npy to /kaggle/working/data/tomo_b9eb9a.npy\n✅ Download complete: tomo_b9eb9a\nDownloading gs://nb153/precomputedmasks/train/tomo_b9eb9a_mask.npy to /kaggle/working/data/tomo_b9eb9a_mask.npy\n✅ Download complete: tomo_b9eb9a_mask.npy\nTomogram tomo_b9eb9a: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_b9eb9a, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -27.1476/39.3133\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.9769/43.0027\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  36%|███▌      | 187/518 [59:40<1:46:28, 19.30s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b98cf6/tomo_b98cf6.npy to /kaggle/working/data/tomo_b98cf6.npy\n✅ Download complete: tomo_b98cf6\nDownloading gs://nb153/precomputedmasks/train/tomo_b98cf6_mask.npy to /kaggle/working/data/tomo_b98cf6_mask.npy\n✅ Download complete: tomo_b98cf6_mask.npy\nTomogram tomo_b98cf6: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_b98cf6, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.8309/28.0318\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.5631/30.4931\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  36%|███▋      | 188/518 [1:00:13<2:08:17, 23.33s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_30b580/tomo_30b580.npy to /kaggle/working/data/tomo_30b580.npy\n✅ Download complete: tomo_30b580\nDownloading gs://nb153/precomputedmasks/train/tomo_30b580_mask.npy to /kaggle/working/data/tomo_30b580_mask.npy\n✅ Download complete: tomo_30b580_mask.npy\nTomogram tomo_30b580: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.4997/35.7000\nLoss: 0.9972\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.69it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.5692/28.5415\nLoss: 0.9962\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9968\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  36%|███▋      | 189/518 [1:00:26<1:51:16, 20.29s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_087d64/tomo_087d64.npy to /kaggle/working/data/tomo_087d64.npy\n✅ Download complete: tomo_087d64\nDownloading gs://nb153/precomputedmasks/train/tomo_087d64_mask.npy to /kaggle/working/data/tomo_087d64_mask.npy\n✅ Download complete: tomo_087d64_mask.npy\nTomogram tomo_087d64: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_087d64, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.33it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.2333/25.6272\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.8700/38.9309\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  37%|███▋      | 190/518 [1:01:04<2:20:18, 25.67s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_38c2a6/tomo_38c2a6.npy to /kaggle/working/data/tomo_38c2a6.npy\n✅ Download complete: tomo_38c2a6\nDownloading gs://nb153/precomputedmasks/train/tomo_38c2a6_mask.npy to /kaggle/working/data/tomo_38c2a6_mask.npy\n✅ Download complete: tomo_38c2a6_mask.npy\nTomogram tomo_38c2a6: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -23.5553/30.1041\nLoss: 0.9995\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.6105/33.2850\nLoss: 0.9992\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9986\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  37%|███▋      | 191/518 [1:01:17<1:59:52, 21.99s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_da38ea/tomo_da38ea.npy to /kaggle/working/data/tomo_da38ea.npy\n✅ Download complete: tomo_da38ea\nDownloading gs://nb153/precomputedmasks/train/tomo_da38ea_mask.npy to /kaggle/working/data/tomo_da38ea_mask.npy\n✅ Download complete: tomo_da38ea_mask.npy\nTomogram tomo_da38ea: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -25.6464/31.9711\nLoss: 0.9983\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.1098/25.6794\nLoss: 0.9967\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.44it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.44it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.30it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.31it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.37it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.40it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9968\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  37%|███▋      | 192/518 [1:01:31<1:45:20, 19.39s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_68e123/tomo_68e123.npy to /kaggle/working/data/tomo_68e123.npy\n✅ Download complete: tomo_68e123\nDownloading gs://nb153/precomputedmasks/train/tomo_68e123_mask.npy to /kaggle/working/data/tomo_68e123_mask.npy\n✅ Download complete: tomo_68e123_mask.npy\nTomogram tomo_68e123: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.33it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -24.5684/46.3919\nLoss: 0.9971\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -24.1143/42.2970\nLoss: 0.9960\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.44it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.44it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.53it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.50it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9957\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  37%|███▋      | 193/518 [1:01:44<1:34:35, 17.46s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_8e4f7d/tomo_8e4f7d.npy to /kaggle/working/data/tomo_8e4f7d.npy\n✅ Download complete: tomo_8e4f7d\nDownloading gs://nb153/precomputedmasks/train/tomo_8e4f7d_mask.npy to /kaggle/working/data/tomo_8e4f7d_mask.npy\n✅ Download complete: tomo_8e4f7d_mask.npy\nTomogram tomo_8e4f7d: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.73it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -23.3130/58.7669\nLoss: 0.9969\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.71it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.8994/62.7045\nLoss: 0.9981\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.70it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9971\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  37%|███▋      | 194/518 [1:01:57<1:28:01, 16.30s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_823bc7/tomo_823bc7.npy to /kaggle/working/data/tomo_823bc7.npy\n✅ Download complete: tomo_823bc7\nDownloading gs://nb153/precomputedmasks/train/tomo_823bc7_mask.npy to /kaggle/working/data/tomo_823bc7_mask.npy\n✅ Download complete: tomo_823bc7_mask.npy\nTomogram tomo_823bc7: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.1350/39.8725\nLoss: 0.9918\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.2549/35.2871\nLoss: 0.9977\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.69it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.73it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.70it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9912\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  38%|███▊      | 195/518 [1:02:11<1:22:49, 15.39s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2dcd5c/tomo_2dcd5c.npy to /kaggle/working/data/tomo_2dcd5c.npy\n✅ Download complete: tomo_2dcd5c\nDownloading gs://nb153/precomputedmasks/train/tomo_2dcd5c_mask.npy to /kaggle/working/data/tomo_2dcd5c_mask.npy\n✅ Download complete: tomo_2dcd5c_mask.npy\nTomogram tomo_2dcd5c: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.34it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.8507/21.8761\nLoss: 0.9961\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.38it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.4430/20.3717\nLoss: 0.9979\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.42it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.42it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9972\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  38%|███▊      | 196/518 [1:02:24<1:19:46, 14.87s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_f8b835/tomo_f8b835.npy to /kaggle/working/data/tomo_f8b835.npy\n✅ Download complete: tomo_f8b835\nDownloading gs://nb153/precomputedmasks/train/tomo_f8b835_mask.npy to /kaggle/working/data/tomo_f8b835_mask.npy\n✅ Download complete: tomo_f8b835_mask.npy\nTomogram tomo_f8b835: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_f8b835, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.1971/30.4757\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.4614/46.5144\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  38%|███▊      | 197/518 [1:03:01<1:53:56, 21.30s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a6646f/tomo_a6646f.npy to /kaggle/working/data/tomo_a6646f.npy\n✅ Download complete: tomo_a6646f\nDownloading gs://nb153/precomputedmasks/train/tomo_a6646f_mask.npy to /kaggle/working/data/tomo_a6646f_mask.npy\n✅ Download complete: tomo_a6646f_mask.npy\nTomogram tomo_a6646f: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_a6646f, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.5551/21.0330\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.5344/15.6200\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.51it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  38%|███▊      | 198/518 [1:03:33<2:11:39, 24.69s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_868255/tomo_868255.npy to /kaggle/working/data/tomo_868255.npy\n✅ Download complete: tomo_868255\nDownloading gs://nb153/precomputedmasks/train/tomo_868255_mask.npy to /kaggle/working/data/tomo_868255_mask.npy\n✅ Download complete: tomo_868255_mask.npy\nTomogram tomo_868255: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.73it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.0485/12.7813\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.71it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.0231/8.2233\nLoss: 0.9987\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.71it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.73it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9990\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  38%|███▊      | 199/518 [1:03:46<1:52:58, 21.25s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_1af88d/tomo_1af88d.npy to /kaggle/working/data/tomo_1af88d.npy\n✅ Download complete: tomo_1af88d\nDownloading gs://nb153/precomputedmasks/train/tomo_1af88d_mask.npy to /kaggle/working/data/tomo_1af88d_mask.npy\n✅ Download complete: tomo_1af88d_mask.npy\nTomogram tomo_1af88d: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.4127/13.4394\nLoss: 0.9938\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.2078/8.6659\nLoss: 0.9893\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9904\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  39%|███▊      | 200/518 [1:04:00<1:40:03, 18.88s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_1fb6a7/tomo_1fb6a7.npy to /kaggle/working/data/tomo_1fb6a7.npy\n✅ Download complete: tomo_1fb6a7\nDownloading gs://nb153/precomputedmasks/train/tomo_1fb6a7_mask.npy to /kaggle/working/data/tomo_1fb6a7_mask.npy\n✅ Download complete: tomo_1fb6a7_mask.npy\nTomogram tomo_1fb6a7: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_1fb6a7, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.39it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.1058/7.5233\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.9337/28.2074\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  39%|███▉      | 201/518 [1:04:13<1:31:10, 17.26s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_d0aa3b/tomo_d0aa3b.npy to /kaggle/working/data/tomo_d0aa3b.npy\n✅ Download complete: tomo_d0aa3b\nDownloading gs://nb153/precomputedmasks/train/tomo_d0aa3b_mask.npy to /kaggle/working/data/tomo_d0aa3b_mask.npy\n✅ Download complete: tomo_d0aa3b_mask.npy\nTomogram tomo_d0aa3b: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.0241/5.5788\nLoss: 0.9996\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.7936/10.5196\nLoss: 0.9993\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9993\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  39%|███▉      | 202/518 [1:04:26<1:24:30, 16.05s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_bad7b3/tomo_bad7b3.npy to /kaggle/working/data/tomo_bad7b3.npy\n✅ Download complete: tomo_bad7b3\nDownloading gs://nb153/precomputedmasks/train/tomo_bad7b3_mask.npy to /kaggle/working/data/tomo_bad7b3_mask.npy\n✅ Download complete: tomo_bad7b3_mask.npy\nTomogram tomo_bad7b3: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.4707/10.4184\nLoss: 0.9959\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.7350/11.4314\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.64it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9965\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  39%|███▉      | 203/518 [1:04:40<1:20:34, 15.35s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ba9b3d/tomo_ba9b3d.npy to /kaggle/working/data/tomo_ba9b3d.npy\n✅ Download complete: tomo_ba9b3d\nDownloading gs://nb153/precomputedmasks/train/tomo_ba9b3d_mask.npy to /kaggle/working/data/tomo_ba9b3d_mask.npy\n✅ Download complete: tomo_ba9b3d_mask.npy\nTomogram tomo_ba9b3d: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.37it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.5620/29.8371\nLoss: 0.9980\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.3314/78.3415\nLoss: 0.9945\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9954\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  39%|███▉      | 204/518 [1:04:54<1:18:29, 15.00s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ec607b/tomo_ec607b.npy to /kaggle/working/data/tomo_ec607b.npy\n✅ Download complete: tomo_ec607b\nDownloading gs://nb153/precomputedmasks/train/tomo_ec607b_mask.npy to /kaggle/working/data/tomo_ec607b_mask.npy\n✅ Download complete: tomo_ec607b_mask.npy\nTomogram tomo_ec607b: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.4111/15.3400\nLoss: 0.9919\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.8825/44.5300\nLoss: 0.9961\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.42it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.45it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.47it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.47it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9940\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  40%|███▉      | 205/518 [1:05:15<1:27:12, 16.72s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_d2339b/tomo_d2339b.npy to /kaggle/working/data/tomo_d2339b.npy\n✅ Download complete: tomo_d2339b\nDownloading gs://nb153/precomputedmasks/train/tomo_d2339b_mask.npy to /kaggle/working/data/tomo_d2339b_mask.npy\n✅ Download complete: tomo_d2339b_mask.npy\nTomogram tomo_d2339b: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.2306/55.6144\nLoss: 0.9954\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.7613/60.5619\nLoss: 0.9976\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.74it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.71it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9961\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  40%|███▉      | 206/518 [1:05:28<1:21:45, 15.72s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_99a3ce/tomo_99a3ce.npy to /kaggle/working/data/tomo_99a3ce.npy\n✅ Download complete: tomo_99a3ce\nDownloading gs://nb153/precomputedmasks/train/tomo_99a3ce_mask.npy to /kaggle/working/data/tomo_99a3ce_mask.npy\n✅ Download complete: tomo_99a3ce_mask.npy\nTomogram tomo_99a3ce: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.7451\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.6951/52.2316\nLoss: 0.9922\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.2047/38.2603\nLoss: 0.9961\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9939\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  40%|███▉      | 207/518 [1:05:42<1:17:58, 15.04s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_9d3a0e/tomo_9d3a0e.npy to /kaggle/working/data/tomo_9d3a0e.npy\n✅ Download complete: tomo_9d3a0e\nDownloading gs://nb153/precomputedmasks/train/tomo_9d3a0e_mask.npy to /kaggle/working/data/tomo_9d3a0e_mask.npy\n✅ Download complete: tomo_9d3a0e_mask.npy\nTomogram tomo_9d3a0e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.6108/30.5001\nLoss: 0.9982\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.3762/30.8411\nLoss: 0.9980\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.68it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9936\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  40%|████      | 208/518 [1:05:55<1:15:06, 14.54s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_40b215/tomo_40b215.npy to /kaggle/working/data/tomo_40b215.npy\n✅ Download complete: tomo_40b215\nDownloading gs://nb153/precomputedmasks/train/tomo_40b215_mask.npy to /kaggle/working/data/tomo_40b215_mask.npy\n✅ Download complete: tomo_40b215_mask.npy\nTomogram tomo_40b215: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_40b215, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.5103/72.3930\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.0401/148.1549\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.45it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  40%|████      | 209/518 [1:06:15<1:23:35, 16.23s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_fd9357/tomo_fd9357.npy to /kaggle/working/data/tomo_fd9357.npy\n✅ Download complete: tomo_fd9357\nDownloading gs://nb153/precomputedmasks/train/tomo_fd9357_mask.npy to /kaggle/working/data/tomo_fd9357_mask.npy\n✅ Download complete: tomo_fd9357_mask.npy\nTomogram tomo_fd9357: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.37it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.9917/65.1275\nLoss: 0.9929\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.5778/95.4620\nLoss: 0.9979\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9907\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  41%|████      | 210/518 [1:06:29<1:18:54, 15.37s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e0739f/tomo_e0739f.npy to /kaggle/working/data/tomo_e0739f.npy\n✅ Download complete: tomo_e0739f\nDownloading gs://nb153/precomputedmasks/train/tomo_e0739f_mask.npy to /kaggle/working/data/tomo_e0739f_mask.npy\n✅ Download complete: tomo_e0739f_mask.npy\nTomogram tomo_e0739f: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_e0739f, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.9793/127.3762\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.3400/105.6896\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  41%|████      | 211/518 [1:06:42<1:15:27, 14.75s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b4d92b/tomo_b4d92b.npy to /kaggle/working/data/tomo_b4d92b.npy\n✅ Download complete: tomo_b4d92b\nDownloading gs://nb153/precomputedmasks/train/tomo_b4d92b_mask.npy to /kaggle/working/data/tomo_b4d92b_mask.npy\n✅ Download complete: tomo_b4d92b_mask.npy\nTomogram tomo_b4d92b: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.0432/40.1306\nLoss: 0.9997\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.68it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.1337/22.9052\nLoss: 0.9990\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.65it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9988\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  41%|████      | 212/518 [1:06:56<1:13:17, 14.37s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cf0875/tomo_cf0875.npy to /kaggle/working/data/tomo_cf0875.npy\n✅ Download complete: tomo_cf0875\nDownloading gs://nb153/precomputedmasks/train/tomo_cf0875_mask.npy to /kaggle/working/data/tomo_cf0875_mask.npy\n✅ Download complete: tomo_cf0875_mask.npy\nTomogram tomo_cf0875: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.2058/6.6466\nLoss: 0.9965\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.8192/7.0328\nLoss: 0.9946\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9944\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  41%|████      | 213/518 [1:07:09<1:12:11, 14.20s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_3a0914/tomo_3a0914.npy to /kaggle/working/data/tomo_3a0914.npy\n✅ Download complete: tomo_3a0914\nDownloading gs://nb153/precomputedmasks/train/tomo_3a0914_mask.npy to /kaggle/working/data/tomo_3a0914_mask.npy\n✅ Download complete: tomo_3a0914_mask.npy\nTomogram tomo_3a0914: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_3a0914, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.0187/13.0421\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.2554/7.2774\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  41%|████▏     | 214/518 [1:07:45<1:45:15, 20.78s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_13484c/tomo_13484c.npy to /kaggle/working/data/tomo_13484c.npy\n✅ Download complete: tomo_13484c\nDownloading gs://nb153/precomputedmasks/train/tomo_13484c_mask.npy to /kaggle/working/data/tomo_13484c_mask.npy\n✅ Download complete: tomo_13484c_mask.npy\nTomogram tomo_13484c: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.5032/3.6490\nLoss: 0.9896\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.0835/4.4623\nLoss: 0.9926\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9852\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  42%|████▏     | 215/518 [1:07:59<1:33:36, 18.54s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_8e58f1/tomo_8e58f1.npy to /kaggle/working/data/tomo_8e58f1.npy\n✅ Download complete: tomo_8e58f1\nDownloading gs://nb153/precomputedmasks/train/tomo_8e58f1_mask.npy to /kaggle/working/data/tomo_8e58f1_mask.npy\n✅ Download complete: tomo_8e58f1_mask.npy\nTomogram tomo_8e58f1: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.7635/7.2398\nLoss: 0.9905\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.8056/12.7606\nLoss: 0.9961\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.57it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9847\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  42%|████▏     | 216/518 [1:08:12<1:25:26, 16.98s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_444829/tomo_444829.npy to /kaggle/working/data/tomo_444829.npy\n✅ Download complete: tomo_444829\nDownloading gs://nb153/precomputedmasks/train/tomo_444829_mask.npy to /kaggle/working/data/tomo_444829_mask.npy\n✅ Download complete: tomo_444829_mask.npy\nTomogram tomo_444829: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.40it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.4482/7.5786\nLoss: 0.9903\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.8261/9.9262\nLoss: 0.9914\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.45it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.51it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9749\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  42%|████▏     | 217/518 [1:08:25<1:19:25, 15.83s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_098751/tomo_098751.npy to /kaggle/working/data/tomo_098751.npy\n✅ Download complete: tomo_098751\nDownloading gs://nb153/precomputedmasks/train/tomo_098751_mask.npy to /kaggle/working/data/tomo_098751_mask.npy\n✅ Download complete: tomo_098751_mask.npy\nTomogram tomo_098751: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_098751, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.6051/1.1257\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.8473/-1.5269\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  42%|████▏     | 218/518 [1:08:45<1:25:23, 17.08s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_8e8368/tomo_8e8368.npy to /kaggle/working/data/tomo_8e8368.npy\n✅ Download complete: tomo_8e8368\nDownloading gs://nb153/precomputedmasks/train/tomo_8e8368_mask.npy to /kaggle/working/data/tomo_8e8368_mask.npy\n✅ Download complete: tomo_8e8368_mask.npy\nTomogram tomo_8e8368: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.1797/-1.7767\nLoss: 0.9995\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.3936/-1.8649\nLoss: 0.9996\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9995\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  42%|████▏     | 219/518 [1:08:59<1:19:36, 15.98s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a4f419/tomo_a4f419.npy to /kaggle/working/data/tomo_a4f419.npy\n✅ Download complete: tomo_a4f419\nDownloading gs://nb153/precomputedmasks/train/tomo_a4f419_mask.npy to /kaggle/working/data/tomo_a4f419_mask.npy\n✅ Download complete: tomo_a4f419_mask.npy\nTomogram tomo_a4f419: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_a4f419, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.41it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.5443/-2.0025\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.4288/-2.0489\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.47it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  42%|████▏     | 220/518 [1:09:36<1:50:27, 22.24s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_7ca7c0/tomo_7ca7c0.npy to /kaggle/working/data/tomo_7ca7c0.npy\n✅ Download complete: tomo_7ca7c0\nDownloading gs://nb153/precomputedmasks/train/tomo_7ca7c0_mask.npy to /kaggle/working/data/tomo_7ca7c0_mask.npy\n✅ Download complete: tomo_7ca7c0_mask.npy\nTomogram tomo_7ca7c0: 3 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.26it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.09s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.1943/-2.1127\nLoss: 0.9995\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.31it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.5707/-2.1434\nLoss: 0.9990\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.32it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.36it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.43it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.53it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.49it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9992\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  43%|████▎     | 221/518 [1:09:49<1:37:17, 19.65s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_9f1828/tomo_9f1828.npy to /kaggle/working/data/tomo_9f1828.npy\n✅ Download complete: tomo_9f1828\nDownloading gs://nb153/precomputedmasks/train/tomo_9f1828_mask.npy to /kaggle/working/data/tomo_9f1828_mask.npy\n✅ Download complete: tomo_9f1828_mask.npy\nTomogram tomo_9f1828: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.2578/-1.0768\nLoss: 0.9989\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.6461/-0.4841\nLoss: 0.9988\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9984\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  43%|████▎     | 222/518 [1:10:03<1:27:39, 17.77s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0de3ee/tomo_0de3ee.npy to /kaggle/working/data/tomo_0de3ee.npy\n✅ Download complete: tomo_0de3ee\nDownloading gs://nb153/precomputedmasks/train/tomo_0de3ee_mask.npy to /kaggle/working/data/tomo_0de3ee_mask.npy\n✅ Download complete: tomo_0de3ee_mask.npy\nTomogram tomo_0de3ee: 2 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.4025/0.2054\nLoss: 0.9991\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.48it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.6227/0.2887\nLoss: 0.9981\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.51it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9984\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  43%|████▎     | 223/518 [1:10:23<1:31:41, 18.65s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_180bfd/tomo_180bfd.npy to /kaggle/working/data/tomo_180bfd.npy\n✅ Download complete: tomo_180bfd\nDownloading gs://nb153/precomputedmasks/train/tomo_180bfd_mask.npy to /kaggle/working/data/tomo_180bfd_mask.npy\n✅ Download complete: tomo_180bfd_mask.npy\nTomogram tomo_180bfd: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_180bfd, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.3356/11.4491\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.5772/7.8871\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  43%|████▎     | 224/518 [1:10:37<1:24:24, 17.23s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ac9fef/tomo_ac9fef.npy to /kaggle/working/data/tomo_ac9fef.npy\n✅ Download complete: tomo_ac9fef\nDownloading gs://nb153/precomputedmasks/train/tomo_ac9fef_mask.npy to /kaggle/working/data/tomo_ac9fef_mask.npy\n✅ Download complete: tomo_ac9fef_mask.npy\nTomogram tomo_ac9fef: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_ac9fef, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.0451/11.8669\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.1338/7.7904\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.51it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.57it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  43%|████▎     | 225/518 [1:10:58<1:29:19, 18.29s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_decb81/tomo_decb81.npy to /kaggle/working/data/tomo_decb81.npy\n✅ Download complete: tomo_decb81\nDownloading gs://nb153/precomputedmasks/train/tomo_decb81_mask.npy to /kaggle/working/data/tomo_decb81_mask.npy\n✅ Download complete: tomo_decb81_mask.npy\nTomogram tomo_decb81: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.2274/16.8855\nLoss: 0.9979\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.1060/16.5409\nLoss: 0.9978\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.56it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9969\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  44%|████▎     | 226/518 [1:11:11<1:21:52, 16.82s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_4e1b18/tomo_4e1b18.npy to /kaggle/working/data/tomo_4e1b18.npy\n✅ Download complete: tomo_4e1b18\nDownloading gs://nb153/precomputedmasks/train/tomo_4e1b18_mask.npy to /kaggle/working/data/tomo_4e1b18_mask.npy\n✅ Download complete: tomo_4e1b18_mask.npy\nTomogram tomo_4e1b18: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_4e1b18, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.7708/9.1092\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.9841/15.0697\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  44%|████▍     | 227/518 [1:11:32<1:26:32, 17.84s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c4bfe2/tomo_c4bfe2.npy to /kaggle/working/data/tomo_c4bfe2.npy\n✅ Download complete: tomo_c4bfe2\nDownloading gs://nb153/precomputedmasks/train/tomo_c4bfe2_mask.npy to /kaggle/working/data/tomo_c4bfe2_mask.npy\n✅ Download complete: tomo_c4bfe2_mask.npy\nTomogram tomo_c4bfe2: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_c4bfe2, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.20it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.6943/7.5345\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.7881/5.6323\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.40it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.42it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.44it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.49it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  44%|████▍     | 228/518 [1:12:08<1:53:03, 23.39s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_7550f4/tomo_7550f4.npy to /kaggle/working/data/tomo_7550f4.npy\n✅ Download complete: tomo_7550f4\nDownloading gs://nb153/precomputedmasks/train/tomo_7550f4_mask.npy to /kaggle/working/data/tomo_7550f4_mask.npy\n✅ Download complete: tomo_7550f4_mask.npy\nTomogram tomo_7550f4: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.6150/12.3142\nLoss: 0.9980\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.3049/10.9329\nLoss: 0.9974\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.68it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9968\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  44%|████▍     | 229/518 [1:12:21<1:38:13, 20.39s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_32aaa7/tomo_32aaa7.npy to /kaggle/working/data/tomo_32aaa7.npy\n✅ Download complete: tomo_32aaa7\nDownloading gs://nb153/precomputedmasks/train/tomo_32aaa7_mask.npy to /kaggle/working/data/tomo_32aaa7_mask.npy\n✅ Download complete: tomo_32aaa7_mask.npy\nTomogram tomo_32aaa7: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.8680/18.8748\nLoss: 0.9970\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.5513/18.7986\nLoss: 0.9951\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9949\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  44%|████▍     | 230/518 [1:12:35<1:27:54, 18.31s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_fc1665/tomo_fc1665.npy to /kaggle/working/data/tomo_fc1665.npy\n✅ Download complete: tomo_fc1665\nDownloading gs://nb153/precomputedmasks/train/tomo_fc1665_mask.npy to /kaggle/working/data/tomo_fc1665_mask.npy\n✅ Download complete: tomo_fc1665_mask.npy\nTomogram tomo_fc1665: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_fc1665, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.0773/4.8962\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.2296/5.1132\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  45%|████▍     | 231/518 [1:13:00<1:38:10, 20.53s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b8595d/tomo_b8595d.npy to /kaggle/working/data/tomo_b8595d.npy\n✅ Download complete: tomo_b8595d\nDownloading gs://nb153/precomputedmasks/train/tomo_b8595d_mask.npy to /kaggle/working/data/tomo_b8595d_mask.npy\n✅ Download complete: tomo_b8595d_mask.npy\nTomogram tomo_b8595d: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_b8595d, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.0037/8.3555\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.5054/6.9253\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.63it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  45%|████▍     | 232/518 [1:13:14<1:27:44, 18.41s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_bbe766/tomo_bbe766.npy to /kaggle/working/data/tomo_bbe766.npy\n✅ Download complete: tomo_bbe766\nDownloading gs://nb153/precomputedmasks/train/tomo_bbe766_mask.npy to /kaggle/working/data/tomo_bbe766_mask.npy\n✅ Download complete: tomo_bbe766_mask.npy\nTomogram tomo_bbe766: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.33it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.5810/5.3067\nLoss: 0.9966\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.6151/5.5904\nLoss: 0.9973\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9978\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  45%|████▍     | 233/518 [1:13:28<1:20:50, 17.02s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e51e5e/tomo_e51e5e.npy to /kaggle/working/data/tomo_e51e5e.npy\n✅ Download complete: tomo_e51e5e\nDownloading gs://nb153/precomputedmasks/train/tomo_e51e5e_mask.npy to /kaggle/working/data/tomo_e51e5e_mask.npy\n✅ Download complete: tomo_e51e5e_mask.npy\nTomogram tomo_e51e5e: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.5601/6.8892\nLoss: 0.9933\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.9912/8.4211\nLoss: 0.9940\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.38it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.50it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.40it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.43it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.45it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9923\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  45%|████▌     | 234/518 [1:13:41<1:15:53, 16.03s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6607ec/tomo_6607ec.npy to /kaggle/working/data/tomo_6607ec.npy\n✅ Download complete: tomo_6607ec\nDownloading gs://nb153/precomputedmasks/train/tomo_6607ec_mask.npy to /kaggle/working/data/tomo_6607ec_mask.npy\n✅ Download complete: tomo_6607ec_mask.npy\nTomogram tomo_6607ec: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_6607ec, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.4607/14.3573\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.1986/6.4994\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  45%|████▌     | 235/518 [1:13:55<1:12:29, 15.37s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c7b008/tomo_c7b008.npy to /kaggle/working/data/tomo_c7b008.npy\n✅ Download complete: tomo_c7b008\nDownloading gs://nb153/precomputedmasks/train/tomo_c7b008_mask.npy to /kaggle/working/data/tomo_c7b008_mask.npy\n✅ Download complete: tomo_c7b008_mask.npy\nTomogram tomo_c7b008: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.20it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.09s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.4008/5.3148\nLoss: 0.9969\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.28it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.7469/10.0618\nLoss: 0.9964\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.43it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9969\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  46%|████▌     | 236/518 [1:14:09<1:10:26, 14.99s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_4102f1/tomo_4102f1.npy to /kaggle/working/data/tomo_4102f1.npy\n✅ Download complete: tomo_4102f1\nDownloading gs://nb153/precomputedmasks/train/tomo_4102f1_mask.npy to /kaggle/working/data/tomo_4102f1_mask.npy\n✅ Download complete: tomo_4102f1_mask.npy\nTomogram tomo_4102f1: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.7776/10.5765\nLoss: 0.9973\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.2654/7.0417\nLoss: 0.9906\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9925\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  46%|████▌     | 237/518 [1:14:23<1:08:16, 14.58s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_dc9a96/tomo_dc9a96.npy to /kaggle/working/data/tomo_dc9a96.npy\n✅ Download complete: tomo_dc9a96\nDownloading gs://nb153/precomputedmasks/train/tomo_dc9a96_mask.npy to /kaggle/working/data/tomo_dc9a96_mask.npy\n✅ Download complete: tomo_dc9a96_mask.npy\nTomogram tomo_dc9a96: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_dc9a96, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.8143/16.9633\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.8658/11.5235\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.54it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.57it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  46%|████▌     | 238/518 [1:15:00<1:39:01, 21.22s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_517f70/tomo_517f70.npy to /kaggle/working/data/tomo_517f70.npy\n✅ Download complete: tomo_517f70\nDownloading gs://nb153/precomputedmasks/train/tomo_517f70_mask.npy to /kaggle/working/data/tomo_517f70_mask.npy\n✅ Download complete: tomo_517f70_mask.npy\nTomogram tomo_517f70: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.9409/19.7992\nLoss: 0.9911\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.7677/21.8082\nLoss: 0.9879\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9891\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  46%|████▌     | 239/518 [1:15:13<1:27:24, 18.80s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_f0adfc/tomo_f0adfc.npy to /kaggle/working/data/tomo_f0adfc.npy\n✅ Download complete: tomo_f0adfc\nDownloading gs://nb153/precomputedmasks/train/tomo_f0adfc_mask.npy to /kaggle/working/data/tomo_f0adfc_mask.npy\n✅ Download complete: tomo_f0adfc_mask.npy\nTomogram tomo_f0adfc: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.0491/13.6314\nLoss: 0.9955\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.2400/11.1961\nLoss: 0.9938\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9927\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  46%|████▋     | 240/518 [1:15:27<1:20:18, 17.33s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_288d4f/tomo_288d4f.npy to /kaggle/working/data/tomo_288d4f.npy\n✅ Download complete: tomo_288d4f\nDownloading gs://nb153/precomputedmasks/train/tomo_288d4f_mask.npy to /kaggle/working/data/tomo_288d4f_mask.npy\n✅ Download complete: tomo_288d4f_mask.npy\nTomogram tomo_288d4f: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_288d4f, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.8558/2.6147\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.4547/1.8567\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  47%|████▋     | 241/518 [1:15:41<1:15:24, 16.34s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_518a1f/tomo_518a1f.npy to /kaggle/working/data/tomo_518a1f.npy\n✅ Download complete: tomo_518a1f\nDownloading gs://nb153/precomputedmasks/train/tomo_518a1f_mask.npy to /kaggle/working/data/tomo_518a1f_mask.npy\n✅ Download complete: tomo_518a1f_mask.npy\nTomogram tomo_518a1f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.8134/3.5986\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.0872/4.9001\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.46it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.43it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.51it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9994\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  47%|████▋     | 242/518 [1:15:54<1:11:27, 15.53s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e63ab4/tomo_e63ab4.npy to /kaggle/working/data/tomo_e63ab4.npy\n✅ Download complete: tomo_e63ab4\nDownloading gs://nb153/precomputedmasks/train/tomo_e63ab4_mask.npy to /kaggle/working/data/tomo_e63ab4_mask.npy\n✅ Download complete: tomo_e63ab4_mask.npy\nTomogram tomo_e63ab4: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -27.2807/3.5515\nLoss: 0.9943\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.9843\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.5717/4.5680\nLoss: 0.9949\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9943\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  47%|████▋     | 243/518 [1:16:08<1:09:07, 15.08s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_6b1fd3/tomo_6b1fd3.npy to /kaggle/working/data/tomo_6b1fd3.npy\n✅ Download complete: tomo_6b1fd3\nDownloading gs://nb153/precomputedmasks/train/tomo_6b1fd3_mask.npy to /kaggle/working/data/tomo_6b1fd3_mask.npy\n✅ Download complete: tomo_6b1fd3_mask.npy\nTomogram tomo_6b1fd3: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_6b1fd3, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.15it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.4083/8.4402\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.32it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.5288/14.1316\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.46it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.52it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  47%|████▋     | 244/518 [1:16:30<1:17:53, 17.06s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_08bf73/tomo_08bf73.npy to /kaggle/working/data/tomo_08bf73.npy\n✅ Download complete: tomo_08bf73\nDownloading gs://nb153/precomputedmasks/train/tomo_08bf73_mask.npy to /kaggle/working/data/tomo_08bf73_mask.npy\n✅ Download complete: tomo_08bf73_mask.npy\nTomogram tomo_08bf73: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_08bf73, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.53it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -25.1306/174.1458\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.3836/36.2581\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.59it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  47%|████▋     | 245/518 [1:17:03<1:39:37, 21.89s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_23c8a4/tomo_23c8a4.npy to /kaggle/working/data/tomo_23c8a4.npy\n✅ Download complete: tomo_23c8a4\nDownloading gs://nb153/precomputedmasks/train/tomo_23c8a4_mask.npy to /kaggle/working/data/tomo_23c8a4_mask.npy\n✅ Download complete: tomo_23c8a4_mask.npy\nTomogram tomo_23c8a4: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_23c8a4, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -23.7898/0.5499\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.6522/2.2194\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.52it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.54it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.52it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  47%|████▋     | 246/518 [1:17:17<1:28:11, 19.46s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_30d4e5/tomo_30d4e5.npy to /kaggle/working/data/tomo_30d4e5.npy\n✅ Download complete: tomo_30d4e5\nDownloading gs://nb153/precomputedmasks/train/tomo_30d4e5_mask.npy to /kaggle/working/data/tomo_30d4e5_mask.npy\n✅ Download complete: tomo_30d4e5_mask.npy\nTomogram tomo_30d4e5: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.9824/15.3632\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -24.0242/16.7163\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.46it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.52it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.44it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.43it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.43it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9999\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  48%|████▊     | 247/518 [1:17:31<1:20:24, 17.80s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ed1c97/tomo_ed1c97.npy to /kaggle/working/data/tomo_ed1c97.npy\n✅ Download complete: tomo_ed1c97\nDownloading gs://nb153/precomputedmasks/train/tomo_ed1c97_mask.npy to /kaggle/working/data/tomo_ed1c97_mask.npy\n✅ Download complete: tomo_ed1c97_mask.npy\nTomogram tomo_ed1c97: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.6032/3.4188\nLoss: 0.9990\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.3182/1.0733\nLoss: 0.9974\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.61it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9895\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  48%|████▊     | 248/518 [1:17:51<1:23:24, 18.54s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e2a336/tomo_e2a336.npy to /kaggle/working/data/tomo_e2a336.npy\n✅ Download complete: tomo_e2a336\nDownloading gs://nb153/precomputedmasks/train/tomo_e2a336_mask.npy to /kaggle/working/data/tomo_e2a336_mask.npy\n✅ Download complete: tomo_e2a336_mask.npy\nTomogram tomo_e2a336: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_e2a336, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.2966/5.2242\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.9774/4.7660\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.60it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  48%|████▊     | 249/518 [1:18:24<1:42:35, 22.88s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e1e5d3/tomo_e1e5d3.npy to /kaggle/working/data/tomo_e1e5d3.npy\n✅ Download complete: tomo_e1e5d3\nDownloading gs://nb153/precomputedmasks/train/tomo_e1e5d3_mask.npy to /kaggle/working/data/tomo_e1e5d3_mask.npy\n✅ Download complete: tomo_e1e5d3_mask.npy\nTomogram tomo_e1e5d3: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.2973/13.2347\nLoss: 0.9995\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.67it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.7514/37.0059\nLoss: 0.9990\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9973\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  48%|████▊     | 250/518 [1:18:38<1:29:44, 20.09s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_ab78d0/tomo_ab78d0.npy to /kaggle/working/data/tomo_ab78d0.npy\n✅ Download complete: tomo_ab78d0\nDownloading gs://nb153/precomputedmasks/train/tomo_ab78d0_mask.npy to /kaggle/working/data/tomo_ab78d0_mask.npy\n✅ Download complete: tomo_ab78d0_mask.npy\nTomogram tomo_ab78d0: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_ab78d0, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.45it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.1783/11.6485\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.57it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.4835/20.6764\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.53it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.55it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.60it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  48%|████▊     | 251/518 [1:19:11<1:47:01, 24.05s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_b10aa4/tomo_b10aa4.npy to /kaggle/working/data/tomo_b10aa4.npy\n✅ Download complete: tomo_b10aa4\nDownloading gs://nb153/precomputedmasks/train/tomo_b10aa4_mask.npy to /kaggle/working/data/tomo_b10aa4_mask.npy\n✅ Download complete: tomo_b10aa4_mask.npy\nTomogram tomo_b10aa4: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_b10aa4, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.4067/21.1680\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.7719/18.7216\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.52it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.49it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  49%|████▊     | 252/518 [1:19:25<1:33:24, 21.07s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_bfdf19/tomo_bfdf19.npy to /kaggle/working/data/tomo_bfdf19.npy\n✅ Download complete: tomo_bfdf19\nDownloading gs://nb153/precomputedmasks/train/tomo_bfdf19_mask.npy to /kaggle/working/data/tomo_bfdf19_mask.npy\n✅ Download complete: tomo_bfdf19_mask.npy\nTomogram tomo_bfdf19: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_bfdf19, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.21it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.6288/45.1716\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.26it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.0615/63.8157\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.28it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.40it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.51it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.47it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  49%|████▉     | 253/518 [1:19:39<1:23:48, 18.98s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_98686a/tomo_98686a.npy to /kaggle/working/data/tomo_98686a.npy\n✅ Download complete: tomo_98686a\nDownloading gs://nb153/precomputedmasks/train/tomo_98686a_mask.npy to /kaggle/working/data/tomo_98686a_mask.npy\n✅ Download complete: tomo_98686a_mask.npy\nTomogram tomo_98686a: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.8941\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.3926/27.6612\nLoss: 0.9963\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.8941\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.9195/23.5804\nLoss: 0.9919\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9958\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  49%|████▉     | 254/518 [1:19:53<1:16:19, 17.34s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_8d5995/tomo_8d5995.npy to /kaggle/working/data/tomo_8d5995.npy\n✅ Download complete: tomo_8d5995\nDownloading gs://nb153/precomputedmasks/train/tomo_8d5995_mask.npy to /kaggle/working/data/tomo_8d5995_mask.npy\n✅ Download complete: tomo_8d5995_mask.npy\nTomogram tomo_8d5995: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_8d5995, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.0706/26.2815\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.63it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8860/19.3267\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.58it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  49%|████▉     | 255/518 [1:20:06<1:10:46, 16.15s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2b996c/tomo_2b996c.npy to /kaggle/working/data/tomo_2b996c.npy\n✅ Download complete: tomo_2b996c\nDownloading gs://nb153/precomputedmasks/train/tomo_2b996c_mask.npy to /kaggle/working/data/tomo_2b996c_mask.npy\n✅ Download complete: tomo_2b996c_mask.npy\nTomogram tomo_2b996c: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_2b996c, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.31it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.2047/28.5540\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.42it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.2606/19.9516\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.48it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.51it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  49%|████▉     | 256/518 [1:20:20<1:07:12, 15.39s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_72b187/tomo_72b187.npy to /kaggle/working/data/tomo_72b187.npy\n✅ Download complete: tomo_72b187\nDownloading gs://nb153/precomputedmasks/train/tomo_72b187_mask.npy to /kaggle/working/data/tomo_72b187_mask.npy\n✅ Download complete: tomo_72b187_mask.npy\nTomogram tomo_72b187: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_72b187, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.71it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8806/18.3910\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.62it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.5793/30.8356\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.67it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.68it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  50%|████▉     | 257/518 [1:20:33<1:04:22, 14.80s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_df866a/tomo_df866a.npy to /kaggle/working/data/tomo_df866a.npy\n✅ Download complete: tomo_df866a\nDownloading gs://nb153/precomputedmasks/train/tomo_df866a_mask.npy to /kaggle/working/data/tomo_df866a_mask.npy\n✅ Download complete: tomo_df866a_mask.npy\nTomogram tomo_df866a: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_df866a, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.35it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8556/18.6226\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.35it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8166/26.9743\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.35it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.39it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.41it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.50it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  50%|████▉     | 258/518 [1:20:47<1:02:47, 14.49s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_4e3e37/tomo_4e3e37.npy to /kaggle/working/data/tomo_4e3e37.npy\n✅ Download complete: tomo_4e3e37\nDownloading gs://nb153/precomputedmasks/train/tomo_4e3e37_mask.npy to /kaggle/working/data/tomo_4e3e37_mask.npy\n✅ Download complete: tomo_4e3e37_mask.npy\nTomogram tomo_4e3e37: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_4e3e37, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.28it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -14.6623/9.5600\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.0282/8.6438\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.49it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.54it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.57it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.54it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  50%|█████     | 259/518 [1:21:24<1:31:15, 21.14s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_813916/tomo_813916.npy to /kaggle/working/data/tomo_813916.npy\n✅ Download complete: tomo_813916\nDownloading gs://nb153/precomputedmasks/train/tomo_813916_mask.npy to /kaggle/working/data/tomo_813916_mask.npy\n✅ Download complete: tomo_813916_mask.npy\nTomogram tomo_813916: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_813916, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.40it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8180/14.8601\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.50it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.4842/12.6398\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.62it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.57it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  50%|█████     | 260/518 [1:21:57<1:46:52, 24.86s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_53e048/tomo_53e048.npy to /kaggle/working/data/tomo_53e048.npy\n✅ Download complete: tomo_53e048\nDownloading gs://nb153/precomputedmasks/train/tomo_53e048_mask.npy to /kaggle/working/data/tomo_53e048_mask.npy\n✅ Download complete: tomo_53e048_mask.npy\nTomogram tomo_53e048: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.68it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -18.2595/36.7098\nLoss: 0.9961\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.69it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.6401/37.7820\nLoss: 0.9967\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.51it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9935\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  50%|█████     | 261/518 [1:22:11<1:32:23, 21.57s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e77217/tomo_e77217.npy to /kaggle/working/data/tomo_e77217.npy\n✅ Download complete: tomo_e77217\nDownloading gs://nb153/precomputedmasks/train/tomo_e77217_mask.npy to /kaggle/working/data/tomo_e77217_mask.npy\n✅ Download complete: tomo_e77217_mask.npy\nTomogram tomo_e77217: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_e77217, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.0031/28.1903\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.49it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.0646/17.7091\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.52it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.56it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.55it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.58it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  51%|█████     | 262/518 [1:22:46<1:48:32, 25.44s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0fe63f/tomo_0fe63f.npy to /kaggle/working/data/tomo_0fe63f.npy\n✅ Download complete: tomo_0fe63f\nDownloading gs://nb153/precomputedmasks/train/tomo_0fe63f_mask.npy to /kaggle/working/data/tomo_0fe63f_mask.npy\n✅ Download complete: tomo_0fe63f_mask.npy\nTomogram tomo_0fe63f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.5125/21.2133\nLoss: 0.9914\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.46it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.1083/40.0002\nLoss: 0.9950\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.42it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.50it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.60it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9924\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  51%|█████     | 263/518 [1:22:59<1:33:22, 21.97s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_672101/tomo_672101.npy to /kaggle/working/data/tomo_672101.npy\n✅ Download complete: tomo_672101\nDownloading gs://nb153/precomputedmasks/train/tomo_672101_mask.npy to /kaggle/working/data/tomo_672101_mask.npy\n✅ Download complete: tomo_672101_mask.npy\nTomogram tomo_672101: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.5926/19.3974\nLoss: 0.9947\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.8627/13.8922\nLoss: 0.9888\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.66it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.67it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.71it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9908\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  51%|█████     | 264/518 [1:23:13<1:22:51, 19.57s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_0308c5/tomo_0308c5.npy to /kaggle/working/data/tomo_0308c5.npy\n✅ Download complete: tomo_0308c5\nDownloading gs://nb153/precomputedmasks/train/tomo_0308c5_mask.npy to /kaggle/working/data/tomo_0308c5_mask.npy\n✅ Download complete: tomo_0308c5_mask.npy\nTomogram tomo_0308c5: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_0308c5, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.40it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.5116/18.6337\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.54it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.2925/19.2740\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.45it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.47it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  51%|█████     | 265/518 [1:23:27<1:14:46, 17.73s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_02862f/tomo_02862f.npy to /kaggle/working/data/tomo_02862f.npy\n✅ Download complete: tomo_02862f\nDownloading gs://nb153/precomputedmasks/train/tomo_02862f_mask.npy to /kaggle/working/data/tomo_02862f_mask.npy\n✅ Download complete: tomo_02862f_mask.npy\nTomogram tomo_02862f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.33it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.5572/10.6574\nLoss: 0.9810\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.52it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.5781/7.2801\nLoss: 0.9729\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.61it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9767\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  51%|█████▏    | 266/518 [1:23:41<1:09:42, 16.60s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_1c2534/tomo_1c2534.npy to /kaggle/working/data/tomo_1c2534.npy\n✅ Download complete: tomo_1c2534\nDownloading gs://nb153/precomputedmasks/train/tomo_1c2534_mask.npy to /kaggle/working/data/tomo_1c2534_mask.npy\n✅ Download complete: tomo_1c2534_mask.npy\nTomogram tomo_1c2534: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_1c2534, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.38it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.4035/1.0837\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.2028/-1.2853\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.50it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.57it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.58it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  52%|█████▏    | 267/518 [1:24:16<1:33:12, 22.28s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cc3fc4/tomo_cc3fc4.npy to /kaggle/working/data/tomo_cc3fc4.npy\n✅ Download complete: tomo_cc3fc4\nDownloading gs://nb153/precomputedmasks/train/tomo_cc3fc4_mask.npy to /kaggle/working/data/tomo_cc3fc4_mask.npy\n✅ Download complete: tomo_cc3fc4_mask.npy\nTomogram tomo_cc3fc4: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.3384/1.5157\nLoss: 0.9991\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.0981/-0.9602\nLoss: 0.9992\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.55it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.53it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.54it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.50it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.52it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.55it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9972\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  52%|█████▏    | 268/518 [1:24:30<1:22:24, 19.78s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c596be/tomo_c596be.npy to /kaggle/working/data/tomo_c596be.npy\n✅ Download complete: tomo_c596be\nDownloading gs://nb153/precomputedmasks/train/tomo_c596be_mask.npy to /kaggle/working/data/tomo_c596be_mask.npy\n✅ Download complete: tomo_c596be_mask.npy\nTomogram tomo_c596be: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_c596be, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.5846/12.4878\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.58it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -11.5576/0.6159\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.60it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.45it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.29it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.19it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.35it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  52%|█████▏    | 269/518 [1:25:05<1:40:55, 24.32s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_10a3bd/tomo_10a3bd.npy to /kaggle/working/data/tomo_10a3bd.npy\n✅ Download complete: tomo_10a3bd\nDownloading gs://nb153/precomputedmasks/train/tomo_10a3bd_mask.npy to /kaggle/working/data/tomo_10a3bd_mask.npy\n✅ Download complete: tomo_10a3bd_mask.npy\nTomogram tomo_10a3bd: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_10a3bd, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -12.8845/13.9165\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.3373/13.3190\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.58it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.65it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  52%|█████▏    | 270/518 [1:25:41<1:54:36, 27.73s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_2e1f4c/tomo_2e1f4c.npy to /kaggle/working/data/tomo_2e1f4c.npy\n✅ Download complete: tomo_2e1f4c\nDownloading gs://nb153/precomputedmasks/train/tomo_2e1f4c_mask.npy to /kaggle/working/data/tomo_2e1f4c_mask.npy\n✅ Download complete: tomo_2e1f4c_mask.npy\nTomogram tomo_2e1f4c: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.51it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.6003/26.8156\nLoss: 0.9928\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.59it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -15.2496/31.8310\nLoss: 0.9945\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.50it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.49it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.46it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.44it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.44it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.49it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9908\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  52%|█████▏    | 271/518 [1:25:55<1:36:54, 23.54s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_1446aa/tomo_1446aa.npy to /kaggle/working/data/tomo_1446aa.npy\n✅ Download complete: tomo_1446aa\nDownloading gs://nb153/precomputedmasks/train/tomo_1446aa_mask.npy to /kaggle/working/data/tomo_1446aa_mask.npy\n✅ Download complete: tomo_1446aa_mask.npy\nTomogram tomo_1446aa: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -16.2653/20.5240\nLoss: 0.9906\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -13.7811/11.3874\nLoss: 0.9855\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.48it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.46it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.47it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.45it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.43it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.45it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9633\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  53%|█████▎    | 272/518 [1:26:15<1:32:48, 22.64s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_3b1cc9/tomo_3b1cc9.npy to /kaggle/working/data/tomo_3b1cc9.npy\n✅ Download complete: tomo_3b1cc9\nDownloading gs://nb153/precomputedmasks/train/tomo_3b1cc9_mask.npy to /kaggle/working/data/tomo_3b1cc9_mask.npy\n✅ Download complete: tomo_3b1cc9_mask.npy\nTomogram tomo_3b1cc9: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_3b1cc9, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.35it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -23.7659/35.7074\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.36it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.9195/-2.1530\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.31it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.37it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.40it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:02<00:00,  3.56it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.49it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  53%|█████▎    | 273/518 [1:26:29<1:21:43, 20.01s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_4e478f/tomo_4e478f.npy to /kaggle/working/data/tomo_4e478f.npy\n✅ Download complete: tomo_4e478f\nDownloading gs://nb153/precomputedmasks/train/tomo_4e478f_mask.npy to /kaggle/working/data/tomo_4e478f_mask.npy\n✅ Download complete: tomo_4e478f_mask.npy\nTomogram tomo_4e478f: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.18it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.08s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -21.7432/-1.4945\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.32it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.8612/-1.9674\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.44it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.52it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.59it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.61it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.64it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.56it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9999\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  53%|█████▎    | 274/518 [1:26:43<1:14:20, 18.28s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_9ed470/tomo_9ed470.npy to /kaggle/working/data/tomo_9ed470.npy\n✅ Download complete: tomo_9ed470\nDownloading gs://nb153/precomputedmasks/train/tomo_9ed470_mask.npy to /kaggle/working/data/tomo_9ed470_mask.npy\n✅ Download complete: tomo_9ed470_mask.npy\nTomogram tomo_9ed470: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.66it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -32.7088/5.2280\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.60it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -29.2316/0.6433\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.64it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9999\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  53%|█████▎    | 275/518 [1:26:57<1:08:21, 16.88s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_c11e12/tomo_c11e12.npy to /kaggle/working/data/tomo_c11e12.npy\n✅ Download complete: tomo_c11e12\nDownloading gs://nb153/precomputedmasks/train/tomo_c11e12_mask.npy to /kaggle/working/data/tomo_c11e12_mask.npy\n✅ Download complete: tomo_c11e12_mask.npy\nTomogram tomo_c11e12: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.5886/0.2311\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.56it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -17.3333/-0.0226\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.57it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.63it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.62it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.63it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.66it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9999\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  53%|█████▎    | 276/518 [1:27:11<1:04:31, 16.00s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_bcb115/tomo_bcb115.npy to /kaggle/working/data/tomo_bcb115.npy\n✅ Download complete: tomo_bcb115\nDownloading gs://nb153/precomputedmasks/train/tomo_bcb115_mask.npy to /kaggle/working/data/tomo_bcb115_mask.npy\n✅ Download complete: tomo_bcb115_mask.npy\nTomogram tomo_bcb115: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_bcb115, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.43it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.7631/7.6695\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.55it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -22.4470/20.8734\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.65it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.72it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  53%|█████▎    | 277/518 [1:27:25<1:01:36, 15.34s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_e685b8/tomo_e685b8.npy to /kaggle/working/data/tomo_e685b8.npy\n✅ Download complete: tomo_e685b8\nDownloading gs://nb153/precomputedmasks/train/tomo_e685b8_mask.npy to /kaggle/working/data/tomo_e685b8_mask.npy\n✅ Download complete: tomo_e685b8_mask.npy\nTomogram tomo_e685b8: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.61it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -34.0563/6.7644\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.65it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -29.1173/2.0480\nLoss: 0.9999\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.61it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.54it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.53it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.49it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.48it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.53it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 0.9999\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  54%|█████▎    | 278/518 [1:27:38<59:17, 14.82s/it]  ","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_cabaa0/tomo_cabaa0.npy to /kaggle/working/data/tomo_cabaa0.npy\n✅ Download complete: tomo_cabaa0\nDownloading gs://nb153/precomputedmasks/train/tomo_cabaa0_mask.npy to /kaggle/working/data/tomo_cabaa0_mask.npy\n✅ Download complete: tomo_cabaa0_mask.npy\nTomogram tomo_cabaa0: 0 valid motor coordinates\nMask min/max: 0.0000/0.0000\nWarning: No valid motor coordinates for tomo_cabaa0, using random sampling\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:01,  3.64it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -19.1270/1.3830\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.68it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.05s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/0.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -20.7596/-1.5068\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.62it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.67it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.68it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  54%|█████▍    | 279/518 [1:27:59<1:06:02, 16.58s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_a46b26/tomo_a46b26.npy to /kaggle/working/data/tomo_a46b26.npy\n✅ Download complete: tomo_a46b26\nDownloading gs://nb153/precomputedmasks/train/tomo_a46b26_mask.npy to /kaggle/working/data/tomo_a46b26_mask.npy\n✅ Download complete: tomo_a46b26_mask.npy\nTomogram tomo_a46b26: 1 valid motor coordinates\nMask min/max: 0.0000/1.0000\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:   0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\nTraining:  12%|█▎        | 1/8 [00:00<00:02,  3.44it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 0 load time: 0.06s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -29.8805/43.9855\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  25%|██▌       | 2/8 [00:00<00:01,  3.47it/s]\u001b[A","output_type":"stream"},{"name":"stdout","text":"\n🕒 Batch 1 load time: 0.07s\nInputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nTargets shape: torch.Size([4, 1, 128, 128, 128]), min/max: 0.0000/1.0000\nOutputs shape: torch.Size([4, 1, 128, 128, 128]), min/max: -33.9335/22.5132\nLoss: 1.0000\nGPU Memory: 0.17 GB\n","output_type":"stream"},{"name":"stderr","text":"\nTraining:  38%|███▊      | 3/8 [00:00<00:01,  3.59it/s]\u001b[A\nTraining:  50%|█████     | 4/8 [00:01<00:01,  3.66it/s]\u001b[A\nTraining:  62%|██████▎   | 5/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  75%|███████▌  | 6/8 [00:01<00:00,  3.69it/s]\u001b[A\nTraining:  88%|████████▊ | 7/8 [00:01<00:00,  3.70it/s]\u001b[A\nTraining: 100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\u001b[A\n","output_type":"stream"},{"name":"stdout","text":"Tomogram Loss: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Training tomograms:  54%|█████▍    | 280/518 [1:28:12<1:02:02, 15.64s/it]","output_type":"stream"},{"name":"stdout","text":"Downloading gs://nb153/preprocessed/train/tomo_71d2c0/tomo_71d2c0.npy to /kaggle/working/data/tomo_71d2c0.npy\n✅ Download complete: tomo_71d2c0\nDownloading gs://nb153/precomputedmasks/train/tomo_71d2c0_mask.npy to /kaggle/working/data/tomo_71d2c0_mask.npy\n✅ Download complete: tomo_71d2c0_mask.npy\nTomogram tomo_71d2c0: 0 valid motor coordinates\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"# 1 Hyperparameter Tuning (Peak Detection Threshold)\n# 2 Predict on the validation set,\n# 3 Extract motor locations using peak detection\n# 4 Tune the threshold to maximize the Fβ-score (β=2).\n# 5 Using competition's metric\n\n# Metric implementation (from provided notebook)\ndef distance_metric(solution, submission, thresh_ratio, min_radius):\n    coordinate_cols = ['Motor axis 0', 'Motor axis 1', 'Motor axis 2']\n    label_tensor = solution[coordinate_cols].values.reshape(len(solution), -1, len(coordinate_cols))\n    predicted_tensor = submission[coordinate_cols].values.reshape(len(submission), -1, len(coordinate_cols))\n    solution['distance'] = np.linalg.norm(label_tensor - predicted_tensor, axis=2).min(axis=1)\n    solution['thresholds'] = solution['Voxel spacing'].apply(lambda x: (min_radius * thresh_ratio) / x)\n    solution['predictions'] = submission['Has motor'].values\n    solution.loc[(solution['distance'] > solution['thresholds']) & (solution['Has motor'] == 1) & (submission['Has motor'] == 1), 'predictions'] = 0\n    return solution['predictions'].values\n\ndef score(solution, submission, min_radius, beta):\n    solution = solution.sort_values('tomo_id').reset_index(drop=True)\n    submission = submission.sort_values('tomo_id').reset_index(drop=True)\n    if not solution['tomo_id'].eq(submission['tomo_id']).all():\n        raise ValueError('Submitted tomo_id values do not match')\n    submission['Has motor'] = 1\n    select = (submission[['Motor axis 0', 'Motor axis 1', 'Motor axis 2']] == -1).any(axis='columns')\n    submission.loc[select, 'Has motor'] = 0\n    predictions = distance_metric(solution, submission, thresh_ratio=1.0, min_radius=min_radius)\n    return sklearn.metrics.fbeta_score(solution['Has motor'].values, predictions, beta=beta)\n\n# Predict on full volume with sliding window\ndef predict_full_volume(model, volume, patch_size=(128, 128, 128), stride=64):\n    model.eval()\n    volume = volume.to(device)\n    z_size, y_size, x_size = volume.shape[2:]\n    pz, py, px = patch_size\n    output = torch.zeros_like(volume)\n    counts = torch.zeros_like(volume)\n    \n    with torch.no_grad():\n        for z in range(0, z_size, stride):\n            for y in range(0, y_size, stride):\n                for x in range(0, x_size, stride):\n                    z_end, y_end, x_end = z+pz, y+py, x+px\n                    patch = volume[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)]\n                    pad_z, pad_y, pad_x = max(0, z_end-z_size), max(0, y_end-y_size), max(0, x_end-x_size)\n                    if pad_z > 0 or pad_y > 0 or pad_x > 0:\n                        patch = torch.nn.functional.pad(patch, (0, pad_x, 0, pad_y, 0, pad_z))\n                    out_patch = torch.sigmoid(model(patch))\n                    output[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)] += out_patch[:, :, :pz-pad_z, :py-pad_y, :px-pad_x]\n                    counts[:, :, z:min(z_end, z_size), y:min(y_end, y_size), x:min(x_end, x_size)] += 1\n    output = output / (counts + 1e-8)\n    return output.cpu().numpy()\n\n# Extract motor location from predicted mask\ndef extract_motor_location(mask, threshold):\n    mask = mask.squeeze()\n    if mask.max() < threshold:\n        return -1, -1, -1, 0  # No motor\n    # Find the strongest peak\n    z, y, x = np.unravel_index(np.argmax(mask), mask.shape)\n    # Refine with center of mass for sub-voxel accuracy\n    region = mask[max(0, z-5):z+6, max(0, y-5):y+6, max(0, x-5):x+6]\n    if region.size == 0:\n        return z, y, x, 1\n    z_offset, y_offset, x_offset = center_of_mass(region)\n    z, y, x = z + z_offset - 5, y + y_offset - 5, x + x_offset - 5\n    return z, y, x, 1\n\n# Tune peak detection threshold\ndef tune_threshold(model, val_loader, val_ids, labels_df, thresholds=np.linspace(0.1, 0.9, 9)):\n    model.load_state_dict(torch.load(\"best_model.pth\"))\n    model.eval()\n    best_threshold = 0.5\n    best_fbeta = 0.0\n    # Store thresholds and Fβ Scrores \n    thresholds_list = []\n    fbeta_scores = []\n    \n    for threshold in thresholds:\n        predictions = []\n        for tomo_id in tqdm(val_ids, desc=f\"Tuning threshold {threshold:.2f}\"):\n            dataset = TomogramnDataset(tomo_id, gcs_preprocessed_path, local_dir, mode=\"val\")\n            dataset.load()\n            volume, _ = dataset[0]\n            pred_mask = predict_full_volume(model, volume)\n            z, y, x, has_motor = extract_motor_location(pred_mask, threshold)  # Extract motor location\n            \n            # Dont Load full volume - Use self.volumes from dataset instead of load tomogram\n            #volume = val_dataset.volumes[tomo_id]\n            #volume = torch.tensor(volume[np.newaxis, np.newaxis, ...], dtype=torch.float32)\n            #pred_mask = predict_full_volume(model, volume)  # Predict mask          \n            #z, y, x, has_motor = extract_motor_location(pred_mask, threshold)  # Extract motor location\n            \n            # Visualize prediction for the first tomogram \n            if len(predictions) == 0 and tomo_id == val_ids[0]: # Only for the first tomogram \n                # load ground truth mask \n                mask_path = download_mask_from_gcs(tomo_id, gcs_precomputed_path, \"train\", local_dir)\n                gt_mask = np.load(mask_path)\n                # Take a middle slice\n                slice_idx = volume.shape[2] // 2\n                tomo_slice = volume[0, 0, slice_idx, :, :].numpy()\n                pred_slice = pred_mask[0, 0, slice_idx, :, :]\n                gt_slice = gt_mask[slice_idx, :, :]\n                # Get predicted and ground truth motor locations\n                pred_z, pred_y, pred_x, _ = z, y, x, has_motor\n                gt_row = labels_df[labels_df[\"tomo_id\"] == tomo_id].iloc[0]\n                gt_z, gt_y, gt_x = gt_row[\"Motor axis 0\"], gt_row[\"Motor axis 1\"], gt_row[\"Motor axis 2\"]\n\n                plt.figure(figsize=(15, 5))\n                plt.subplot(1, 3, 1)\n                plt.imshow(tomo_slice, cmap=\"gray\")\n                plt.title(f\"Tomogram Slice (z={slice_idx})\")\n                plt.axis(\"off\")     \n                plt.subplot(1, 3, 2)\n                plt.imshow(pred_slice, cmap=\"hot\")\n                if has_motor:\n                    plt.scatter(pred_x, pred_y, c=\"blue\", marker=\"x\", s=100, label=\"Predicted\")\n                if gt_z != -1:\n                    plt.scatter(gt_x, gt_y, c=\"green\", marker=\"o\", s=100, label=\"Ground Truth\")\n                plt.title(\"Predicted Mask with Motor Locations\")\n                plt.legend()\n                plt.axis(\"off\")\n                plt.subplot(1, 3, 3)\n                plt.imshow(gt_slice, cmap=\"hot\")\n                if gt_z != -1:\n                    plt.scatter(gt_x, gt_y, c=\"green\", marker=\"o\", s=100, label=\"Ground Truth\")\n                plt.title(\"Ground Truth Mask\")\n                plt.legend()\n                plt.axis(\"off\")\n                plt.tight_layout()\n                plt.show()\n                break  # Only visualize one tomogram\n            predictions.append({\"tomo_id\": tomo_id, \"Motor axis 0\": z, \"Motor axis 1\": y, \"Motor axis 2\": x, \"Has motor\": has_motor})\n        \n        # Create submission DataFrame\n        submission_df = pd.DataFrame(predictions)\n        # Create solution DataFrame\n        solution_data = []\n        for tomo_id in val_ids:\n            tomo_labels = labels_df[labels_df[\"tomo_id\"] == tomo_id].iloc[0]\n            solution_data.append({\n                \"tomo_id\": tomo_id,\n                \"Motor axis 0\": tomo_labels[\"Motor axis 0\"],\n                \"Motor axis 1\": tomo_labels[\"Motor axis 1\"],\n                \"Motor axis 2\": tomo_labels[\"Motor axis 2\"],\n                \"Voxel spacing\": tomo_labels[\"Voxel spacing\"],\n                \"Has motor\": 1 if tomo_labels[\"Number of motors\"] > 0 else 0\n            })\n        solution_df = pd.DataFrame(solution_data)\n        # Compute Fβ-score\n        fbeta = score(solution_df, submission_df, min_radius=1000, beta=2)\n        print(f\"Threshold {threshold:.2f}, Fβ-score: {fbeta:.4f}\")\n        # Append for plotting \n        thresholds_list.append(threshold)\n        fbeta_scores.append(fbeta)\n        # WANDB Log Fβ-score for this threshold\n        \"\"\"\n        wandb.log({\n            \"threshold\": threshold,\n            \"fbeta_score\": fbeta\n        })\n        \"\"\"\n        if fbeta > best_fbeta:\n            best_fbeta = fbeta\n            best_threshold = threshold\n\n    # Plot Fβ-score vs. threshold\n    plt.figure(figsize=(8, 5))\n    plt.plot(thresholds_list, fbeta_scores, marker=\"o\")\n    plt.xlabel(\"Threshold\")\n    plt.ylabel(\"Fβ-score (β=2)\")\n    plt.title(\"Fβ-score vs. Peak Detection Threshold\")\n    plt.grid(True)\n    plt.show()\n    plt.close()\n    print(f\"Best threshold: {best_threshold:.2f}, Best Fβ-score: {best_fbeta:.4f}\")\n    return best_threshold\n\n\n\n# Log the best threshold and Fβ-score\n#wandb.log({\n#    \"best_threshold\": best_threshold,\n#    \"best_fbeta_score\": best_fbeta\n#})\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Test prediction\ndef predict_test(model, test_ids, gcs_preprocessed_path, local_dir, threshold):\n    model.load_state_dict(torch.load(\"best_model.pth\"))\n    model.eval()\n    predictions = []\n    for tomo_id in tqdm(test_ids, desc=\"Predicting on test set\"):\n        dataset = TomogramDataset(tomo_id, gcs_preprocessed_path, local_dir, mode=\"test\")\n        dataset.load()\n        volume, _ = dataset[0]\n        pred_mask = predict_full_volume(model, volume)\n        z, y, x, has_motor = extract_motor_location(pred_mask, threshold)\n        predictions.append({\"tomo_id\": tomo_id, \"Motor axis 0\": z, \"Motor axis 1\": y, \"Motor axis 2\": x})\n        dataset.clear()\n    return pd.DataFrame(predictions)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Run pipeline\nprint(\"Starting hyperparameter tuning...\")\nbest_threshold = tune_threshold(model, val_ids, gcs_preprocessed_path, gcs_precomputed_path, local_dir, labels_df)\nprint(\"Generating test predictions...\")\nsubmission_df = predict_test(model, test_ids, gcs_preprocessed_path, local_dir, best_threshold)\nsubmission_df.to_csv(\"submission.csv\", index=False)\nprint(\"Submission file created: submission.csv\")\n\n# Finish the wandb run\n#wandb.finish()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}